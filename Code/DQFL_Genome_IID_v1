{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"fdPhLlT9q3Np"},"outputs":[],"source":[]},{"cell_type":"code","source":["!pip install qiskit-terra==0.24.1 qiskit-aer==0.12.0 qiskit-ibmq-provider==0.20.2 qiskit==0.43.1 qiskit-machine-learning==0.6.1"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"NarkzbhI14dH","executionInfo":{"status":"ok","timestamp":1745618500173,"user_tz":-600,"elapsed":28222,"user":{"displayName":"Shanika Nanayakkara","userId":"01896911983542550879"}},"outputId":"e533a89c-82b3-4586-f955-4f40a44cf528"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting qiskit-terra==0.24.1\n","  Downloading qiskit_terra-0.24.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (9.6 kB)\n","Collecting qiskit-aer==0.12.0\n","  Downloading qiskit_aer-0.12.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (6.2 kB)\n","Collecting qiskit-ibmq-provider==0.20.2\n","  Downloading qiskit_ibmq_provider-0.20.2-py3-none-any.whl.metadata (14 kB)\n","Collecting qiskit==0.43.1\n","  Downloading qiskit-0.43.1.tar.gz (9.6 kB)\n","  Installing build dependencies ... \u001b[?25l\u001b[?25hdone\n","  Getting requirements to build wheel ... \u001b[?25l\u001b[?25hdone\n","  Preparing metadata (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","Collecting qiskit-machine-learning==0.6.1\n","  Downloading qiskit_machine_learning-0.6.1-py3-none-any.whl.metadata (12 kB)\n","Collecting rustworkx>=0.12.0 (from qiskit-terra==0.24.1)\n","  Downloading rustworkx-0.16.0-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (10 kB)\n","Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from qiskit-terra==0.24.1) (2.0.2)\n","Requirement already satisfied: ply>=3.10 in /usr/local/lib/python3.11/dist-packages (from qiskit-terra==0.24.1) (3.11)\n","Requirement already satisfied: psutil>=5 in /usr/local/lib/python3.11/dist-packages (from qiskit-terra==0.24.1) (5.9.5)\n","Requirement already satisfied: scipy>=1.5 in /usr/local/lib/python3.11/dist-packages (from qiskit-terra==0.24.1) (1.14.1)\n","Requirement already satisfied: sympy>=1.3 in /usr/local/lib/python3.11/dist-packages (from qiskit-terra==0.24.1) (1.13.1)\n","Collecting dill>=0.3 (from qiskit-terra==0.24.1)\n","  Downloading dill-0.4.0-py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: python-dateutil>=2.8.0 in /usr/local/lib/python3.11/dist-packages (from qiskit-terra==0.24.1) (2.8.2)\n","Collecting stevedore>=3.0.0 (from qiskit-terra==0.24.1)\n","  Downloading stevedore-5.4.1-py3-none-any.whl.metadata (2.3 kB)\n","Collecting symengine<0.10,>=0.9 (from qiskit-terra==0.24.1)\n","  Downloading symengine-0.9.2-cp311-cp311-manylinux_2_12_x86_64.manylinux2010_x86_64.whl.metadata (1.1 kB)\n","Requirement already satisfied: requests>=2.19 in /usr/local/lib/python3.11/dist-packages (from qiskit-ibmq-provider==0.20.2) (2.32.3)\n","Collecting requests-ntlm<=1.1.0 (from qiskit-ibmq-provider==0.20.2)\n","  Downloading requests_ntlm-1.1.0-py2.py3-none-any.whl.metadata (938 bytes)\n","Collecting numpy>=1.17 (from qiskit-terra==0.24.1)\n","  Downloading numpy-1.23.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl.metadata (2.3 kB)\n","Requirement already satisfied: urllib3>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from qiskit-ibmq-provider==0.20.2) (2.3.0)\n","Requirement already satisfied: websocket-client>=1.5.1 in /usr/local/lib/python3.11/dist-packages (from qiskit-ibmq-provider==0.20.2) (1.8.0)\n","Requirement already satisfied: websockets>=10.0 in /usr/local/lib/python3.11/dist-packages (from qiskit-ibmq-provider==0.20.2) (15.0.1)\n","Requirement already satisfied: scikit-learn>=0.20.0 in /usr/local/lib/python3.11/dist-packages (from qiskit-machine-learning==0.6.1) (1.6.1)\n","Collecting fastdtw (from qiskit-machine-learning==0.6.1)\n","  Downloading fastdtw-0.3.4.tar.gz (133 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m133.4/133.4 kB\u001b[0m \u001b[31m14.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25h  Preparing metadata (setup.py) ... \u001b[?25l\u001b[?25hdone\n","Requirement already satisfied: setuptools>=40.1.0 in /usr/local/lib/python3.11/dist-packages (from qiskit-machine-learning==0.6.1) (75.2.0)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.0->qiskit-terra==0.24.1) (1.17.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19->qiskit-ibmq-provider==0.20.2) (3.4.1)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19->qiskit-ibmq-provider==0.20.2) (3.10)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests>=2.19->qiskit-ibmq-provider==0.20.2) (2025.1.31)\n","Collecting ntlm-auth>=1.0.2 (from requests-ntlm<=1.1.0->qiskit-ibmq-provider==0.20.2)\n","  Downloading ntlm_auth-1.5.0-py2.py3-none-any.whl.metadata (10 kB)\n","Requirement already satisfied: cryptography>=1.3 in /usr/local/lib/python3.11/dist-packages (from requests-ntlm<=1.1.0->qiskit-ibmq-provider==0.20.2) (43.0.3)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.20.0->qiskit-machine-learning==0.6.1) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn>=0.20.0->qiskit-machine-learning==0.6.1) (3.6.0)\n","Collecting pbr>=2.0.0 (from stevedore>=3.0.0->qiskit-terra==0.24.1)\n","  Downloading pbr-6.1.1-py2.py3-none-any.whl.metadata (3.4 kB)\n","Requirement already satisfied: mpmath<1.4,>=1.1.0 in /usr/local/lib/python3.11/dist-packages (from sympy>=1.3->qiskit-terra==0.24.1) (1.3.0)\n","Requirement already satisfied: cffi>=1.12 in /usr/local/lib/python3.11/dist-packages (from cryptography>=1.3->requests-ntlm<=1.1.0->qiskit-ibmq-provider==0.20.2) (1.17.1)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.11/dist-packages (from cffi>=1.12->cryptography>=1.3->requests-ntlm<=1.1.0->qiskit-ibmq-provider==0.20.2) (2.22)\n","Downloading qiskit_terra-0.24.1-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (5.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m5.9/5.9 MB\u001b[0m \u001b[31m10.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading qiskit_aer-0.12.0-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (12.8 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m12.8/12.8 MB\u001b[0m \u001b[31m98.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading qiskit_ibmq_provider-0.20.2-py3-none-any.whl (241 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m241.5/241.5 kB\u001b[0m \u001b[31m27.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading qiskit_machine_learning-0.6.1-py3-none-any.whl (148 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m148.7/148.7 kB\u001b[0m \u001b[31m17.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading dill-0.4.0-py3-none-any.whl (119 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m119.7/119.7 kB\u001b[0m \u001b[31m12.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading numpy-1.23.5-cp311-cp311-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (17.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m17.1/17.1 MB\u001b[0m \u001b[31m127.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading requests_ntlm-1.1.0-py2.py3-none-any.whl (5.7 kB)\n","Downloading rustworkx-0.16.0-cp39-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (2.1 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m100.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading stevedore-5.4.1-py3-none-any.whl (49 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m49.5/49.5 kB\u001b[0m \u001b[31m5.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading symengine-0.9.2-cp311-cp311-manylinux_2_12_x86_64.manylinux2010_x86_64.whl (38.6 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m38.6/38.6 MB\u001b[0m \u001b[31m58.1 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hDownloading ntlm_auth-1.5.0-py2.py3-none-any.whl (29 kB)\n","Downloading pbr-6.1.1-py2.py3-none-any.whl (108 kB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m109.0/109.0 kB\u001b[0m \u001b[31m13.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hBuilding wheels for collected packages: qiskit, fastdtw\n","  Building wheel for qiskit (pyproject.toml) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for qiskit: filename=qiskit-0.43.1-py3-none-any.whl size=8145 sha256=9862e7614c95de0a17f575530048d57cfe8ec82dca78c593465bb0720fee0d03\n","  Stored in directory: /root/.cache/pip/wheels/95/97/09/9b15af04f453e18fe251b496beca9c41f77dc53a8d0e978e57\n","  Building wheel for fastdtw (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for fastdtw: filename=fastdtw-0.3.4-cp311-cp311-linux_x86_64.whl size=542089 sha256=793927586aea57ec5f7e2e17f39604e62d9e34dd53c82c31e1931cc02b7ac651\n","  Stored in directory: /root/.cache/pip/wheels/5c/8a/f6/fd3df9a9714677410a5ccbf3ca519e66db4a54a1c46ea95332\n","Successfully built qiskit fastdtw\n","Installing collected packages: symengine, pbr, numpy, ntlm-auth, dill, stevedore, rustworkx, fastdtw, requests-ntlm, qiskit-terra, qiskit-machine-learning, qiskit-ibmq-provider, qiskit-aer, qiskit\n","  Attempting uninstall: numpy\n","    Found existing installation: numpy 2.0.2\n","    Uninstalling numpy-2.0.2:\n","      Successfully uninstalled numpy-2.0.2\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","jaxlib 0.5.1 requires numpy>=1.25, but you have numpy 1.23.5 which is incompatible.\n","albucore 0.0.23 requires numpy>=1.24.4, but you have numpy 1.23.5 which is incompatible.\n","thinc 8.3.6 requires numpy<3.0.0,>=2.0.0, but you have numpy 1.23.5 which is incompatible.\n","xarray 2025.1.2 requires numpy>=1.24, but you have numpy 1.23.5 which is incompatible.\n","scikit-image 0.25.2 requires numpy>=1.24, but you have numpy 1.23.5 which is incompatible.\n","pymc 5.21.2 requires numpy>=1.25.0, but you have numpy 1.23.5 which is incompatible.\n","tensorflow 2.18.0 requires numpy<2.1.0,>=1.26.0, but you have numpy 1.23.5 which is incompatible.\n","chex 0.1.89 requires numpy>=1.24.1, but you have numpy 1.23.5 which is incompatible.\n","blosc2 3.3.1 requires numpy>=1.26, but you have numpy 1.23.5 which is incompatible.\n","jax 0.5.2 requires numpy>=1.25, but you have numpy 1.23.5 which is incompatible.\n","albumentations 2.0.5 requires numpy>=1.24.4, but you have numpy 1.23.5 which is incompatible.\n","treescope 0.1.9 requires numpy>=1.25.2, but you have numpy 1.23.5 which is incompatible.\n","imbalanced-learn 0.13.0 requires numpy<3,>=1.24.3, but you have numpy 1.23.5 which is incompatible.\n","bigframes 2.1.0 requires numpy>=1.24.0, but you have numpy 1.23.5 which is incompatible.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed dill-0.4.0 fastdtw-0.3.4 ntlm-auth-1.5.0 numpy-1.23.5 pbr-6.1.1 qiskit-0.43.1 qiskit-aer-0.12.0 qiskit-ibmq-provider-0.20.2 qiskit-machine-learning-0.6.1 qiskit-terra-0.24.1 requests-ntlm-1.1.0 rustworkx-0.16.0 stevedore-5.4.1 symengine-0.9.2\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["numpy"]},"id":"785004423ebe4aae9855ad423d2ae1ee"}},"metadata":{}}]},{"cell_type":"code","source":["gpu_info = !nvidia-smi\n","gpu_info = '\\n'.join(gpu_info)\n","if gpu_info.find('failed') >= 0:\n","  print('Not connected to a GPU')\n","else:\n","  print(gpu_info)\n","\n","from psutil import virtual_memory\n","ram_gb = virtual_memory().total / 1e9\n","print('Your runtime has {:.1f} gigabytes of available RAM\\n'.format(ram_gb))\n","\n","if ram_gb < 20:\n","  print('Not using a high-RAM runtime')\n","else:\n","  print('You are using a high-RAM runtime!')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WaeXy79ZCl0i","executionInfo":{"status":"ok","timestamp":1745618515555,"user_tz":-600,"elapsed":181,"user":{"displayName":"Shanika Nanayakkara","userId":"01896911983542550879"}},"outputId":"4bebf1ad-be33-4f1a-e262-6a5a3e3d0651"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Fri Apr 25 22:01:55 2025       \n","+-----------------------------------------------------------------------------------------+\n","| NVIDIA-SMI 550.54.15              Driver Version: 550.54.15      CUDA Version: 12.4     |\n","|-----------------------------------------+------------------------+----------------------+\n","| GPU  Name                 Persistence-M | Bus-Id          Disp.A | Volatile Uncorr. ECC |\n","| Fan  Temp   Perf          Pwr:Usage/Cap |           Memory-Usage | GPU-Util  Compute M. |\n","|                                         |                        |               MIG M. |\n","|=========================================+========================+======================|\n","|   0  Tesla T4                       Off |   00000000:00:04.0 Off |                    0 |\n","| N/A   57C    P8              9W /   70W |       0MiB /  15360MiB |      0%      Default |\n","|                                         |                        |                  N/A |\n","+-----------------------------------------+------------------------+----------------------+\n","                                                                                         \n","+-----------------------------------------------------------------------------------------+\n","| Processes:                                                                              |\n","|  GPU   GI   CI        PID   Type   Process name                              GPU Memory |\n","|        ID   ID                                                               Usage      |\n","|=========================================================================================|\n","|  No running processes found                                                             |\n","+-----------------------------------------------------------------------------------------+\n","Your runtime has 54.8 gigabytes of available RAM\n","\n","You are using a high-RAM runtime!\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"Us3DV6Sfq6Mw"},"outputs":[],"source":["\n","%%capture\n","!pip install genomic-benchmarks\n","!pip install qiskit qiskit_machine_learning qiskit_algorithms\n","!pip install qiskit-aer\n","!pip install qiskit\n","!pip install qiskit_machine_learning"]},{"cell_type":"code","source":["def set_global_seed(seed=42):\n","    import numpy as np\n","    import random\n","    from qiskit.utils import algorithm_globals\n","    random.seed(seed)\n","    np.random.seed(seed)\n","    algorithm_globals.random_seed = seed\n","\n","set_global_seed(42)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XPdDCDx8Ozgj","executionInfo":{"status":"ok","timestamp":1745618538619,"user_tz":-600,"elapsed":515,"user":{"displayName":"Shanika Nanayakkara","userId":"01896911983542550879"}},"outputId":"ac811486-96b4-47e5-88c4-d98b8f9594de"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-3-3129c646fab0>:7: DeprecationWarning: The property ``qiskit.utils.algorithm_globals.QiskitAlgorithmGlobals.random_seed`` is deprecated as of qiskit 0.45.0. It will be removed in the Qiskit 1.0 release. This algorithm utility has been migrated to an independent package: https://github.com/qiskit-community/qiskit-algorithms. You can run ``pip install qiskit_algorithms`` and import ``from qiskit_algorithms.utils`` instead. \n","  algorithm_globals.random_seed = seed\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"m5M_eDObB6OI"},"outputs":[],"source":["import os\n","from datetime import datetime\n","import time\n","import csv\n","from tqdm import tqdm\n","\n","#-------Split data for federated Setting--------#\n","num_epochs = 10 #50\n","max_train_iterations = 100\n","samples_per_epoch=50 #10\n","#backend = Aer.get_backend('aer_simulator')\n","word_size = 40\n","\n","# Configuration variables\n","num_clients = 8\n","num_federated_layers = 10\n","num_deep_unfolding_iterations = 5\n","initial_learning_rate = 0.15\n","meta_learning_rate=1e-4\n","initial_perturbation = 0.15\n","momentum = 0.95\n","gradient_moving_avg = 0\n","\n","# Define federated learning with accuracy tracking\n","num_features = 5\n","global_model_weights, global_model_accuracy = {}, []\n","clients_train_accuracies, clients_test_accuracies = [], []\n","\n","# Define the federated learning parameters\n","# ─── 0. Capture the start timestamp ────────────────────────────────────────────\n","start_ts   = datetime.now()"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":40100,"status":"ok","timestamp":1745618583779,"user":{"displayName":"Shanika Nanayakkara","userId":"01896911983542550879"},"user_tz":-600},"id":"LpAw5S3imZQW","outputId":"4d12f3c6-072c-48eb-82ee-4184c3be8acc"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/genomic_benchmarks/utils/datasets.py:11: TqdmExperimentalWarning: Using `tqdm.autonotebook.tqdm` in notebook mode. Use `tqdm.tqdm` instead to force console mode (e.g. in jupyter console)\n","  from tqdm.autonotebook import tqdm\n","Downloading...\n","From (original): https://drive.google.com/uc?id=1JW0-eTB-rJXvFcglqBo3pFZi1kyIWC3X\n","From (redirected): https://drive.google.com/uc?id=1JW0-eTB-rJXvFcglqBo3pFZi1kyIWC3X&confirm=t&uuid=96b510a5-a8bf-4c2a-921d-e835f9f46d65\n","To: /root/.genomic_benchmarks/demo_human_or_worm.zip\n","100%|██████████| 28.9M/28.9M [00:01<00:00, 20.7MB/s]\n"]},{"output_type":"stream","name":"stdout","text":["Nuber of samples in the test set: 25000\n","Nuber of samples in the test set: 75000\n","First sample int the data_set variable: \n","('TATTGACAATACATTCAGATTGGATTGATTTCTATATTTCAACTGGAATTTTTTTTCGTTTTCAGGCTAATAGTTTTTGTGATGTTACGTGGGATGTAGTGATATCCGCTTCCAGTCTTTCAAACAAACAAACAAAGCTGTAATGATCATTTTGTACACTTGATTATTGATATGTTTACAAGATTAGATGCATGCAAAAC', 0)\n","\n","First 5 samples in the word_combinations dict.\n","TATTGACAATACATTCAGATTGGATTGATTTCTATATTTC 1\n","ATTGACAATACATTCAGATTGGATTGATTTCTATATTTCA 2\n","TTGACAATACATTCAGATTGGATTGATTTCTATATTTCAA 3\n","TGACAATACATTCAGATTGGATTGATTTCTATATTTCAAC 4\n","GACAATACATTCAGATTGGATTGATTTCTATATTTCAACT 5\n","First 5 samples of encoded data:\n","First 5 samples of encoded shuffled data:\n","First 5 samples of scaled encoded shuffled data:\n","Length of np_train_data: 5000\n","Length of np_test_data: 1000\n","Client 0 Test Data Length: 125\n","Client 1 Test Data Length: 125\n","Client 2 Test Data Length: 125\n","Client 3 Test Data Length: 125\n","Client 4 Test Data Length: 125\n","Client 5 Test Data Length: 125\n","Client 6 Test Data Length: 125\n","Client 7 Test Data Length: 125\n"]}],"source":["\n","from genomic_benchmarks.dataset_getters.pytorch_datasets import DemoHumanOrWorm\n","import time\n","from qiskit.circuit.library import ZZFeatureMap, RealAmplitudes\n","from qiskit_algorithms.optimizers import COBYLA\n","from qiskit_machine_learning.algorithms.classifiers import VQC\n","from qiskit.primitives import BackendSampler\n","from functools import partial\n","from qiskit_aer import Aer\n","\n","from qiskit_machine_learning.neural_networks import SamplerQNN\n","from qiskit_machine_learning.algorithms.classifiers import NeuralNetworkClassifier\n","from qiskit.circuit.library import ZZFeatureMap, RealAmplitudes\n","from qiskit.primitives import BackendSampler\n","from qiskit_algorithms.optimizers import SPSA\n","import numpy as np\n","import time\n","from IPython.display import clear_output\n","import matplotlib.pyplot as plt\n","from qiskit_algorithms.utils import algorithm_globals # Import algorithm_globals\n","\n","# Set random seed for reproducibility using algorithm_globals\n","algorithm_globals.random_seed = 42  # Set seed globally\n","\n","\n","test_set = DemoHumanOrWorm(split='test', version=0)\n","train_set = DemoHumanOrWorm(split='train', version=0)\n","\n","data_set = train_set\n","# data_set = train_set + test_set\n","len(data_set)\n","\n","\n","print(f\"Nuber of samples in the test set: {len(test_set)}\")\n","print(f\"Nuber of samples in the test set: {len(train_set)}\")\n","\n","from genomic_benchmarks.dataset_getters.pytorch_datasets import DemoHumanOrWorm\n","\n","test_set = DemoHumanOrWorm(split='test', version=0)\n","train_set = DemoHumanOrWorm(split='train', version=0)\n","\n","data_set = train_set\n","# data_set = train_set + test_set\n","len(data_set)\n","\n","from collections import defaultdict\n","import numpy as np\n","\n","\n","word_combinations = defaultdict(int)\n","iteration = 1\n","for text, _ in data_set:\n","    for i in range(len(text)):\n","        word = text[i:i+word_size]\n","        if word_combinations.get(word) is None:\n","          word_combinations[word] = iteration\n","          iteration += 1\n","\n","\n","\n","print(\"First sample int the data_set variable: \")\n","print(data_set[0])\n","\n","print(\"\\nFirst 5 samples in the word_combinations dict.\")\n","for key, value in list(word_combinations.items())[:5]:\n","    print(key, value)\n","\n","\n","import numpy as np\n","# Preprocess the training set\n","np_data_set = []\n","for i in range(len(data_set)):\n","    sequence, label = data_set[i]\n","    sequence = sequence.strip()  # Remove any leading/trailing whitespace\n","    words = [sequence[i:i + word_size] for i in range(0, len(sequence), word_size)]  # Split the sequence into 4-letter words\n","    int_sequence = np.array([word_combinations[word] for word in words])\n","    data_point = {'sequence': int_sequence, 'label': label}\n","    np_data_set.append(data_point)\n","\n","\n","print(\"First 5 samples of encoded data:\")\n","np_data_set[:5]\n","\n","\n","np.random.shuffle(np_data_set)\n","print(\"First 5 samples of encoded shuffled data:\")\n","np_data_set[:5]\n","from sklearn.preprocessing import MinMaxScaler\n","\n","sequences = np.array([item['sequence'] for item in np_data_set])\n","sequences = np.vstack(sequences)\n","\n","scaler = MinMaxScaler()\n","\n","sequences_scaled = scaler.fit_transform(sequences)\n","\n","for i, item in enumerate(np_data_set):\n","    item['sequence'] = sequences_scaled[i]\n","\n","print(\"First 5 samples of scaled encoded shuffled data:\")\n","np_data_set[:5]\n","\n","\n","np_train_data = np_data_set[:5000]\n","np_test_data = np_data_set[-1000:]\n","\n","print(f\"Length of np_train_data: {len(np_train_data)}\")\n","print(f\"Length of np_test_data: {len(np_test_data)}\")\n","\n","test_sequences = [data_point[\"sequence\"] for data_point in np_test_data]\n","test_labels = [data_point[\"label\"] for data_point in np_test_data]\n","test_sequences = np.array(test_sequences)\n","test_labels = np.array(test_labels)\n","\n","\n","#---------------------------------------\n","\n","\n","class Client:\n","   def __init__(self, data, test_data):  # Add test_data to __init__\n","        self.data = data\n","        self.test_data = test_data  # Store test_data as an attribute\n","        self.models = []\n","        self.train_scores = []\n","        self.test_scores = []\n","        self.primary_model = None\n","\n","def split_dataset(num_clients, num_epochs, samples_per_epoch):\n","    clients = []\n","    # Split test data across clients\n","    test_samples_per_client = len(np_test_data) // num_clients\n","\n","    for i in range(num_clients):\n","        client_data = []\n","        for j in range(num_epochs):\n","            start_idx = (i * num_epochs * samples_per_epoch) + (j * samples_per_epoch)\n","            end_idx = (i * num_epochs * samples_per_epoch) + ((j + 1) * samples_per_epoch)\n","            client_data.append(np_train_data[start_idx:end_idx])\n","\n","        # Assign a subset of the test data to each client\n","        test_start_idx = i * test_samples_per_client\n","        test_end_idx = (i + 1) * test_samples_per_client\n","        client_test_data = np_test_data[test_start_idx:test_end_idx]\n","\n","        # Create Client instance with both train and test data\n","        clients.append(Client(client_data, client_test_data))\n","\n","    return clients\n","\n","clients = split_dataset(num_clients, num_epochs, samples_per_epoch)\n","\n","# Verify test data distribution across clients\n","for index, client in enumerate(clients):\n","    print(f\"Client {index} Test Data Length: {len(client.test_data)}\")\n"]},{"cell_type":"markdown","metadata":{"id":"LIg_mUrp3_2J"},"source":["Data Load and preprocessing"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"3OTrftC6uZd_"},"outputs":[],"source":["def split_dataset_for_epochs(num_clients, num_epochs, train_data, test_data, samples_per_epoch):\n","    \"\"\"\n","    Split the dataset across multiple epochs and clients.\n","\n","    Args:\n","        num_clients (int): Number of clients.\n","        num_epochs (int): Number of epochs.\n","        train_data (list): List of training data points.\n","        test_data (list): List of test data points.\n","        samples_per_epoch (int): Number of samples per epoch.\n","\n","    Returns:\n","        list: A list of Client objects with assigned data for each epoch.\n","    \"\"\"\n","    clients = []\n","\n","    # Split the training data across epochs and clients\n","    train_samples_per_client = len(train_data) // num_clients\n","\n","    for i in range(num_clients):\n","        client_data_for_epochs = []\n","\n","        for epoch in range(num_epochs):\n","            start_idx = (i * num_epochs * samples_per_epoch) + (epoch * samples_per_epoch)\n","            end_idx = (i * num_epochs * samples_per_epoch) + ((epoch + 1) * samples_per_epoch)\n","            client_data_for_epochs.append(train_data[start_idx:end_idx])\n","\n","        # Assign test data to each client\n","        test_samples_per_client = len(test_data) // num_clients\n","        test_start_idx = i * test_samples_per_client\n","        test_end_idx = (i + 1) * test_samples_per_client\n","        client_test_data = test_data[test_start_idx:test_end_idx]\n","\n","        # Create a Client instance with epoch-specific data\n","        clients.append(Client(client_data_for_epochs, client_test_data))\n","\n","    return clients\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"vHHwtTUF65Gp"},"outputs":[],"source":["\n","import csv\n","import numpy as np\n","import time\n","import matplotlib.pyplot as plt\n","\n","from qiskit_machine_learning.neural_networks import SamplerQNN\n","from qiskit_machine_learning.algorithms.classifiers import NeuralNetworkClassifier\n","from qiskit.circuit.library import ZZFeatureMap, RealAmplitudes\n","from qiskit.primitives import BackendSampler\n","from qiskit_algorithms.optimizers import SPSA\n","from qiskit_algorithms.utils import algorithm_globals\n","from qiskit_algorithms.optimizers import COBYLA\n","from sklearn.preprocessing import LabelBinarizer\n","from sklearn.metrics import log_loss\n","from tqdm import tqdm\n","\n","\n","# Callback function to capture the loss values\n","objective_func_vals = []  # Global list to store loss values\n","learning_rates = []\n","perturbations = []\n","# Data structure for tracking per-client, per-layer objective function values\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"o0CaYcz9FQw7"},"outputs":[],"source":["\n","\n","import os  # For handling directories\n","\n","# Define the directory to save the plots\n","output_dir = \"federated_round_plots\"\n","os.makedirs(output_dir, exist_ok=True)  # Create the directory if it doesn't exist\n","# Initialize a global variable to track the round number\n","current_round = 1\n","\n","# Callback for visualization, gradient smoothing, and learning rate adjustment in deep unfolding\n","def deep_unfolding_learning_rate_adjustment(parameters, obj_func_eval, gradients=None,round_number=0):\n","    global gradient_moving_avg, learning_rates, perturbations,current_round\n","\n","\n","\n","    # Save the objective function value for visualization\n","    objective_func_vals.append(obj_func_eval)\n","\n","    # If gradients are provided, smooth the gradient using momentum\n","    if gradients is not None:\n","        gradient_moving_avg = momentum * gradient_moving_avg + (1 - momentum) * gradients  # Apply moving average\n","        delta_lr = 0.05 * gradient_moving_avg  # Adjust learning rate based on the smoothed gradient\n","        delta_perturbation = 0.1 * gradient_moving_avg  # Adjust perturbation based on the same gradient\n","    else:\n","        delta_lr = 0  # No gradient info available in this iteration\n","        delta_perturbation = 0\n","\n","    # Update learning rate and perturbation\n","    if len(learning_rates) > 0:\n","        new_lr = max(0.001, learning_rates[-1] + delta_lr)  # Ensure learning rate is positive and non-zero\n","        new_perturbation = max(0.001, perturbations[-1] + delta_perturbation)  # Ensure perturbation is positive\n","    else:\n","        new_lr = initial_learning_rate\n","        new_perturbation = initial_perturbation\n","\n","    learning_rates.append(new_lr)\n","    perturbations.append(new_perturbation)\n","\n","    import matplotlib.pyplot as plt\n","\n","    # Visualization of learning rate and perturbation\n","    plt.figure(figsize=(10, 12))  # Adjust figure size for better spacing\n","\n","    # Plot Objective Function Value\n","    plt.subplot(3, 1, 1)\n","    plt.plot(range(len(objective_func_vals)), objective_func_vals, label=\"Objective Function Value\", color='blue')\n","    plt.xlabel(\"Iteration\")\n","    plt.ylabel(\"Objective Function Value\")\n","    plt.title(\"Objective Function Over Iterations\")\n","    plt.legend(loc=\"best\")\n","    plt.grid(True)  # Add grid for better readability\n","\n","    # Plot Learning Rate\n","    plt.subplot(3, 1, 2)\n","    plt.plot(range(len(learning_rates)), learning_rates, label=\"Learning Rate\", color='green')\n","    plt.xlabel(\"Iteration\")\n","    plt.ylabel(\"Learning Rate\")\n","    plt.title(\"Learning Rate Over Iterations\")\n","    plt.legend(loc=\"best\")\n","    plt.grid(True)\n","\n","    # Plot Perturbation\n","    plt.subplot(3, 1, 3)\n","    plt.plot(range(len(perturbations)), perturbations, label=\"Perturbation\", color='red')\n","    plt.xlabel(\"Iteration\")\n","    plt.ylabel(\"Perturbation\")\n","    plt.title(\"Perturbation Over Iterations\")\n","    plt.legend(loc=\"best\")\n","    plt.grid(True)\n","\n","    plt.tight_layout(pad=3.0)  # Add padding between subplots\n","    # Save the plot after each federated round\n","    #plot_filename = os.path.join(output_dir, f\"federated_round_{current_round}.png\")\n","    #plt.savefig(plot_filename)  # Save the figure\n","    #plt.show()\n","    plt.close()  # Close the plot to free memory\n","\n","    # Increment the round number for the next call\n","    current_round += 1\n","\n","\n","# Define the SPSA callback to capture gradients and update learning rate and perturbation dynamically\n","def spsa_callback(nfev, parameters, obj_func_eval, stepsize, accept):\n","    # Assuming `stepsize` contains gradient information or its approximation\n","    gradients = stepsize\n","    deep_unfolding_learning_rate_adjustment(parameters, obj_func_eval, gradients)\n","\n","# Custom SPSA optimizer with learnable learning rate and perturbation\n","class LearnableLRPerturbationSPSA(SPSA):\n","    def __init__(self, initial_lr=1e-4, initial_perturbation=0.01, lr_alpha=0.1, *args, **kwargs):\n","        super().__init__(*args, **kwargs)\n","        self.lr = initial_lr  # Initial learning rate\n","        self.perturbation = initial_perturbation  # Initial perturbation\n","        self.lr_alpha = lr_alpha  # Learning rate and perturbation update speed\n","\n","    def _update_learning_rate_and_perturbation(self, gradient, obj_func_eval):\n","        \"\"\"\n","        Update both learning rate and perturbation based on gradient and objective function evaluation.\n","        The learning rate increases if the objective function improves and decreases otherwise.\n","        \"\"\"\n","        # Use the gradient sign to determine if we should increase or decrease\n","        grad_lr = np.sign(np.mean(gradient))  # Average gradient sign across parameters\n","\n","        if grad_lr > 0:  # Objective function is improving\n","            self.lr += self.lr_alpha * abs(grad_lr)  # Increase learning rate\n","            self.perturbation += self.lr_alpha * abs(grad_lr)  # Increase perturbation\n","        else:  # Objective function is getting worse\n","            self.lr -= self.lr_alpha * abs(grad_lr)  # Decrease learning rate\n","            self.perturbation -= self.lr_alpha * abs(grad_lr)  # Decrease perturbation\n","\n","        # Ensure both learning rate and perturbation are positive\n","        self.lr = max(0.001, self.lr)\n","        self.perturbation = max(0.001, self.perturbation)\n","\n","    def step(self, gradient, obj_func_eval):\n","        \"\"\"\n","        Perform optimization step for both parameters, learning rate, and perturbation.\n","        Use the objective function evaluation to dynamically adjust learning rate and perturbation.\n","        \"\"\"\n","        self._update_learning_rate_and_perturbation(gradient, obj_func_eval)\n","        return super().step(gradient)  # Perform SPSA step for parameters\n","\n","    def reset(self):\n","        \"\"\"\n","        Reset the optimizer state (learning rates, perturbations, and gradient moving averages) for the next round.\n","        \"\"\"\n","        self.lr = initial_learning_rate\n","        self.perturbation = initial_perturbation\n","        self.gradient_moving_avg = 0  # Reset the moving average of the gradient\n","        learning_rates.clear()  # Reset the learning rates history\n","        perturbations.clear()  # Reset the perturbations history\n","        objective_func_vals.clear()  # Clear the objective function history"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"X46XXHW1s4tR"},"outputs":[],"source":["# Create optimizer with learnable learning rate and perturbation\n","spsa_optimizer = LearnableLRPerturbationSPSA(\n","      maxiter=25, learning_rate=initial_learning_rate, perturbation=initial_perturbation, callback=spsa_callback, lr_alpha=0.01\n",")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"-3Rhf0Ft7CI2","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1745618614104,"user_tz":-600,"elapsed":23440,"user":{"displayName":"Shanika Nanayakkara","userId":"01896911983542550879"}},"outputId":"2b17cd0e-cbbc-475a-82a6-b1b40b32d48a"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["\n","#======================================================\n","# Initialize QNN model\n","def initialize_model(num_features,initial_params):\n","    feature_map = ZZFeatureMap(feature_dimension=num_features, reps=2)\n","    ansatz = RealAmplitudes(num_qubits=num_features, reps=3)\n","    qc = feature_map.compose(ansatz)\n","\n","    # Create optimizer with learnable learning rate and perturbation\n","    spsa_optimizer = LearnableLRPerturbationSPSA(\n","      maxiter=20, learning_rate=initial_learning_rate, perturbation=initial_perturbation, callback=spsa_callback, lr_alpha=0.01\n",")\n","    def parity(x):\n","        return \"{:b}\".format(x).count(\"1\") % 2\n","\n","    sampler_qnn = SamplerQNN(\n","        circuit=qc,\n","        interpret=parity,\n","        output_shape=2,\n","        input_params=feature_map.parameters,\n","        weight_params=ansatz.parameters\n","    )\n","\n","\n","    # Define the neural network classifier\n","    qnn_classifier = NeuralNetworkClassifier(\n","      neural_network=sampler_qnn,\n","      optimizer=spsa_optimizer,\n","      loss='squared_error',\n","      initial_point=initial_params,  # Initialize with the starting parameters\n",")\n","\n","\n","    return qnn_classifier\n","\n","#=====================================================\n","from google.colab import drive\n","import csv\n","# Step 1: Mount Google Drive\n","drive.mount('/content/drive')\n","\n","# Step 2: Define the save path in Google Drive\n","csv_file = '/content/drive/My Drive/DQFL_Genome_IID_2604_2025.csv'\n","\n","# Step 3: Define headers for the CSV\n","headers = [\"Federated Round\", \"Client Number\", \"Iteration\", \"Objective Function Value\",\n","           \"Training Accuracy\", \"Test Accuracy\", \"Learning Rate\", \"Perturbation\"]\n","\n","# Open the CSV file and write headers if it's the first time writing to the file\n","with open(csv_file, mode='w', newline='') as file:\n","    writer = csv.writer(file)\n","    writer.writerow(headers)\n","\n","# Example of saving results for each federated round and client\n","def save_results(federated_round, client_id, iteration, obj_func_val, train_acc, test_acc, learning_rate, perturbation):\n","    with open(csv_file, mode='a', newline='') as file:  # Open file in append mode\n","        writer = csv.writer(file)\n","        writer.writerow([federated_round, client_id, iteration, obj_func_val, train_acc, test_acc, learning_rate, perturbation])\n","#=====================================================\n","# Federated learning loop per client\n","def train_qnn_model(client_data, client_test_data, model=None, client_id=None, layer=None):\n","\n","    global learning_rates, perturbations, objective_func_vals\n","    print(\"Client Data Structure:\")  # Add this line to print the structure\n","    print(client_data)                # This line prints the actual data\n","    print(type(client_data))           # This line prints the data type\n","    #num_features = client_data[0][\"sequence\"].shape[0]\n","\n","    #initial_params = np.random.rand(RealAmplitudes(client_data.shape[1], reps=4).num_parameters)  # Initialize params\n","    initial_params = np.random.rand(RealAmplitudes(len(client_data[0][\"sequence\"]), reps=3).num_parameters)\n","\n","    if model is None:\n","        model = initialize_model(num_features, initial_params)\n","\n","    train_sequences = np.array([data_point[\"sequence\"] for data_point in client_data])\n","    train_labels = np.array([data_point[\"label\"] for data_point in client_data])\n","    test_sequences = np.array([data_point[\"sequence\"] for data_point in client_test_data])\n","    test_labels = np.array([data_point[\"label\"] for data_point in client_test_data])\n","\n","    train_accuracies, test_accuracies, total_time = [], [], 0\n","\n","    train_accuracies = []\n","    test_accuracies = []\n","\n","    # Deep Unfolding with multiple iterations\n","    # Continue training with learned weights and adjust learning rate based on performance and gradients.\n","    total_time = 0\n","    current_params = initial_params  # Start with the initial parameters\n","\n","    for i in range(num_deep_unfolding_iterations):\n","        print(\"\\n\")\n","        print(f\"Deep Unfolding Iteration {i+1}/{num_deep_unfolding_iterations}\")\n","        start_time = time.time()\n","        model.fit(train_sequences, train_labels)\n","        end_time = time.time()\n","        total_time += end_time - start_time\n","\n","        # After training, retrieve the updated parameters from the optimizer\n","        current_params = model.weights\n","        print(f\"Trained parameters after iteration {i+1}: {current_params}\")\n","\n","        # Store final weights and learning rate for next round\n","        final_learning_rate = learning_rates[-1]\n","        final_perturbation = perturbations[-1]\n","\n","        # Evaluate the model performance\n","        train_accuracy = model.score(train_sequences, train_labels)\n","        test_accuracy = model.score(test_sequences, test_labels)\n","\n","        # Store accuracies for future reference\n","        train_accuracies.append(train_accuracy)\n","        test_accuracies.append(test_accuracy)\n","\n","\n","        # Write the results to the CSV file\n","        save_results(layer, client_id, i+1, objective_func_vals[-1], train_accuracy * 100, test_accuracy * 100, final_learning_rate, final_perturbation)\n","\n","        #with open(csv_file, mode='a', newline='') as file:\n","          #writer = csv.writer(file)\n","         #writer.writerow([i+1, objective_func_vals[-1], train_accuracy * 100, test_accuracy * 100, final_learning_rate, final_perturbation])\n","\n","        # Update the learning rate for the next iteration based on gradients from SPSA\n","        spsa_optimizer.learning_rate = learning_rates[-1]\n","        model.initial_point = current_params\n","\n","        # Log performance\n","        print(f\"Iteration {i+1} - Learning Rate: {final_learning_rate:.6f}\")\n","        print(f\"Iteration {i+1} - Training Accuracy: {train_accuracy * 100:.2f}%\")\n","        print(f\"Iteration {i+1} - Test Accuracy: {test_accuracy * 100:.2f}%\")\n","\n","    return model, train_accuracy, train_accuracy, total_time\n","\n","\n"]},{"cell_type":"code","source":[],"metadata":{"id":"bGhtrwV-DDHP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# Step to empty the CSV file before starting a new run\n","def clear_csv_file():\n","    \"\"\"\n","    Clears the CSV file by overwriting it with headers or leaving it blank.\n","    \"\"\"\n","    with open(csv_file, mode='w', newline='') as file:\n","        writer = csv.writer(file)\n","        # Uncomment the next line to write headers for the new run\n","        writer.writerow(headers)\n","        # Leave it blank if you prefer not to include headers\n","        # pass\n","\n"],"metadata":{"id":"AkLnHZoPTwB6"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"zpK0oXUHzPtm"},"outputs":[],"source":["def get_accuracy(model, test_sequences, test_labels):\n","    \"\"\"\n","    Evaluate the accuracy of the given model on the test dataset.\n","\n","    Parameters:\n","        model: The trained model to evaluate.\n","        num_features: The number of features in each data sample.\n","        test_sequences: A list or array of test input data (features).\n","        test_labels: A list or array of true labels corresponding to the test data.\n","\n","    Returns:\n","        float: The accuracy of the model as a percentage.\n","    \"\"\"\n","    test_accuracy = model.score(test_sequences, test_labels)\n","    return test_accuracy\n","\n","# Function to extract numerical values of parameters\n","def extract_param_values(model):\n","    #param_values = []\n","    # Loop through each parameter in the circuit and get its bound value\n","    # Retrieve the circuit from the neural network\n","    circuit = model.neural_network.circuit\n","\n","    # Extract the parameter values bound to the circuit\n","    # Use enumerate to get both index and parameter\n","    param_values = {param: circuit.parameters[i] for i, param in enumerate(circuit.parameters)}\n","    return param_values\n","#def set_param_values(model, param_values):\n","    # Retrieve the circuit from the neural network\n","    #circuit = model.neural_network.circuit\n","\n","    # Use assign_parameters to update the parameter values\n","    #circuit.assign_parameters(param_values, inplace=True)\n","# Function to set numerical values of parameters back into the circuit\n","def set_param_values(model, param_values):\n","    # Assign the averaged parameter values back to the circuit\n","    parameter_dict = {param: value for param, value in zip(model.neural_network.circuit.parameters, param_values)}\n","    model.neural_network.circuit.assign_parameters(parameter_dict)\n","\n","\n","# Manually average the numerical values of the parameters across clients\n","def manual_average_weights(epoch_weights):\n","    # Initialize a list to store the summed weights (initialize with zeros)\n","    num_weights = len(epoch_weights[0])  # Number of weights in the model\n","    num_clients = len(epoch_weights)  # Number of clients\n","\n","    # Initialize sum of weights to zero (assuming NumPy array or list of weights)\n","    summed_weights = np.zeros(num_weights)\n","\n","    # Sum the weights from all clients\n","    for client_weights in epoch_weights:\n","        summed_weights += np.array(client_weights)\n","\n","    # Compute the average by dividing the summed weights by the number of clients\n","    average_weights = summed_weights / num_clients\n","\n","    return average_weights\n","\n","def create_model_with_weights(weights):\n","    initial_params = np.random.rand(RealAmplitudes(num_features, reps=3).num_parameters)\n","    model = initialize_model(num_features,weights)\n","    #set_param_values(model, weights)  # Assign global weights to the model\n","    return model\n"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"MuhZZtnnzmV5"},"outputs":[],"source":["\n","# Function to save accuracies to CSV\n","def save_accuracies_to_csv(global_accuracies, clients_train_accuracies, clients_test_accuracies, filename='accuracies.csv'):\n","    with open(filename, mode='w', newline='') as file:\n","        writer = csv.writer(file)\n","\n","        # Write the header row\n","        header = ['Epoch', 'Global Accuracy']\n","        for i in range(len(clients_train_accuracies[0])):  # Assuming all clients have the same number of records\n","            header.append(f'Client {i} Train Accuracy')\n","            header.append(f'Client {i} Test Accuracy')\n","        writer.writerow(header)\n","\n","        # Write the accuracy data for each epoch\n","        for epoch in range(len(global_accuracies)):\n","            row = [epoch, global_accuracies[epoch]]  # Start with epoch and global accuracy\n","            for client_index in range(len(clients_train_accuracies[epoch])):\n","                row.append(clients_train_accuracies[epoch][client_index])  # Add train accuracy for client\n","                row.append(clients_test_accuracies[epoch][client_index])   # Add test accuracy for client\n","            writer.writerow(row)\n"]},{"cell_type":"code","source":["clients = split_dataset_for_epochs(num_clients, num_epochs, np_train_data, np_test_data, samples_per_epoch)\n","\n"],"metadata":{"id":"ez5A1HJ_DS5y"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","from collections import Counter\n","\n","\n","def plot_label_distribution(clients):\n","    plt.figure(figsize=(12, 6))\n","    for idx, client in enumerate(clients):\n","        labels = [sample['label'] for epoch in client.data for sample in epoch]\n","        label_counts = Counter(labels)\n","        labels_sorted = sorted(label_counts.keys())\n","        counts = [label_counts[label] for label in labels_sorted]\n","\n","        plt.bar(\n","            [str(label) + f\"_C{idx}\" for label in labels_sorted],\n","            counts,\n","            label=f'Client {idx}'\n","        )\n","\n","    plt.xlabel(\"Label per Client\")\n","    plt.ylabel(\"Frequency\")\n","    plt.title(\"Label Distribution per Client (Training Data)\")\n","    plt.xticks(rotation=90)\n","    plt.legend()\n","    plt.tight_layout()\n","    plt.show()\n","\n","plot_label_distribution(clients)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":607},"id":"3SPoEA6uDQmh","executionInfo":{"status":"ok","timestamp":1745618652968,"user_tz":-600,"elapsed":361,"user":{"displayName":"Shanika Nanayakkara","userId":"01896911983542550879"}},"outputId":"ed1e0f55-25af-43fb-9c29-f28d7c4b46c0"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1200x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","metadata":{"id":"tTt4DwZj7Is9"},"source":["Federated Learning Setup"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BmYmJR4_7Hux","outputId":"6b9466f4-f1ed-4541-8caf-423f82d7f840"},"outputs":[{"output_type":"stream","name":"stdout","text":["Client 1:\n","  Epoch 1: Train data samples: 50\n","  Epoch 2: Train data samples: 50\n","  Epoch 3: Train data samples: 50\n","  Epoch 4: Train data samples: 50\n","  Epoch 5: Train data samples: 50\n","  Epoch 6: Train data samples: 50\n","  Epoch 7: Train data samples: 50\n","  Epoch 8: Train data samples: 50\n","  Epoch 9: Train data samples: 50\n","  Epoch 10: Train data samples: 50\n","  Test data samples: 125\n","Client 2:\n","  Epoch 1: Train data samples: 50\n","  Epoch 2: Train data samples: 50\n","  Epoch 3: Train data samples: 50\n","  Epoch 4: Train data samples: 50\n","  Epoch 5: Train data samples: 50\n","  Epoch 6: Train data samples: 50\n","  Epoch 7: Train data samples: 50\n","  Epoch 8: Train data samples: 50\n","  Epoch 9: Train data samples: 50\n","  Epoch 10: Train data samples: 50\n","  Test data samples: 125\n","Client 3:\n","  Epoch 1: Train data samples: 50\n","  Epoch 2: Train data samples: 50\n","  Epoch 3: Train data samples: 50\n","  Epoch 4: Train data samples: 50\n","  Epoch 5: Train data samples: 50\n","  Epoch 6: Train data samples: 50\n","  Epoch 7: Train data samples: 50\n","  Epoch 8: Train data samples: 50\n","  Epoch 9: Train data samples: 50\n","  Epoch 10: Train data samples: 50\n","  Test data samples: 125\n","Client 4:\n","  Epoch 1: Train data samples: 50\n","  Epoch 2: Train data samples: 50\n","  Epoch 3: Train data samples: 50\n","  Epoch 4: Train data samples: 50\n","  Epoch 5: Train data samples: 50\n","  Epoch 6: Train data samples: 50\n","  Epoch 7: Train data samples: 50\n","  Epoch 8: Train data samples: 50\n","  Epoch 9: Train data samples: 50\n","  Epoch 10: Train data samples: 50\n","  Test data samples: 125\n","Client 5:\n","  Epoch 1: Train data samples: 50\n","  Epoch 2: Train data samples: 50\n","  Epoch 3: Train data samples: 50\n","  Epoch 4: Train data samples: 50\n","  Epoch 5: Train data samples: 50\n","  Epoch 6: Train data samples: 50\n","  Epoch 7: Train data samples: 50\n","  Epoch 8: Train data samples: 50\n","  Epoch 9: Train data samples: 50\n","  Epoch 10: Train data samples: 50\n","  Test data samples: 125\n","Client 6:\n","  Epoch 1: Train data samples: 50\n","  Epoch 2: Train data samples: 50\n","  Epoch 3: Train data samples: 50\n","  Epoch 4: Train data samples: 50\n","  Epoch 5: Train data samples: 50\n","  Epoch 6: Train data samples: 50\n","  Epoch 7: Train data samples: 50\n","  Epoch 8: Train data samples: 50\n","  Epoch 9: Train data samples: 50\n","  Epoch 10: Train data samples: 50\n","  Test data samples: 125\n","Client 7:\n","  Epoch 1: Train data samples: 50\n","  Epoch 2: Train data samples: 50\n","  Epoch 3: Train data samples: 50\n","  Epoch 4: Train data samples: 50\n","  Epoch 5: Train data samples: 50\n","  Epoch 6: Train data samples: 50\n","  Epoch 7: Train data samples: 50\n","  Epoch 8: Train data samples: 50\n","  Epoch 9: Train data samples: 50\n","  Epoch 10: Train data samples: 50\n","  Test data samples: 125\n","Client 8:\n","  Epoch 1: Train data samples: 50\n","  Epoch 2: Train data samples: 50\n","  Epoch 3: Train data samples: 50\n","  Epoch 4: Train data samples: 50\n","  Epoch 5: Train data samples: 50\n","  Epoch 6: Train data samples: 50\n","  Epoch 7: Train data samples: 50\n","  Epoch 8: Train data samples: 50\n","  Epoch 9: Train data samples: 50\n","  Epoch 10: Train data samples: 50\n","  Test data samples: 125\n","Client 1:\n","  Train data epochs: 10\n","  Test data samples: 125\n","  Number of features in a sequence: 5\n","Client 2:\n","  Train data epochs: 10\n","  Test data samples: 125\n","  Number of features in a sequence: 5\n","Client 3:\n","  Train data epochs: 10\n","  Test data samples: 125\n","  Number of features in a sequence: 5\n","Client 4:\n","  Train data epochs: 10\n","  Test data samples: 125\n","  Number of features in a sequence: 5\n","Client 5:\n","  Train data epochs: 10\n","  Test data samples: 125\n","  Number of features in a sequence: 5\n","Client 6:\n","  Train data epochs: 10\n","  Test data samples: 125\n","  Number of features in a sequence: 5\n","Client 7:\n","  Train data epochs: 10\n","  Test data samples: 125\n","  Number of features in a sequence: 5\n","Client 8:\n","  Train data epochs: 10\n","  Test data samples: 125\n","  Number of features in a sequence: 5\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:   0%|          | 0/10 [00:00<?, ?it/s]"]},{"output_type":"stream","name":"stdout","text":["\n","\n","Fed_Epoch: 0\n","\n","\n","Fed_Epoch 0, Client 1:\n","Training data for epoch 0: 50\n","Client Data Structure:\n","[{'sequence': array([0.36933551, 0.36933551, 0.36933551, 0.36933551, 0.36933551]), 'label': 0}, {'sequence': array([0.03646871, 0.03646871, 0.03646871, 0.03646871, 0.03646871]), 'label': 0}, {'sequence': array([0.25391079, 0.25391079, 0.25391079, 0.25391079, 0.25391079]), 'label': 0}, {'sequence': array([0.97814062, 0.97814062, 0.97814062, 0.97814062, 0.97814062]), 'label': 1}, {'sequence': array([0.80843709, 0.80843709, 0.80843709, 0.80843448, 0.80843637]), 'label': 1}, {'sequence': array([0.95808219, 0.95808219, 0.95808219, 0.95808219, 0.95808219]), 'label': 1}, {'sequence': array([0.36436835, 0.36436835, 0.36436835, 0.36436835, 0.36436835]), 'label': 0}, {'sequence': array([0.01469637, 0.01469637, 0.01469637, 0.01469637, 0.01469637]), 'label': 0}, {'sequence': array([0.44738387, 0.44738387, 0.44738387, 0.44738387, 0.44738387]), 'label': 0}, {'sequence': array([0.60766359, 0.60766359, 0.60766359, 0.60766359, 0.60766359]), 'label': 1}, {'sequence': array([0.23888924, 0.23888924, 0.23888924, 0.23888924, 0.23888924]), 'label': 0}, {'sequence': array([0.87471206, 0.87471206, 0.87471206, 0.87471206, 0.87471206]), 'label': 1}, {'sequence': array([0.13801275, 0.13801275, 0.13801275, 0.13801275, 0.13276679]), 'label': 0}, {'sequence': array([0.94278393, 0.94278393, 0.94278393, 0.94278393, 0.94278393]), 'label': 1}, {'sequence': array([0.08247197, 0.08247197, 0.08247197, 0.08247197, 0.08247197]), 'label': 0}, {'sequence': array([0.63083314, 0.63083314, 0.63083314, 0.63083314, 0.63083314]), 'label': 1}, {'sequence': array([0.03769089, 0.03769089, 0.03769089, 0.03769089, 0.03769089]), 'label': 0}, {'sequence': array([0.41672467, 0.41672467, 0.41672467, 0.41672467, 0.41672467]), 'label': 0}, {'sequence': array([0.50260258, 0.50260258, 0.50260229, 0.50260229, 0.50260229]), 'label': 0}, {'sequence': array([0.65123697, 0.52176973, 0.60216346, 0.65348124, 0.65348124]), 'label': 1}, {'sequence': array([0.62855495, 0.62855495, 0.62855495, 0.62855495, 0.62855495]), 'label': 1}, {'sequence': array([0.85025844, 0.85025844, 0.85025844, 0.85025844, 0.85025844]), 'label': 1}, {'sequence': array([0.82574937, 0.82574937, 0.82574937, 0.82574937, 0.82574937]), 'label': 1}, {'sequence': array([0.48467261, 0.48467261, 0.48467261, 0.48467261, 0.48467261]), 'label': 0}, {'sequence': array([0.90091961, 0.90091961, 0.90091961, 0.90091961, 0.90091961]), 'label': 1}, {'sequence': array([0.78596756, 0.78596756, 0.78596756, 0.78596756, 0.78596756]), 'label': 1}, {'sequence': array([0.86148081, 0.86148081, 0.86148081, 0.86148081, 0.86148081]), 'label': 1}, {'sequence': array([0.53982421, 0.53982421, 0.53982421, 0.53982421, 0.53982421]), 'label': 1}, {'sequence': array([0.07015272, 0.07015272, 0.07015272, 0.07015272, 0.07015272]), 'label': 0}, {'sequence': array([0.35879967, 0.35879967, 0.35879967, 0.35879967, 0.35879967]), 'label': 0}, {'sequence': array([0.04050691, 0.04050691, 0.04050691, 0.04050691, 0.04050691]), 'label': 0}, {'sequence': array([0.47915973, 0.47915973, 0.47915973, 0.47915973, 0.47915973]), 'label': 0}, {'sequence': array([0.36081334, 0.36081334, 0.36081334, 0.36081334, 0.36081334]), 'label': 0}, {'sequence': array([0.43131001, 0.43131001, 0.43131001, 0.43131001, 0.43131001]), 'label': 0}, {'sequence': array([0.50987075, 0.50987075, 0.50986843, 0.50986611, 0.50986648]), 'label': 0}, {'sequence': array([0.75075184, 0.75075184, 0.75075184, 0.75075184, 0.75075184]), 'label': 1}, {'sequence': array([0.87427621, 0.87427621, 0.87427621, 0.87427621, 0.87427621]), 'label': 1}, {'sequence': array([0.94576236, 0.94576236, 0.94576236, 0.94576236, 0.94576236]), 'label': 1}, {'sequence': array([0.63947554, 0.63947554, 0.63947554, 0.63947554, 0.63947554]), 'label': 1}, {'sequence': array([0.02140961, 0.02140961, 0.02140961, 0.02140961, 0.02140961]), 'label': 0}, {'sequence': array([0.17561566, 0.17561566, 0.17561566, 0.15980524, 0.15980524]), 'label': 0}, {'sequence': array([0.41944864, 0.41944864, 0.41944864, 0.41944864, 0.41944864]), 'label': 0}, {'sequence': array([0.43568107, 0.43568107, 0.43568107, 0.43568107, 0.43568107]), 'label': 0}, {'sequence': array([0.3456801, 0.3456801, 0.3456801, 0.3456801, 0.3456801]), 'label': 0}, {'sequence': array([0.36228171, 0.36228171, 0.36228171, 0.36228171, 0.36228171]), 'label': 0}, {'sequence': array([0.19182033, 0.19182033, 0.19182033, 0.19182033, 0.19182033]), 'label': 0}, {'sequence': array([0.1772829, 0.1772829, 0.1772829, 0.1772829, 0.1772829]), 'label': 0}, {'sequence': array([0.24254977, 0.24254977, 0.24254977, 0.24254977, 0.24254977]), 'label': 0}, {'sequence': array([0.44070541, 0.44070541, 0.44070541, 0.49967539, 0.49967539]), 'label': 0}, {'sequence': array([0.54191571, 0.54191571, 0.54191571, 0.54191571, 0.54191571]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.38710191 0.44960662 0.06411252 0.72860865 0.39257293 0.52844551\n"," 0.55278475 0.81904134 0.76042174 1.00197933 0.15221129 0.08803977\n"," 0.36232785 0.83853782 0.55163098 0.34075611 0.68968222 0.71032147\n"," 0.71871643 0.61774572]\n","Iteration 1 - Learning Rate: 0.164082\n","Iteration 1 - Training Accuracy: 72.00%\n","Iteration 1 - Test Accuracy: 76.80%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 4.03197764e-01  5.79593795e-01 -1.55854427e-02  8.83653386e-01\n","  2.85380346e-01  5.44762115e-01  5.46446278e-01  8.35087828e-01\n","  7.08824336e-01  8.95585395e-01  1.20533016e-01 -1.98344717e-06\n","  3.69941830e-01  8.65180595e-01  4.93832116e-01  3.03289929e-01\n","  5.77684621e-01  5.72031612e-01  6.27022666e-01  6.27372811e-01]\n","Iteration 2 - Learning Rate: 0.194085\n","Iteration 2 - Training Accuracy: 64.00%\n","Iteration 2 - Test Accuracy: 53.60%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [0.34054607 0.65436604 0.00889188 0.9448434  0.26781987 0.5593085\n"," 0.55283356 0.88596178 0.65466735 0.79773453 0.09222888 0.02905697\n"," 0.33540879 0.8188763  0.58792418 0.36890263 0.41949043 0.48241384\n"," 0.56364804 0.72196862]\n","Iteration 3 - Learning Rate: 0.238255\n","Iteration 3 - Training Accuracy: 66.00%\n","Iteration 3 - Test Accuracy: 54.40%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.29280205  0.64271794 -0.11477376  1.07489417  0.23530833  0.67363571\n","  0.44304042  0.95854574  0.62195729  0.74049925  0.17807315  0.00860669\n","  0.31857004  0.76772104  0.56181282  0.32704504  0.20813513  0.34002774\n","  0.53458443  0.63681829]\n","Iteration 4 - Learning Rate: 0.290448\n","Iteration 4 - Training Accuracy: 74.00%\n","Iteration 4 - Test Accuracy: 62.40%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.32183533  0.75761761 -0.21456325  1.28915824  0.11772843  0.72531187\n","  0.39292346  0.87886609  0.63708415  0.61565681  0.149438    0.03165393\n","  0.35333572  0.75104928  0.57196419  0.38446272  0.14514342  0.26399959\n","  0.42257514  0.59799228]\n","Iteration 5 - Learning Rate: 0.337279\n","Iteration 5 - Training Accuracy: 76.00%\n","Iteration 5 - Test Accuracy: 61.60%\n","\n","\n","Fed_Epoch 0, Client 2:\n","Training data for epoch 0: 50\n","Client Data Structure:\n","[{'sequence': array([0.2610114, 0.2610114, 0.2610114, 0.2610114, 0.2610114]), 'label': 0}, {'sequence': array([0.43198067, 0.43198067, 0.43198067, 0.43198067, 0.43198067]), 'label': 0}, {'sequence': array([0.02447203, 0.02447203, 0.02447203, 0.02447203, 0.02447203]), 'label': 0}, {'sequence': array([0.77097565, 0.77097565, 0.77097565, 0.77097565, 0.77097565]), 'label': 1}, {'sequence': array([0.76691506, 0.76691506, 0.76691498, 0.76691498, 0.76691498]), 'label': 1}, {'sequence': array([0.51837749, 0.51837749, 0.51837749, 0.51837749, 0.51837749]), 'label': 1}, {'sequence': array([0.88862471, 0.88862471, 0.88862471, 0.88862471, 0.88862471]), 'label': 1}, {'sequence': array([0.0520994, 0.0520994, 0.0520994, 0.0520994, 0.0520994]), 'label': 0}, {'sequence': array([0.68030488, 0.68030488, 0.68030488, 0.68030488, 0.68030488]), 'label': 1}, {'sequence': array([0.93731751, 0.93731751, 0.93731751, 0.93731751, 0.93731751]), 'label': 1}, {'sequence': array([0.9711132, 0.9711132, 0.9711132, 0.9711132, 0.9711132]), 'label': 1}, {'sequence': array([0.55508289, 0.55508289, 0.55508289, 0.55508289, 0.55508289]), 'label': 1}, {'sequence': array([0.90394413, 0.90394413, 0.90394413, 0.90394413, 0.90394413]), 'label': 1}, {'sequence': array([0.02937962, 0.02937962, 0.02937962, 0.02937962, 0.02937962]), 'label': 0}, {'sequence': array([0.79014947, 0.79014947, 0.79014947, 0.79014947, 0.79014947]), 'label': 1}, {'sequence': array([0.16051156, 0.16051156, 0.16051156, 0.16051156, 0.16051156]), 'label': 0}, {'sequence': array([0.59059105, 0.59059105, 0.59059105, 0.59059105, 0.59059105]), 'label': 1}, {'sequence': array([0.84799888, 0.84799888, 0.84799888, 0.84799888, 0.84799888]), 'label': 1}, {'sequence': array([0.51120578, 0.51120578, 0.51120578, 0.51120578, 0.51120578]), 'label': 0}, {'sequence': array([0.9644188, 0.9644188, 0.9644188, 0.9644188, 0.9644188]), 'label': 1}, {'sequence': array([0.27327681, 0.27327681, 0.27327681, 0.27327681, 0.27327681]), 'label': 0}, {'sequence': array([0.74775921, 0.74775921, 0.74775921, 0.74775921, 0.74775921]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.84439537, 0.84439537, 0.84439537, 0.8443953 , 0.8443953 ]), 'label': 1}, {'sequence': array([0.01814101, 0.01814101, 0.01814101, 0.01814101, 0.01814101]), 'label': 0}, {'sequence': array([0.17627973, 0.17627973, 0.17627973, 0.17627973, 0.17627973]), 'label': 0}, {'sequence': array([0.11867637, 0.11867637, 0.11867637, 0.11867637, 0.11867637]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.54234453, 0.54234453, 0.54234453, 0.54234453, 0.54234453]), 'label': 1}, {'sequence': array([0.2950277, 0.2950277, 0.2950277, 0.2950277, 0.2950277]), 'label': 0}, {'sequence': array([0.51638752, 0.51638752, 0.51638752, 0.51638752, 0.51638752]), 'label': 1}, {'sequence': array([0.74584621, 0.74584621, 0.74584606, 0.74584606, 0.74584606]), 'label': 1}, {'sequence': array([0.42408372, 0.42408372, 0.42408372, 0.42408372, 0.42408372]), 'label': 0}, {'sequence': array([0.22430672, 0.22430672, 0.22430672, 0.22430672, 0.22430672]), 'label': 0}, {'sequence': array([0.99786821, 0.99786821, 0.99786821, 0.99786821, 0.99786821]), 'label': 1}, {'sequence': array([0.66146835, 0.66146835, 0.66146835, 0.66146835, 0.66146835]), 'label': 1}, {'sequence': array([0.03115332, 0.03115332, 0.03115332, 0.03115332, 0.03115332]), 'label': 0}, {'sequence': array([0.90193213, 0.90193213, 0.90193213, 0.90193213, 0.90193213]), 'label': 1}, {'sequence': array([0.69382421, 0.69382421, 0.69382421, 0.69382421, 0.69382421]), 'label': 1}, {'sequence': array([0.95991815, 0.95991815, 0.95991815, 0.95991815, 0.95991815]), 'label': 1}, {'sequence': array([0.29497204, 0.29497204, 0.29497204, 0.29497204, 0.29497204]), 'label': 0}, {'sequence': array([0.22979626, 0.22979626, 0.22979626, 0.22979626, 0.22979626]), 'label': 0}, {'sequence': array([0.11121034, 0.11121034, 0.11121034, 0.11121034, 0.11121034]), 'label': 0}, {'sequence': array([0.60286979, 0.60286979, 0.60286979, 0.60286979, 0.60286979]), 'label': 1}, {'sequence': array([0.58897859, 0.58897859, 0.58897859, 0.58897859, 0.58897859]), 'label': 1}, {'sequence': array([0.80361495, 0.80361495, 0.80361495, 0.80361495, 0.80361495]), 'label': 1}, {'sequence': array([0.73041388, 0.73041388, 0.73041388, 0.73041388, 0.73041388]), 'label': 1}, {'sequence': array([0.37203216, 0.37203216, 0.37203216, 0.37203216, 0.37203216]), 'label': 0}, {'sequence': array([0.79937949, 0.79937949, 0.79937949, 0.79937949, 0.79937949]), 'label': 1}, {'sequence': array([0.50806248, 0.50806248, 0.50806248, 0.50806248, 0.50806248]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.42831777 0.51587376 0.56373213 0.26158268 0.18633163 0.39192906\n"," 0.7577438  0.44753989 0.93356282 0.65070508 0.88082426 0.16974215\n"," 0.29295349 0.19225107 0.79060136 0.43431984 0.11777237 0.73863342\n"," 0.49168076 0.69231631]\n","Iteration 1 - Learning Rate: 0.199064\n","Iteration 1 - Training Accuracy: 58.00%\n","Iteration 1 - Test Accuracy: 44.00%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [0.36160652 0.54873745 0.48875363 0.31239893 0.15835608 0.44085171\n"," 0.69580273 0.5166012  0.97713937 0.6492454  0.85284234 0.20662683\n"," 0.36026245 0.10795583 0.92826348 0.44642998 0.2265894  0.68678478\n"," 0.48582811 0.70750306]\n","Iteration 2 - Learning Rate: 0.244465\n","Iteration 2 - Training Accuracy: 60.00%\n","Iteration 2 - Test Accuracy: 47.20%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [0.38246591 0.46801535 0.39389782 0.35803671 0.06879509 0.35237093\n"," 0.64380576 0.60254469 0.94851809 0.63528468 0.90515402 0.20117168\n"," 0.40978126 0.13704403 1.02200341 0.39235916 0.22668676 0.58432857\n"," 0.44749326 0.67173982]\n","Iteration 3 - Learning Rate: 0.286779\n","Iteration 3 - Training Accuracy: 66.00%\n","Iteration 3 - Test Accuracy: 50.40%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.23929453  0.40094682  0.37917336  0.43599535 -0.035542    0.29961865\n","  0.69195621  0.69004907  0.88235251  0.61644954  0.88994896  0.24772974\n","  0.53445545  0.12743512  1.19494964  0.40991718  0.15192947  0.61168896\n","  0.36799585  0.73048906]\n","Iteration 4 - Learning Rate: 0.327149\n","Iteration 4 - Training Accuracy: 66.00%\n","Iteration 4 - Test Accuracy: 50.40%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.17514733  0.3700312   0.32085518  0.51592923 -0.12231168  0.23773543\n","  0.69802701  0.78523785  0.82161823  0.5889929   0.91761909  0.24692869\n","  0.58018316  0.09062813  1.2266462   0.38132694  0.10404486  0.61821223\n","  0.30685845  0.75851418]\n","Iteration 5 - Learning Rate: 0.366238\n","Iteration 5 - Training Accuracy: 66.00%\n","Iteration 5 - Test Accuracy: 51.20%\n","\n","\n","Fed_Epoch 0, Client 3:\n","Training data for epoch 0: 50\n","Client Data Structure:\n","[{'sequence': array([0.4564227, 0.4564227, 0.4564227, 0.4564227, 0.4564227]), 'label': 0}, {'sequence': array([0.59394604, 0.59394604, 0.59394604, 0.59394604, 0.59394604]), 'label': 1}, {'sequence': array([0.3911646, 0.3911646, 0.3911646, 0.3911646, 0.3911646]), 'label': 0}, {'sequence': array([0.4671998, 0.4671998, 0.4671998, 0.4671998, 0.4671998]), 'label': 0}, {'sequence': array([0.38472443, 0.38472443, 0.38472443, 0.38472443, 0.38472443]), 'label': 0}, {'sequence': array([0.25441477, 0.25441477, 0.25441477, 0.25441477, 0.25441477]), 'label': 0}, {'sequence': array([0.82814997, 0.82814997, 0.82814997, 0.82814997, 0.82814997]), 'label': 1}, {'sequence': array([0.40294617, 0.40294617, 0.40294617, 0.40294617, 0.40294617]), 'label': 0}, {'sequence': array([0.01175114, 0.01175114, 0.01175114, 0.01175114, 0.01175114]), 'label': 0}, {'sequence': array([0.61862078, 0.61862078, 0.61862078, 0.61862078, 0.61862078]), 'label': 1}, {'sequence': array([0.65422054, 0.65422054, 0.65422054, 0.65422054, 0.65422054]), 'label': 1}, {'sequence': array([0.33303284, 0.33303284, 0.33303284, 0.33303284, 0.33303284]), 'label': 0}, {'sequence': array([0.7789829 , 0.5739545 , 0.5739545 , 0.77897877, 0.77897768]), 'label': 1}, {'sequence': array([0.4906683, 0.4906683, 0.4906683, 0.4906683, 0.4906683]), 'label': 0}, {'sequence': array([0.68922334, 0.68922334, 0.68922334, 0.68922334, 0.68922334]), 'label': 1}, {'sequence': array([0.83672773, 0.83672773, 0.83672773, 0.83672773, 0.83672773]), 'label': 1}, {'sequence': array([0.93322083, 0.93322083, 0.93322083, 0.93322083, 0.93322083]), 'label': 1}, {'sequence': array([0.56498829, 0.56498829, 0.56498829, 0.56498829, 0.56498829]), 'label': 1}, {'sequence': array([0.97593526, 0.97593526, 0.97593526, 0.97593526, 0.97593526]), 'label': 1}, {'sequence': array([0.89382073, 0.89382073, 0.89382073, 0.89382073, 0.89382073]), 'label': 1}, {'sequence': array([0.76498322, 0.76498322, 0.76498322, 0.76498322, 0.76498322]), 'label': 1}, {'sequence': array([0.69675277, 0.69675241, 0.69675219, 0.69675169, 0.69675147]), 'label': 1}, {'sequence': array([0.0952886, 0.0952886, 0.0952886, 0.0952886, 0.0952886]), 'label': 0}, {'sequence': array([0.09606595, 0.09606595, 0.09606595, 0.09606595, 0.09606595]), 'label': 0}, {'sequence': array([0.40485163, 0.40485163, 0.40485163, 0.40485163, 0.40485163]), 'label': 0}, {'sequence': array([0.46402599, 0.46402599, 0.46402599, 0.46402599, 0.46402599]), 'label': 0}, {'sequence': array([0.88005695, 0.88005695, 0.88005695, 0.88005695, 0.88005695]), 'label': 1}, {'sequence': array([0.9904985, 0.9904985, 0.9904985, 0.9904985, 0.9904985]), 'label': 1}, {'sequence': array([0.9271452, 0.9271452, 0.9271452, 0.9271452, 0.9271452]), 'label': 1}, {'sequence': array([0.94573446, 0.94573446, 0.94573446, 0.94573446, 0.94573446]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.64662008, 0.64662008, 0.64662008, 0.64662008, 0.64662008]), 'label': 1}, {'sequence': array([0.49047335, 0.49047335, 0.49047335, 0.49047335, 0.49047335]), 'label': 0}, {'sequence': array([0.55668107, 0.55668107, 0.55668107, 0.55668107, 0.55668107]), 'label': 1}, {'sequence': array([0.94097385, 0.94097385, 0.94097385, 0.94097385, 0.94097385]), 'label': 1}, {'sequence': array([0.52050566, 0.52050566, 0.52050566, 0.52050566, 0.52050566]), 'label': 1}, {'sequence': array([0.88163643, 0.88163643, 0.88163643, 0.88163643, 0.88163643]), 'label': 1}, {'sequence': array([0.29580446, 0.29580446, 0.29580446, 0.29580446, 0.29580446]), 'label': 0}, {'sequence': array([0.98792592, 0.98792592, 0.98792592, 0.98792592, 0.98792592]), 'label': 1}, {'sequence': array([0.49445147, 0.49445147, 0.49445147, 0.49445147, 0.49445147]), 'label': 0}, {'sequence': array([0.77902573, 0.77104718, 0.77902508, 0.77902508, 0.63944742]), 'label': 1}, {'sequence': array([0.50821344, 0.50821344, 0.50821344, 0.50821344, 0.50821344]), 'label': 0}, {'sequence': array([0.1417883, 0.1417883, 0.1417883, 0.1417883, 0.1417883]), 'label': 0}, {'sequence': array([0.41534283, 0.41534283, 0.41534283, 0.41534283, 0.41534283]), 'label': 0}, {'sequence': array([0.17327492, 0.17327492, 0.17327492, 0.17327492, 0.17327492]), 'label': 0}, {'sequence': array([0.49199717, 0.49199717, 0.49199717, 0.49199717, 0.49199717]), 'label': 0}, {'sequence': array([0.35698335, 0.35698335, 0.35698335, 0.35698335, 0.35698335]), 'label': 0}, {'sequence': array([0.38045338, 0.38045338, 0.38045338, 0.38045338, 0.38045338]), 'label': 0}, {'sequence': array([0.8912312, 0.8912312, 0.8912312, 0.8912312, 0.8912312]), 'label': 1}, {'sequence': array([0.75138764, 0.75138764, 0.75138764, 0.75138764, 0.75138764]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.90158644  0.875161    0.15153275  0.23871034  0.38341422  0.18945737\n"," -0.01961329  0.9769839   0.9111057   0.31602032  0.88140039  0.12202264\n","  0.41949212  0.66872822  0.52068915  0.79098812  0.88589063 -0.0552994\n","  0.9067046   0.52141324]\n","Iteration 1 - Learning Rate: 0.185967\n","Iteration 1 - Training Accuracy: 58.00%\n","Iteration 1 - Test Accuracy: 51.20%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.91925714  0.92066165  0.06151709  0.23928527  0.31389023  0.13583078\n"," -0.02406544  0.97468324  0.9766992   0.25729832  0.87237508  0.09685332\n","  0.37072732  0.66429136  0.48385694  0.82603366  0.8904564  -0.11909167\n","  0.92324183  0.65193345]\n","Iteration 2 - Learning Rate: 0.222701\n","Iteration 2 - Training Accuracy: 60.00%\n","Iteration 2 - Test Accuracy: 59.20%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.94341721  0.87542415 -0.02884696  0.20546521  0.32467081  0.15892825\n"," -0.07185201  0.96280756  0.95152252  0.29720221  0.91877609  0.11151939\n","  0.35139563  0.66411327  0.53352952  0.79989484  0.79857067 -0.17272849\n","  0.9405234   0.764905  ]\n","Iteration 3 - Learning Rate: 0.252456\n","Iteration 3 - Training Accuracy: 68.00%\n","Iteration 3 - Test Accuracy: 63.20%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.96176041  0.85974553 -0.14815148  0.27091379  0.27372169  0.14954314\n"," -0.16814697  0.95656222  0.99818659  0.25801946  0.99278795  0.14968756\n","  0.36030424  0.70292386  0.51757285  0.82150582  0.77146044 -0.19127173\n","  0.90537667  0.90515334]\n","Iteration 4 - Learning Rate: 0.285985\n","Iteration 4 - Training Accuracy: 70.00%\n","Iteration 4 - Test Accuracy: 68.80%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.9653477   0.86756602 -0.23076868  0.26281875  0.23665762  0.18199888\n"," -0.16293844  0.94458153  1.01441811  0.27482758  0.9721586   0.13720041\n","  0.37478124  0.67956109  0.54710372  0.85013873  0.77014075 -0.2146057\n","  0.88520793  0.92629348]\n","Iteration 5 - Learning Rate: 0.313540\n","Iteration 5 - Training Accuracy: 72.00%\n","Iteration 5 - Test Accuracy: 76.80%\n","\n","\n","Fed_Epoch 0, Client 4:\n","Training data for epoch 0: 50\n","Client Data Structure:\n","[{'sequence': array([0.39568786, 0.39568786, 0.39568786, 0.39568786, 0.39568786]), 'label': 0}, {'sequence': array([0.00960934, 0.00960934, 0.00960934, 0.00960934, 0.00960934]), 'label': 0}, {'sequence': array([0.79860939, 0.79860939, 0.79860939, 0.79860939, 0.79860939]), 'label': 1}, {'sequence': array([0.03319858, 0.03319858, 0.03319858, 0.03319858, 0.03319858]), 'label': 0}, {'sequence': array([0.69186317, 0.9510797 , 0.95107963, 0.95107963, 0.95107963]), 'label': 1}, {'sequence': array([0.74489304, 0.74489304, 0.74489304, 0.74489304, 0.74489304]), 'label': 1}, {'sequence': array([0.06397678, 0.06397678, 0.06397678, 0.06397678, 0.06397678]), 'label': 0}, {'sequence': array([0.06975701, 0.06975556, 0.06975556, 0.06975556, 0.06975556]), 'label': 0}, {'sequence': array([0.49901799, 0.49901799, 0.49901799, 0.49901799, 0.49901799]), 'label': 0}, {'sequence': array([0.72424961, 0.72424961, 0.72424961, 0.72424961, 0.72424961]), 'label': 1}, {'sequence': array([0.91611836, 0.91611836, 0.91611836, 0.91611836, 0.91611836]), 'label': 1}, {'sequence': array([0.13350724, 0.13350724, 0.13350724, 0.13350724, 0.13350724]), 'label': 0}, {'sequence': array([0.51868405, 0.51868405, 0.51868405, 0.51868405, 0.51868405]), 'label': 1}, {'sequence': array([0.54541565, 0.54541565, 0.54541565, 0.54541565, 0.54541565]), 'label': 1}, {'sequence': array([0.93234065, 0.93234065, 0.93234065, 0.93234065, 0.93234065]), 'label': 1}, {'sequence': array([0.73438917, 0.73438917, 0.73438917, 0.73438917, 0.73438917]), 'label': 1}, {'sequence': array([0.81741867, 0.81741867, 0.81741867, 0.81741867, 0.81741867]), 'label': 1}, {'sequence': array([0.19613842, 0.19613842, 0.19613842, 0.19613842, 0.19613842]), 'label': 0}, {'sequence': array([0.11507605, 0.11507605, 0.11507605, 0.11507605, 0.11507605]), 'label': 0}, {'sequence': array([0.16345367, 0.16345367, 0.16345367, 0.16345367, 0.16345367]), 'label': 0}, {'sequence': array([0.03279266, 0.03279266, 0.03279266, 0.03279266, 0.03279266]), 'label': 0}, {'sequence': array([0.96435009, 0.96435009, 0.96435009, 0.96435009, 0.96435009]), 'label': 1}, {'sequence': array([0.16587173, 0.16587173, 0.16587173, 0.16587173, 0.16587173]), 'label': 0}, {'sequence': array([0.80042324, 0.5257356 , 0.65812473, 0.80041875, 0.80041875]), 'label': 1}, {'sequence': array([0.08756138, 0.08756138, 0.08756138, 0.08756138, 0.08756138]), 'label': 0}, {'sequence': array([0.1515818, 0.1515818, 0.1515818, 0.1515818, 0.1515818]), 'label': 0}, {'sequence': array([0.98187667, 0.98187667, 0.98187667, 0.98187667, 0.98187667]), 'label': 1}, {'sequence': array([0.06324125, 0.06324125, 0.06324125, 0.06324125, 0.06324125]), 'label': 0}, {'sequence': array([0.33525957, 0.33525957, 0.33525957, 0.33525957, 0.33525957]), 'label': 0}, {'sequence': array([0.68543234, 0.68543234, 0.68543234, 0.68543234, 0.68543227]), 'label': 1}, {'sequence': array([0.31145646, 0.31145646, 0.31145646, 0.31145646, 0.31145646]), 'label': 0}, {'sequence': array([0.73523674, 0.73523674, 0.73523674, 0.73523674, 0.73523674]), 'label': 1}, {'sequence': array([0.1360675, 0.1360675, 0.1360675, 0.1360675, 0.1360675]), 'label': 0}, {'sequence': array([0.20474937, 0.32676508, 0.20474372, 0.32676124, 0.20473807]), 'label': 0}, {'sequence': array([0.39080013, 0.39079897, 0.15958354, 0.28066195, 0.39079325]), 'label': 0}, {'sequence': array([0.72512806, 0.72512806, 0.72512806, 0.72512806, 0.72512806]), 'label': 1}, {'sequence': array([0.82149934, 0.82149934, 0.82149934, 0.82149934, 0.82149934]), 'label': 1}, {'sequence': array([0.29453481, 0.29453481, 0.29453481, 0.29453481, 0.29453481]), 'label': 0}, {'sequence': array([0.11716465, 0.11716465, 0.11716465, 0.11716465, 0.11716465]), 'label': 0}, {'sequence': array([0.68842845, 0.68842845, 0.68842845, 0.68842845, 0.68842845]), 'label': 1}, {'sequence': array([0.76756891, 0.76756891, 0.76756891, 0.76756891, 0.76756891]), 'label': 1}, {'sequence': array([0.31057903, 0.31057903, 0.31057903, 0.31057903, 0.31057903]), 'label': 0}, {'sequence': array([0.70092505, 0.70092505, 0.70092505, 0.70092505, 0.70092505]), 'label': 1}, {'sequence': array([0.02544071, 0.02544071, 0.02544071, 0.02544071, 0.02544071]), 'label': 0}, {'sequence': array([0.28376938, 0.28376938, 0.28376938, 0.28376938, 0.28376938]), 'label': 0}, {'sequence': array([0.73564991, 0.73564991, 0.73564991, 0.73564991, 0.73564991]), 'label': 1}, {'sequence': array([0.94252303, 0.94252303, 0.94252303, 0.94252303, 0.94252303]), 'label': 1}, {'sequence': array([0.10787818, 0.10787818, 0.10787818, 0.10787818, 0.10787818]), 'label': 0}, {'sequence': array([0.72738639, 0.72738639, 0.72738639, 0.72738639, 0.72738639]), 'label': 1}, {'sequence': array([0.74650296, 0.74650296, 0.74650296, 0.74650296, 0.74650296]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.26328058 -0.02994982  1.0531554   0.78029     0.81031094  0.15714684\n","  0.09292674  0.18748191  0.57318549  0.51249996  0.18163701  0.27388892\n","  0.22313784  0.60264672  0.28327604  0.59405937  0.60525215  0.87916306\n","  1.09483571  0.08156304]\n","Iteration 1 - Learning Rate: 0.196570\n","Iteration 1 - Training Accuracy: 60.00%\n","Iteration 1 - Test Accuracy: 74.40%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.14688384 -0.09728831  1.0068936   0.75880749  0.74303576  0.24447683\n","  0.00472281  0.14639455  0.76672267  0.59564112  0.20352219  0.40936326\n","  0.28921809  0.6177012   0.28104267  0.67485921  0.51771304  0.94121539\n","  1.24069354  0.06151267]\n","Iteration 2 - Learning Rate: 0.252839\n","Iteration 2 - Training Accuracy: 72.00%\n","Iteration 2 - Test Accuracy: 74.40%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.11254216 -0.14761896  1.01798575  0.78952801  0.76611644  0.20480966\n"," -0.13450024  0.03548316  0.88905758  0.62804475  0.26590456  0.40864341\n","  0.24640905  0.47362953  0.15907156  0.7004526   0.5134614   0.90451357\n","  1.37399182 -0.06327922]\n","Iteration 3 - Learning Rate: 0.306071\n","Iteration 3 - Training Accuracy: 80.00%\n","Iteration 3 - Test Accuracy: 80.00%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.13582134 -0.17113694  0.99935565  0.84227483  0.67789829  0.23861672\n"," -0.16211406  0.07504527  0.9630871   0.77400906  0.38033567  0.4812644\n","  0.32109223  0.40916521  0.15836308  0.63423495  0.47206113  0.93415122\n","  1.40499697 -0.20953809]\n","Iteration 4 - Learning Rate: 0.352667\n","Iteration 4 - Training Accuracy: 92.00%\n","Iteration 4 - Test Accuracy: 82.40%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.11807872 -0.24817664  1.03820014  0.89979423  0.61449155  0.26851689\n"," -0.19943915  0.08934855  0.92049975  0.79370138  0.40162124  0.49907969\n","  0.33646456  0.33619728  0.13097018  0.68350219  0.51034854  0.90063598\n","  1.41030535 -0.23495144]\n","Iteration 5 - Learning Rate: 0.387246\n","Iteration 5 - Training Accuracy: 92.00%\n","Iteration 5 - Test Accuracy: 81.60%\n","\n","\n","Fed_Epoch 0, Client 5:\n","Training data for epoch 0: 50\n","Client Data Structure:\n","[{'sequence': array([0.73808681, 0.73808681, 0.73808681, 0.73808681, 0.73808681]), 'label': 1}, {'sequence': array([0.48609757, 0.48609757, 0.48609757, 0.48609757, 0.48609757]), 'label': 0}, {'sequence': array([0.20591517, 0.20591517, 0.20591517, 0.20591517, 0.20591517]), 'label': 0}, {'sequence': array([0.14012765, 0.14012765, 0.14012765, 0.14012765, 0.14012765]), 'label': 0}, {'sequence': array([0.91914744, 0.91914744, 0.91914744, 0.91914744, 0.91914744]), 'label': 1}, {'sequence': array([0.13316952, 0.13316952, 0.13316952, 0.13316952, 0.13316952]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.80135177, 0.80135177, 0.80135177, 0.80135177, 0.80135177]), 'label': 1}, {'sequence': array([0.04621807, 0.04621807, 0.04621807, 0.04621807, 0.04621807]), 'label': 0}, {'sequence': array([0.40047912, 0.40047912, 0.40047912, 0.40047912, 0.40047912]), 'label': 0}, {'sequence': array([0.14669298, 0.14669298, 0.14669298, 0.14669298, 0.14669298]), 'label': 0}, {'sequence': array([0.5022671, 0.5022671, 0.5022671, 0.5022671, 0.5022671]), 'label': 0}, {'sequence': array([0.55298763, 0.55298763, 0.55298763, 0.55298763, 0.55298763]), 'label': 1}, {'sequence': array([0.00687812, 0.00687812, 0.00687812, 0.00687812, 0.00687812]), 'label': 0}, {'sequence': array([0.58179993, 0.58179993, 0.58179993, 0.58179993, 0.58179993]), 'label': 1}, {'sequence': array([0.80295741, 0.80295741, 0.80295741, 0.55730513, 0.80295683]), 'label': 1}, {'sequence': array([0.02102978, 0.02102978, 0.02102978, 0.02102978, 0.02102978]), 'label': 0}, {'sequence': array([0.52607601, 0.52607601, 0.52607601, 0.52607601, 0.52607601]), 'label': 1}, {'sequence': array([0.55977596, 0.55977596, 0.55977596, 0.55977596, 0.55977596]), 'label': 1}, {'sequence': array([0.07551615, 0.07551615, 0.07551615, 0.07551615, 0.07551615]), 'label': 0}, {'sequence': array([0.25428888, 0.25428888, 0.25428888, 0.25428888, 0.25428888]), 'label': 0}, {'sequence': array([0.7767429, 0.7767429, 0.7767429, 0.7767429, 0.7767429]), 'label': 1}, {'sequence': array([0.79130672, 0.79130672, 0.79130672, 0.79130672, 0.79130672]), 'label': 1}, {'sequence': array([0.00892092, 0.00892092, 0.00892092, 0.00892092, 0.00892092]), 'label': 0}, {'sequence': array([0.81026943, 0.81026943, 0.81026943, 0.81026943, 0.81026943]), 'label': 1}, {'sequence': array([0.40843115, 0.40843115, 0.40843115, 0.40843115, 0.40843115]), 'label': 0}, {'sequence': array([0.49326559, 0.49326559, 0.49326559, 0.49326559, 0.49326559]), 'label': 0}, {'sequence': array([0.14368949, 0.14368949, 0.14368949, 0.14368949, 0.14368949]), 'label': 0}, {'sequence': array([0.89148768, 0.89148768, 0.89148768, 0.89148768, 0.89148768]), 'label': 1}, {'sequence': array([0.98928769, 0.98928769, 0.98928769, 0.98928769, 0.98928769]), 'label': 1}, {'sequence': array([0.29676031, 0.29676031, 0.29676031, 0.29676031, 0.29676031]), 'label': 0}, {'sequence': array([0.42730942, 0.42730942, 0.42730942, 0.42730942, 0.42730942]), 'label': 0}, {'sequence': array([0.91964968, 0.91964968, 0.91964968, 0.91964968, 0.91964968]), 'label': 1}, {'sequence': array([0.18078052, 0.18078052, 0.18078052, 0.18078052, 0.18078052]), 'label': 0}, {'sequence': array([0.99873143, 0.99873143, 0.99873143, 0.99873143, 0.99873143]), 'label': 1}, {'sequence': array([0.57867308, 0.57867308, 0.57867308, 0.57867308, 0.57867308]), 'label': 1}, {'sequence': array([0.2060865 , 0.2060865 , 0.20608636, 0.20608636, 0.11185825]), 'label': 0}, {'sequence': array([0.98707777, 0.98707777, 0.98707777, 0.98707777, 0.98707777]), 'label': 1}, {'sequence': array([0.98266953, 0.98266953, 0.98266953, 0.98266953, 0.98266953]), 'label': 1}, {'sequence': array([0.34991332, 0.34991332, 0.34991332, 0.34991332, 0.34991332]), 'label': 0}, {'sequence': array([0.15556933, 0.15556933, 0.15556933, 0.15556933, 0.15556933]), 'label': 0}, {'sequence': array([0.99312949, 0.99312949, 0.99312949, 0.99312949, 0.99312949]), 'label': 1}, {'sequence': array([0.35630711, 0.35630711, 0.35630711, 0.35630711, 0.35630711]), 'label': 0}, {'sequence': array([0.09984186, 0.09984186, 0.09984186, 0.09984186, 0.09984186]), 'label': 0}, {'sequence': array([0.99495885, 0.99495885, 0.99495885, 0.99495885, 0.99495885]), 'label': 1}, {'sequence': array([0.63641551, 0.63641551, 0.63641551, 0.63641551, 0.63641551]), 'label': 1}, {'sequence': array([0.59366187, 0.59366187, 0.59366187, 0.59366187, 0.59366187]), 'label': 1}, {'sequence': array([0.32101377, 0.32101377, 0.32101377, 0.32101377, 0.32101377]), 'label': 0}, {'sequence': array([0.88763002, 0.88763002, 0.88763002, 0.88763002, 0.88763002]), 'label': 1}, {'sequence': array([0.39193513, 0.39193513, 0.39193513, 0.39193513, 0.39193513]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.49122524  0.31498553  0.0968875   0.70303047  0.65826095  0.11081678\n","  0.28473865  0.75856428  0.06505495  0.87707019  0.82306957  0.35586662\n","  0.84062572  0.04104582  0.04198692  0.89209607  0.89424385  1.17490126\n"," -0.03501668  0.80294769]\n","Iteration 1 - Learning Rate: 0.191241\n","Iteration 1 - Training Accuracy: 58.00%\n","Iteration 1 - Test Accuracy: 48.00%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.4979463   0.20575622  0.05748598  0.65366813  0.58950431  0.23752347\n","  0.14807045  0.93006834  0.07348883  0.8606974   0.86400106  0.21763963\n","  0.84150526  0.08542558  0.02794773  0.90532489  1.01345616  1.36945454\n"," -0.07581185  1.0245139 ]\n","Iteration 2 - Learning Rate: 0.250573\n","Iteration 2 - Training Accuracy: 78.00%\n","Iteration 2 - Test Accuracy: 66.40%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.47285105  0.16134557 -0.08516315  0.60345602  0.6203409   0.30240796\n","  0.08902436  1.02592705  0.11778177  0.82310771  0.97591072  0.15623675\n","  0.80823452  0.11011136  0.05149002  0.99432387  0.99726952  1.38658691\n"," -0.00427711  1.25447396]\n","Iteration 3 - Learning Rate: 0.312486\n","Iteration 3 - Training Accuracy: 92.00%\n","Iteration 3 - Test Accuracy: 79.20%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.44651116  0.13955793 -0.20954436  0.61559326  0.57072983  0.32296701\n","  0.0861381   1.08847173  0.02332213  0.74478852  1.0705472   0.12165507\n","  0.7853405   0.03163973  0.02819518  1.06455113  1.01569774  1.4997503\n"," -0.01147797  1.39378163]\n","Iteration 4 - Learning Rate: 0.363768\n","Iteration 4 - Training Accuracy: 94.00%\n","Iteration 4 - Test Accuracy: 84.00%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.36579596  0.11178946 -0.21424534  0.60519131  0.55147373  0.34949158\n","  0.09100379  1.18825609 -0.03739354  0.75969471  1.12385062  0.09972943\n","  0.79140705  0.06772329  0.02117462  1.07940518  1.03131756  1.54896716\n"," -0.02818013  1.4139272 ]\n","Iteration 5 - Learning Rate: 0.402786\n","Iteration 5 - Training Accuracy: 94.00%\n","Iteration 5 - Test Accuracy: 83.20%\n","\n","\n","Fed_Epoch 0, Client 6:\n","Training data for epoch 0: 50\n","Client Data Structure:\n","[{'sequence': array([0.53086024, 0.53086024, 0.53086024, 0.53086024, 0.53086024]), 'label': 1}, {'sequence': array([0.72562675, 0.72562675, 0.72562675, 0.72562675, 0.72562675]), 'label': 1}, {'sequence': array([0.6130055, 0.6130055, 0.6130055, 0.6130055, 0.6130055]), 'label': 1}, {'sequence': array([0.60667948, 0.60667948, 0.60667948, 0.60667948, 0.60667948]), 'label': 1}, {'sequence': array([0.1876727, 0.1876727, 0.1876727, 0.1876727, 0.1876727]), 'label': 0}, {'sequence': array([0.65640509, 0.65640509, 0.65640509, 0.65640509, 0.65640509]), 'label': 1}, {'sequence': array([0.21082406, 0.21082406, 0.21082406, 0.21082406, 0.21082406]), 'label': 0}, {'sequence': array([0.53123558, 0.53123558, 0.53123558, 0.53123558, 0.53123558]), 'label': 1}, {'sequence': array([0.70644582, 0.70644582, 0.70644582, 0.70644582, 0.70644582]), 'label': 1}, {'sequence': array([0.39310173, 0.39309883, 0.39309593, 0.39309303, 0.39309013]), 'label': 0}, {'sequence': array([0.3893406, 0.3893406, 0.3893406, 0.3893406, 0.3893406]), 'label': 0}, {'sequence': array([0.75003327, 0.75003327, 0.75003327, 0.75003327, 0.75003327]), 'label': 1}, {'sequence': array([0.20471937, 0.20471937, 0.20471937, 0.20471937, 0.20471937]), 'label': 0}, {'sequence': array([0.65444361, 0.65444361, 0.65444361, 0.65444361, 0.65444361]), 'label': 1}, {'sequence': array([0.73740919, 0.73740919, 0.73740919, 0.73740919, 0.73740919]), 'label': 1}, {'sequence': array([0.42148499, 0.42148499, 0.11349505, 0.11349505, 0.11349505]), 'label': 0}, {'sequence': array([0.00337746, 0.00337746, 0.00337746, 0.00337746, 0.00337746]), 'label': 0}, {'sequence': array([0.52173081, 0.52173081, 0.52173081, 0.52173081, 0.52173081]), 'label': 1}, {'sequence': array([0.53222259, 0.53222259, 0.53222259, 0.53222259, 0.53222259]), 'label': 1}, {'sequence': array([0.45545345, 0.45545345, 0.45545345, 0.45545345, 0.45545345]), 'label': 0}, {'sequence': array([0.58871646, 0.58871646, 0.58871646, 0.58871646, 0.58871646]), 'label': 1}, {'sequence': array([0.56156713, 0.56156713, 0.56156713, 0.56156713, 0.56156713]), 'label': 1}, {'sequence': array([0.48140132, 0.48140132, 0.48140132, 0.48140132, 0.48140132]), 'label': 0}, {'sequence': array([0.86048728, 0.86048605, 0.7721434 , 0.86048474, 0.86048387]), 'label': 1}, {'sequence': array([0.71488857, 0.71488857, 0.71488857, 0.71488857, 0.71488857]), 'label': 1}, {'sequence': array([0.09977171, 0.09977171, 0.09977171, 0.09977171, 0.09977171]), 'label': 0}, {'sequence': array([0.79858192, 0.79858192, 0.79858192, 0.79858192, 0.79858192]), 'label': 1}, {'sequence': array([0.23616577, 0.23616577, 0.23616577, 0.23616577, 0.23616577]), 'label': 0}, {'sequence': array([0.17906617, 0.17906617, 0.17906617, 0.17906617, 0.17906617]), 'label': 0}, {'sequence': array([0.19354352, 0.19354352, 0.19354352, 0.19354352, 0.19354352]), 'label': 0}, {'sequence': array([0.65487214, 0.65487214, 0.65487214, 0.65487214, 0.65487214]), 'label': 1}, {'sequence': array([0.84053343, 0.84053343, 0.84053343, 0.84053343, 0.84053343]), 'label': 1}, {'sequence': array([0.23119862, 0.23119862, 0.23119862, 0.23119862, 0.23119862]), 'label': 0}, {'sequence': array([0.77946303, 0.77946303, 0.77946303, 0.77946303, 0.77946303]), 'label': 1}, {'sequence': array([0.08951837, 0.08951837, 0.08951837, 0.08951837, 0.08951837]), 'label': 0}, {'sequence': array([0.05955252, 0.05955252, 0.05955252, 0.05955252, 0.05955252]), 'label': 0}, {'sequence': array([0.226333, 0.226333, 0.226333, 0.226333, 0.226333]), 'label': 0}, {'sequence': array([0.71149502, 0.71149502, 0.71149502, 0.71149502, 0.71149502]), 'label': 1}, {'sequence': array([0.37468481, 0.37468481, 0.37468481, 0.37468481, 0.37468481]), 'label': 0}, {'sequence': array([0.69452387, 0.9304454 , 0.9304454 , 0.9304454 , 0.59776399]), 'label': 1}, {'sequence': array([0.34020549, 0.34020549, 0.34020549, 0.34020549, 0.34020549]), 'label': 0}, {'sequence': array([0.2314501, 0.2314501, 0.2314501, 0.2314501, 0.2314501]), 'label': 0}, {'sequence': array([0.04687083, 0.04687083, 0.04687083, 0.04687083, 0.04687083]), 'label': 0}, {'sequence': array([0.4265199, 0.4265199, 0.4265199, 0.4265199, 0.4265199]), 'label': 0}, {'sequence': array([0.52909502, 0.80736565, 0.52909502, 0.96515469, 0.96515469]), 'label': 1}, {'sequence': array([0.96243195, 0.96243195, 0.96243195, 0.96243195, 0.96243195]), 'label': 1}, {'sequence': array([0.88245088, 0.88245088, 0.88245088, 0.88245088, 0.88245088]), 'label': 1}, {'sequence': array([0.69967865, 0.69967865, 0.69967865, 0.69967865, 0.69967865]), 'label': 1}, {'sequence': array([0.25328238, 0.25328238, 0.25328238, 0.25328238, 0.25328238]), 'label': 0}, {'sequence': array([0.94896124, 0.94896124, 0.94896124, 0.94896124, 0.94896124]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [-0.15129185  0.58554468  0.84208248  0.85849051  0.47469506  0.83229336\n","  0.84754046  0.4946595   0.65822269  0.67336668  0.48644828  0.80651253\n","  0.16678894  0.39497857  0.48084902  0.15715824  0.44615778  0.53186404\n","  0.78847381  0.3666094 ]\n","Iteration 1 - Learning Rate: 0.189224\n","Iteration 1 - Training Accuracy: 66.00%\n","Iteration 1 - Test Accuracy: 71.20%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [-0.19490839  0.49194012  0.83710983  0.94406204  0.40455268  0.91337091\n","  0.78283829  0.40693828  0.77332709  0.81530129  0.40039502  0.75308152\n","  0.19242848  0.3809751   0.5582562   0.13039852  0.34038383  0.63241076\n","  0.93979318  0.35132854]\n","Iteration 2 - Learning Rate: 0.234137\n","Iteration 2 - Training Accuracy: 70.00%\n","Iteration 2 - Test Accuracy: 80.80%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [-0.25509172  0.41483229  0.81860251  0.9645178   0.42866677  0.9628616\n","  0.6642224   0.3486742   0.83651207  0.9532534   0.41911786  0.81509025\n","  0.17427927  0.4142185   0.53456227  0.11734806  0.33306679  0.63139158\n","  1.05794596  0.30761958]\n","Iteration 3 - Learning Rate: 0.276313\n","Iteration 3 - Training Accuracy: 74.00%\n","Iteration 3 - Test Accuracy: 80.00%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [-0.27170249  0.31770725  0.86529061  1.01932504  0.48002194  1.05339499\n","  0.57401089  0.2790061   0.86414448  1.11461218  0.37794271  0.87412252\n","  0.0954036   0.39185379  0.49564179  0.01966841  0.22289147  0.58024771\n","  1.11027017  0.24376491]\n","Iteration 4 - Learning Rate: 0.319027\n","Iteration 4 - Training Accuracy: 76.00%\n","Iteration 4 - Test Accuracy: 81.60%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [-0.17545228  0.21594829  0.8111975   1.08815776  0.60060189  1.08448611\n","  0.58112685  0.25459271  0.80326692  1.23513347  0.32683094  0.93270379\n","  0.05061388  0.45635627  0.39818336  0.06834157  0.22262331  0.62891204\n","  1.16724803  0.20080714]\n","Iteration 5 - Learning Rate: 0.357002\n","Iteration 5 - Training Accuracy: 78.00%\n","Iteration 5 - Test Accuracy: 88.00%\n","\n","\n","Fed_Epoch 0, Client 7:\n","Training data for epoch 0: 50\n","Client Data Structure:\n","[{'sequence': array([0.02977409, 0.02977409, 0.02977409, 0.02977409, 0.02977409]), 'label': 0}, {'sequence': array([0.58504454, 0.55165115, 0.63471899, 0.63471899, 0.63471899]), 'label': 1}, {'sequence': array([0.03082951, 0.03082951, 0.03082951, 0.03082951, 0.03082951]), 'label': 0}, {'sequence': array([0.24506466, 0.24506466, 0.24506466, 0.24506466, 0.24506466]), 'label': 0}, {'sequence': array([0.55619565, 0.55195945, 0.55619463, 0.55619463, 0.7941452 ]), 'label': 1}, {'sequence': array([0.37937396, 0.37937396, 0.37937396, 0.37937396, 0.37937382]), 'label': 0}, {'sequence': array([0.66245811, 0.66245811, 0.66245811, 0.66245811, 0.66245811]), 'label': 1}, {'sequence': array([0.08058492, 0.08058492, 0.08058492, 0.08058492, 0.08058492]), 'label': 0}, {'sequence': array([0.23967071, 0.23967071, 0.23967071, 0.23967071, 0.23967071]), 'label': 0}, {'sequence': array([0.39055322, 0.39055322, 0.39055322, 0.39055322, 0.39055322]), 'label': 0}, {'sequence': array([0.38090481, 0.38090481, 0.38090481, 0.38090481, 0.38090481]), 'label': 0}, {'sequence': array([0.19488964, 0.19488964, 0.19488964, 0.19488964, 0.19488964]), 'label': 0}, {'sequence': array([0.64427463, 0.64427463, 0.64427463, 0.64427463, 0.64427463]), 'label': 1}, {'sequence': array([0.73548344, 0.73548344, 0.73548344, 0.73548344, 0.73548344]), 'label': 1}, {'sequence': array([0.9703639 , 0.69349178, 0.97035948, 0.97035948, 0.63352348]), 'label': 1}, {'sequence': array([0.31957655, 0.31957655, 0.31957655, 0.31957655, 0.31957655]), 'label': 0}, {'sequence': array([0.0916577, 0.0916577, 0.0916577, 0.0916577, 0.0916577]), 'label': 0}, {'sequence': array([0.7317118, 0.7317118, 0.7317118, 0.7317118, 0.7317118]), 'label': 1}, {'sequence': array([0.88631296, 0.8863126 , 0.51829596, 0.51829596, 0.88630615]), 'label': 1}, {'sequence': array([0.14400996, 0.14400996, 0.14400996, 0.14400996, 0.14400996]), 'label': 0}, {'sequence': array([0.47113422, 0.47113422, 0.47113422, 0.47113422, 0.47113422]), 'label': 0}, {'sequence': array([0.58964629, 0.58964629, 0.58964629, 0.58964629, 0.58964629]), 'label': 1}, {'sequence': array([0.36066919, 0.36066919, 0.36066919, 0.36066919, 0.36066919]), 'label': 0}, {'sequence': array([0.33089307, 0.33089307, 0.33089307, 0.33089307, 0.33089307]), 'label': 0}, {'sequence': array([0.20233399, 0.20233399, 0.20233399, 0.20233399, 0.20233399]), 'label': 0}, {'sequence': array([0.83229347, 0.83229347, 0.83229347, 0.83229347, 0.83229347]), 'label': 1}, {'sequence': array([0.67082266, 0.67082266, 0.67082266, 0.67082266, 0.67082266]), 'label': 1}, {'sequence': array([0.89762883, 0.89762883, 0.89762883, 0.89762883, 0.89762883]), 'label': 1}, {'sequence': array([0.58060571, 0.58060571, 0.58060571, 0.58060571, 0.58060571]), 'label': 1}, {'sequence': array([0.11475413, 0.11475413, 0.11475413, 0.11475413, 0.11475413]), 'label': 0}, {'sequence': array([0.51383879, 0.51383879, 0.51383879, 0.51383879, 0.51383879]), 'label': 1}, {'sequence': array([0.18806957, 0.18806957, 0.18806957, 0.18806957, 0.18806957]), 'label': 0}, {'sequence': array([0.53261264, 0.53261264, 0.53261264, 0.53261264, 0.53261264]), 'label': 1}, {'sequence': array([0.65850123, 0.65850123, 0.65850123, 0.65850123, 0.65850123]), 'label': 1}, {'sequence': array([0.28527001, 0.28527001, 0.28527001, 0.28527001, 0.28527001]), 'label': 0}, {'sequence': array([0.63603104, 0.63603104, 0.63603104, 0.63603104, 0.63603104]), 'label': 1}, {'sequence': array([0.55630457, 0.55630457, 0.55630457, 0.55630457, 0.55630457]), 'label': 1}, {'sequence': array([0.053891, 0.053891, 0.053891, 0.053891, 0.053891]), 'label': 0}, {'sequence': array([0.6033979, 0.6033979, 0.6033979, 0.6033979, 0.6033979]), 'label': 1}, {'sequence': array([0.26845583, 0.26845583, 0.26845583, 0.26845583, 0.26845583]), 'label': 0}, {'sequence': array([0.45583951, 0.45583951, 0.45583951, 0.19712311, 0.19712311]), 'label': 0}, {'sequence': array([0.37803959, 0.37803959, 0.37803959, 0.37803959, 0.37803959]), 'label': 0}, {'sequence': array([0.63092829, 0.63092829, 0.63092829, 0.63092829, 0.63092829]), 'label': 1}, {'sequence': array([0.14174641, 0.14174641, 0.14174641, 0.14174641, 0.14174641]), 'label': 0}, {'sequence': array([0.85260482, 0.85260482, 0.85260482, 0.85260482, 0.85260482]), 'label': 1}, {'sequence': array([0.93239623, 0.93239623, 0.93239623, 0.93239623, 0.93239623]), 'label': 1}, {'sequence': array([0.55326542, 0.55326542, 0.55326542, 0.55326542, 0.55326542]), 'label': 1}, {'sequence': array([0.24803294, 0.24803294, 0.24803294, 0.24803294, 0.24803294]), 'label': 0}, {'sequence': array([0.70298567, 0.70298567, 0.70298567, 0.70298567, 0.70298567]), 'label': 1}, {'sequence': array([0.27308128, 0.27308128, 0.27308128, 0.27308128, 0.27308128]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.94919049 0.23588113 0.53628858 0.13645278 0.59190307 0.40346591\n"," 0.35928997 0.37622753 0.40202799 0.4035829  0.11033589 0.3823179\n"," 1.10601316 0.27951945 0.57962118 0.24915833 0.91560411 0.78900036\n"," 0.31733358 0.6410531 ]\n","Iteration 1 - Learning Rate: 0.191381\n","Iteration 1 - Training Accuracy: 62.00%\n","Iteration 1 - Test Accuracy: 45.60%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [0.86246049 0.20238333 0.46434941 0.07335646 0.42761404 0.31239711\n"," 0.33846809 0.41630925 0.42091073 0.29374231 0.07068023 0.4531018\n"," 1.14590227 0.25780215 0.57709928 0.14627721 0.84014096 0.82497298\n"," 0.36409251 0.66638093]\n","Iteration 2 - Learning Rate: 0.237439\n","Iteration 2 - Training Accuracy: 64.00%\n","Iteration 2 - Test Accuracy: 48.00%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [0.76260895 0.20593801 0.52687751 0.04115476 0.31957907 0.3940825\n"," 0.3694479  0.37500389 0.45781337 0.22018648 0.041122   0.4122191\n"," 1.24458622 0.14651957 0.4713201  0.13876434 0.95621758 0.85499063\n"," 0.29654665 0.69531425]\n","Iteration 3 - Learning Rate: 0.274559\n","Iteration 3 - Training Accuracy: 74.00%\n","Iteration 3 - Test Accuracy: 50.40%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.67334928  0.09424567  0.41224414 -0.02755655  0.28749248  0.41049795\n","  0.27382805  0.51223665  0.45305297  0.19056344  0.09522445  0.47393226\n","  1.35645979  0.00701673  0.41513047  0.17762405  0.99664309  0.77885743\n","  0.27361007  0.79047387]\n","Iteration 4 - Learning Rate: 0.313652\n","Iteration 4 - Training Accuracy: 74.00%\n","Iteration 4 - Test Accuracy: 66.40%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.67563516  0.0516189   0.38839001 -0.09173149  0.11825636  0.44856055\n","  0.31498307  0.57485996  0.41993915  0.02935944  0.13318032  0.41838526\n","  1.38314598 -0.08285667  0.39486987  0.10837755  0.88175496  0.76447155\n","  0.28968192  0.69302908]\n","Iteration 5 - Learning Rate: 0.357880\n","Iteration 5 - Training Accuracy: 70.00%\n","Iteration 5 - Test Accuracy: 59.20%\n","\n","\n","Fed_Epoch 0, Client 8:\n","Training data for epoch 0: 50\n","Client Data Structure:\n","[{'sequence': array([0.67843189, 0.67843189, 0.67843189, 0.67843189, 0.67843189]), 'label': 1}, {'sequence': array([0.69813933, 0.69813933, 0.69813933, 0.69813933, 0.69813933]), 'label': 1}, {'sequence': array([0.42916299, 0.42916299, 0.42916299, 0.42916299, 0.42916299]), 'label': 0}, {'sequence': array([0.54990049, 0.54990049, 0.54990049, 0.54990049, 0.54990049]), 'label': 1}, {'sequence': array([0.92412416, 0.92412416, 0.92412416, 0.92412416, 0.92412416]), 'label': 1}, {'sequence': array([0.04644252, 0.04644252, 0.04644252, 0.04644252, 0.04644252]), 'label': 0}, {'sequence': array([0.21737294, 0.21737294, 0.21737294, 0.21737294, 0.21737294]), 'label': 0}, {'sequence': array([0.18788722, 0.18788722, 0.18788722, 0.18788722, 0.18788722]), 'label': 0}, {'sequence': array([0.68691217, 0.68691217, 0.68691217, 0.68691217, 0.68691217]), 'label': 1}, {'sequence': array([0.97737233, 0.97737233, 0.97737233, 0.97737233, 0.97737233]), 'label': 1}, {'sequence': array([0.84721783, 0.84721783, 0.84721783, 0.84721783, 0.84721783]), 'label': 1}, {'sequence': array([0.55143112, 0.55143076, 0.55143076, 0.55143076, 0.55143076]), 'label': 1}, {'sequence': array([0.78156069, 0.78156069, 0.78156069, 0.78156069, 0.78156069]), 'label': 1}, {'sequence': array([0.03840011, 0.03840011, 0.03840011, 0.03840011, 0.03840011]), 'label': 0}, {'sequence': array([0.5894659, 0.5894659, 0.5894659, 0.5894659, 0.5894659]), 'label': 1}, {'sequence': array([0.36677236, 0.36677236, 0.36677236, 0.36677236, 0.36677236]), 'label': 0}, {'sequence': array([0.10177486, 0.10177486, 0.10177486, 0.10177486, 0.10177486]), 'label': 0}, {'sequence': array([0.6266958, 0.6266958, 0.6266958, 0.6266958, 0.6266958]), 'label': 1}, {'sequence': array([0.4365219, 0.4365219, 0.4365219, 0.4365219, 0.4365219]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.34052321, 0.34052321, 0.34052321, 0.34052321, 0.34052321]), 'label': 0}, {'sequence': array([0.83837729, 0.83837729, 0.83837729, 0.83837729, 0.83837729]), 'label': 1}, {'sequence': array([0.15236008, 0.15236008, 0.15236008, 0.15236008, 0.15236008]), 'label': 0}, {'sequence': array([0.8288926, 0.8288926, 0.8288926, 0.8288926, 0.8288926]), 'label': 1}, {'sequence': array([0.71378828, 0.71378828, 0.71378828, 0.71378828, 0.71378828]), 'label': 1}, {'sequence': array([0.39837972, 0.39837972, 0.39837972, 0.39837972, 0.39837972]), 'label': 0}, {'sequence': array([0.85047818, 0.85047818, 0.85047818, 0.85047818, 0.85047818]), 'label': 1}, {'sequence': array([0.91332532, 0.91332532, 0.91332532, 0.91332532, 0.91332532]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.08899026, 0.08899026, 0.08899026, 0.08899026, 0.08899026]), 'label': 0}, {'sequence': array([0.93624223, 0.93624223, 0.93624223, 0.93624223, 0.93624223]), 'label': 1}, {'sequence': array([0.91126151, 0.91126151, 0.91126151, 0.91126151, 0.91126151]), 'label': 1}, {'sequence': array([0.59119025, 0.59119025, 0.59119025, 0.59119025, 0.59119025]), 'label': 1}, {'sequence': array([0.25482953, 0.25482953, 0.25482953, 0.25482953, 0.25482953]), 'label': 0}, {'sequence': array([0.09055423, 0.09055423, 0.09055423, 0.09055423, 0.09055423]), 'label': 0}, {'sequence': array([0.5371093, 0.5371093, 0.5371093, 0.5371093, 0.5371093]), 'label': 1}, {'sequence': array([0.72486121, 0.72486121, 0.72486121, 0.72486121, 0.72486121]), 'label': 1}, {'sequence': array([0.5943916, 0.5943916, 0.5943916, 0.5943916, 0.5943916]), 'label': 1}, {'sequence': array([0.01280888, 0.01280888, 0.01280888, 0.01280888, 0.01280888]), 'label': 0}, {'sequence': array([0.09670335, 0.09670335, 0.09670335, 0.09670335, 0.09670335]), 'label': 0}, {'sequence': array([0.75481815, 0.75481815, 0.75481815, 0.75481815, 0.75481815]), 'label': 1}, {'sequence': array([0.69525802, 0.69525802, 0.69525802, 0.69525802, 0.69525802]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.81562264, 0.81562264, 0.81562243, 0.81562243, 0.81562243]), 'label': 1}, {'sequence': array([0.31524955, 0.31524955, 0.31524955, 0.31524955, 0.31524955]), 'label': 0}, {'sequence': array([0.29688533, 0.29688533, 0.29688533, 0.29688533, 0.29688533]), 'label': 0}, {'sequence': array([0.94357722, 0.94357722, 0.94357722, 0.94357722, 0.94357722]), 'label': 1}, {'sequence': array([0.04253992, 0.04253992, 0.04253992, 0.04253992, 0.04253992]), 'label': 0}, {'sequence': array([0.26401403, 0.26401403, 0.26401403, 0.26401403, 0.26401403]), 'label': 0}, {'sequence': array([0.89516757, 0.89516757, 0.89516656, 0.89516656, 0.89516656]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.72013177  0.08847498  0.43882845  0.78822389 -0.0585165   0.56549043\n","  0.6908526   1.01238783  0.90839628  0.54558682  0.53020108  0.07392767\n","  0.49462153  0.57430148  0.11924093  0.7775404   0.42830117  0.34594559\n","  0.64547534  0.30528009]\n","Iteration 1 - Learning Rate: 0.197705\n","Iteration 1 - Training Accuracy: 60.00%\n","Iteration 1 - Test Accuracy: 56.00%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.69986823  0.14116959  0.34737666  0.82597954 -0.13530977  0.51170455\n","  0.63665324  1.0094059   0.98968177  0.69933598  0.51522395  0.13059378\n","  0.55930393  0.4939489   0.23009154  0.7826858   0.26055269  0.37955435\n","  0.7002787   0.30322053]\n","Iteration 2 - Learning Rate: 0.257962\n","Iteration 2 - Training Accuracy: 74.00%\n","Iteration 2 - Test Accuracy: 71.20%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.68664675  0.12717416  0.24397634  0.95456613 -0.2465523   0.4949175\n","  0.58205473  0.93754919  0.94060928  0.79441209  0.50519499  0.21166701\n","  0.65634863  0.45283023  0.30973024  0.78625209  0.27269373  0.3453837\n","  0.74449101  0.22692736]\n","Iteration 3 - Learning Rate: 0.308892\n","Iteration 3 - Training Accuracy: 80.00%\n","Iteration 3 - Test Accuracy: 74.40%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.64319918  0.0582969   0.2141499   1.01970775 -0.31360948  0.5485597\n","  0.54855931  0.94097955  0.93584161  0.87083576  0.53436788  0.17012481\n","  0.68602742  0.40181093  0.27786592  0.77917643  0.25651645  0.35455177\n","  0.72601125  0.23756777]\n","Iteration 4 - Learning Rate: 0.345002\n","Iteration 4 - Training Accuracy: 78.00%\n","Iteration 4 - Test Accuracy: 75.20%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.63655904  0.0870411   0.17872504  1.05616696 -0.35501064  0.53316796\n","  0.47041417  0.89331406  0.94241286  0.95343759  0.54285242  0.18785748\n","  0.73807701  0.33961047  0.27723063  0.86858277  0.2137476   0.38367973\n","  0.67422519  0.21450534]\n","Iteration 5 - Learning Rate: 0.376200\n","Iteration 5 - Training Accuracy: 80.00%\n","Iteration 5 - Test Accuracy: 78.40%\n","Global Loss for Round 0: 0.4040325060979069\n","Time for Round 0: 1166.56 s\n","Best client for epoch 0 is Client 5 with test accuracy 0.94\n","Global Model Accuracy in Epoch 0: 0.82\n","----------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  10%|█         | 1/10 [19:39<2:56:52, 1179.12s/it]"]},{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","File saved to /content/drive/MyDrive/DQFL_Genome_IID_Global_2504_2025_.csv\n","\n","\n","Fed_Epoch: 1\n","\n","\n","Fed_Epoch 1, Client 1:\n","Training data for epoch 1: 50\n","Client Data Structure:\n","[{'sequence': array([0.34335604, 0.34335604, 0.34335604, 0.34335604, 0.34335604]), 'label': 0}, {'sequence': array([0.39920773, 0.39920773, 0.39920773, 0.39920773, 0.39920773]), 'label': 0}, {'sequence': array([0.99955175, 0.99955175, 0.99955175, 0.99955175, 0.99955175]), 'label': 1}, {'sequence': array([0.86341758, 0.86341758, 0.863417  , 0.86319429, 0.86341613]), 'label': 1}, {'sequence': array([0.00645321, 0.00645321, 0.00645321, 0.00645321, 0.00645321]), 'label': 0}, {'sequence': array([0.76081921, 0.76081921, 0.76081921, 0.76081921, 0.76081921]), 'label': 1}, {'sequence': array([0.0757398 , 0.0757398 , 0.0757398 , 0.0757398 , 0.07573256]), 'label': 0}, {'sequence': array([0.663997, 0.663997, 0.663997, 0.663997, 0.663997]), 'label': 1}, {'sequence': array([0.65185814, 0.65185814, 0.65185814, 0.65185814, 0.65185814]), 'label': 1}, {'sequence': array([0.72021497, 0.72021497, 0.72021497, 0.72021497, 0.72021497]), 'label': 1}, {'sequence': array([0.83970064, 0.83970064, 0.83970064, 0.83970064, 0.83970064]), 'label': 1}, {'sequence': array([0.13548453, 0.13548453, 0.13548453, 0.13548453, 0.13548453]), 'label': 0}, {'sequence': array([0.52056132, 0.52056132, 0.52056132, 0.52056132, 0.52056132]), 'label': 1}, {'sequence': array([0.28224491, 0.28224491, 0.28224491, 0.28224491, 0.28224491]), 'label': 0}, {'sequence': array([0.91449989, 0.91449989, 0.91449989, 0.91449989, 0.91449989]), 'label': 1}, {'sequence': array([0.62117719, 0.58358733, 0.62117248, 0.62117248, 0.6211706 ]), 'label': 1}, {'sequence': array([0.27301402, 0.27301402, 0.27301402, 0.27301402, 0.06744752]), 'label': 0}, {'sequence': array([0.37143114, 0.37143099, 0.37143099, 0.02646113, 0.37143012]), 'label': 0}, {'sequence': array([0.52995708, 0.52995708, 0.52995708, 0.52995708, 0.52995708]), 'label': 1}, {'sequence': array([0.33219976, 0.33219976, 0.33219976, 0.33219976, 0.33219976]), 'label': 0}, {'sequence': array([0.99583048, 0.99583048, 0.99583048, 0.99583048, 0.99583048]), 'label': 1}, {'sequence': array([0.88753247, 0.88753247, 0.88753247, 0.88753247, 0.88753247]), 'label': 1}, {'sequence': array([0.90733173, 0.90733173, 0.90733173, 0.90733173, 0.90733173]), 'label': 1}, {'sequence': array([0.41801867, 0.41801867, 0.41801867, 0.41801867, 0.41801867]), 'label': 0}, {'sequence': array([0.13108194, 0.13108194, 0.13108194, 0.13108194, 0.13108186]), 'label': 0}, {'sequence': array([0.14581519, 0.14581519, 0.14581519, 0.14581519, 0.14581519]), 'label': 0}, {'sequence': array([0.05446129, 0.05446129, 0.05446129, 0.05446129, 0.05446129]), 'label': 0}, {'sequence': array([0.05332013, 0.05332013, 0.05332013, 0.05332013, 0.05332013]), 'label': 0}, {'sequence': array([0.97148477, 0.97148477, 0.97148477, 0.97148477, 0.97148477]), 'label': 1}, {'sequence': array([0.70737645, 0.70737645, 0.70737645, 0.70737645, 0.70737645]), 'label': 1}, {'sequence': array([0.2171919, 0.2171919, 0.2171919, 0.2171919, 0.2171919]), 'label': 0}, {'sequence': array([0.30636646, 0.30636646, 0.30636646, 0.30636646, 0.30636646]), 'label': 0}, {'sequence': array([0.95902709, 0.83820879, 0.95902514, 0.95902514, 0.95902514]), 'label': 1}, {'sequence': array([0.86164641, 0.86164641, 0.86164641, 0.86164641, 0.86164641]), 'label': 1}, {'sequence': array([0.46814731, 0.24216719, 0.24216719, 0.24216719, 0.24216719]), 'label': 0}, {'sequence': array([0.78917956, 0.78917956, 0.78917956, 0.78917956, 0.78917956]), 'label': 1}, {'sequence': array([0.08276643, 0.08276643, 0.08276643, 0.08276643, 0.08276643]), 'label': 0}, {'sequence': array([0.40326223, 0.40326223, 0.40326223, 0.40326223, 0.40326223]), 'label': 0}, {'sequence': array([0.12442841, 0.12442841, 0.12442841, 0.12442841, 0.12442841]), 'label': 0}, {'sequence': array([0.23276483, 0.23276483, 0.23276483, 0.23276483, 0.23276483]), 'label': 0}, {'sequence': array([0.69565749, 0.69565749, 0.69565749, 0.69565749, 0.69565749]), 'label': 1}, {'sequence': array([0.46200059, 0.4432137 , 0.4432137 , 0.4432137 , 0.4432137 ]), 'label': 0}, {'sequence': array([0.24632975, 0.24632975, 0.24632975, 0.24632975, 0.24632975]), 'label': 0}, {'sequence': array([0.67879121, 0.67879121, 0.67879121, 0.67879121, 0.67879121]), 'label': 1}, {'sequence': array([0.71308768, 0.71308768, 0.71308768, 0.71308768, 0.71308768]), 'label': 1}, {'sequence': array([0.00779505, 0.00779505, 0.00779505, 0.00779505, 0.00779505]), 'label': 0}, {'sequence': array([0.20580371, 0.20580371, 0.20580371, 0.20580371, 0.20580371]), 'label': 0}, {'sequence': array([0.74940492, 0.74940492, 0.74940492, 0.74940492, 0.74940492]), 'label': 1}, {'sequence': array([0.91054997, 0.91054997, 0.91054997, 0.91054997, 0.91054997]), 'label': 1}, {'sequence': array([0.36245514, 0.36245514, 0.36245514, 0.36245514, 0.36245514]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.52126896 0.29244694 0.86063573 0.37284693 0.75706633 0.04881611\n"," 0.24009284 0.38806958 0.39502239 0.40383273 0.63226331 0.59240555\n"," 0.49986781 0.82807794 0.16493668 0.82697826 0.74925399 0.18512981\n"," 0.65827535 0.22676226]\n","Iteration 1 - Learning Rate: 0.156512\n","Iteration 1 - Training Accuracy: 40.00%\n","Iteration 1 - Test Accuracy: 44.00%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [0.45338234 0.21692834 0.82628688 0.45620153 0.6386527  0.07275097\n"," 0.19657302 0.33033699 0.4193584  0.41045407 0.54910772 0.57091225\n"," 0.46453325 0.81500095 0.09795448 0.8238063  0.80159002 0.20338805\n"," 0.70256476 0.19839515]\n","Iteration 2 - Learning Rate: 0.177904\n","Iteration 2 - Training Accuracy: 50.00%\n","Iteration 2 - Test Accuracy: 48.00%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.40711169  0.15940377  0.881282    0.4347422   0.57903197  0.0476944\n","  0.12735337  0.40072843  0.46151555  0.41783848  0.48905755  0.53477367\n","  0.43531107  0.71320302 -0.03045411  0.87201649  0.79309195  0.22433088\n","  0.71751107  0.12826695]\n","Iteration 3 - Learning Rate: 0.206954\n","Iteration 3 - Training Accuracy: 54.00%\n","Iteration 3 - Test Accuracy: 53.60%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.50302341  0.05470823  0.89637887  0.41302405  0.61538183  0.00730989\n","  0.10213775  0.40272523  0.50969471  0.35737296  0.38295864  0.51579859\n","  0.42309457  0.67821863 -0.15680692  0.94185951  0.83877747  0.31883698\n","  0.79137764  0.0868395 ]\n","Iteration 4 - Learning Rate: 0.238818\n","Iteration 4 - Training Accuracy: 58.00%\n","Iteration 4 - Test Accuracy: 56.80%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.50742907 -0.00466418  0.91036216  0.40347939  0.59271122  0.00621374\n","  0.09457778  0.39935501  0.58663426  0.30894063  0.25352351  0.47597218\n","  0.46842507  0.63808933 -0.28070016  0.94183045  0.85722047  0.35137005\n","  0.86692977  0.03521248]\n","Iteration 5 - Learning Rate: 0.274235\n","Iteration 5 - Training Accuracy: 64.00%\n","Iteration 5 - Test Accuracy: 61.60%\n","\n","\n","Fed_Epoch 1, Client 2:\n","Training data for epoch 1: 50\n","Client Data Structure:\n","[{'sequence': array([0.17758968, 0.17758968, 0.17758968, 0.17758968, 0.17758968]), 'label': 0}, {'sequence': array([0.04925179, 0.04925179, 0.04925179, 0.04925179, 0.04925179]), 'label': 0}, {'sequence': array([0.61322799, 0.61322799, 0.61322799, 0.61322799, 0.61322799]), 'label': 1}, {'sequence': array([0.30094635, 0.01021681, 0.30094316, 0.30094316, 0.30094316]), 'label': 0}, {'sequence': array([0.61064585, 0.61064585, 0.61064585, 0.61064585, 0.61064585]), 'label': 1}, {'sequence': array([0.61595754, 0.61595754, 0.61595754, 0.61595754, 0.61595754]), 'label': 1}, {'sequence': array([0.00676463, 0.00676463, 0.00676463, 0.00676463, 0.00676463]), 'label': 0}, {'sequence': array([0.92040681, 0.92040681, 0.92040681, 0.92040681, 0.92040681]), 'label': 1}, {'sequence': array([0.55005399, 0.55005399, 0.55005399, 0.55005399, 0.55005399]), 'label': 1}, {'sequence': array([0.26166134, 0.26166134, 0.26166134, 0.26166134, 0.26166134]), 'label': 0}, {'sequence': array([0.21857882, 0.21857882, 0.21857882, 0.21857882, 0.21857882]), 'label': 0}, {'sequence': array([0.59766195, 0.59766195, 0.59766195, 0.59766195, 0.59766195]), 'label': 1}, {'sequence': array([0.08188834, 0.08188834, 0.08188834, 0.08188834, 0.08188834]), 'label': 0}, {'sequence': array([0.84071469, 0.84071469, 0.84071469, 0.84071469, 0.84071469]), 'label': 1}, {'sequence': array([0.78985805, 0.78985805, 0.78985805, 0.78985805, 0.78985805]), 'label': 1}, {'sequence': array([0.46618228, 0.46618228, 0.46618228, 0.46618228, 0.46618228]), 'label': 0}, {'sequence': array([0.20788282, 0.20788282, 0.20788282, 0.20788282, 0.20788282]), 'label': 0}, {'sequence': array([0.2166859, 0.2166859, 0.2166859, 0.2166859, 0.2166859]), 'label': 0}, {'sequence': array([0.51351854, 0.51351854, 0.51351854, 0.51351854, 0.51351854]), 'label': 1}, {'sequence': array([0.43444649, 0.43444649, 0.21532297, 0.21532297, 0.21532297]), 'label': 0}, {'sequence': array([0.54397133, 0.54397133, 0.54397133, 0.54397133, 0.54397133]), 'label': 1}, {'sequence': array([0.05824482, 0.05824482, 0.05824482, 0.05824482, 0.05824482]), 'label': 0}, {'sequence': array([0.53034822, 0.53034822, 0.53034822, 0.53034822, 0.53034822]), 'label': 1}, {'sequence': array([0.65848731, 0.65848731, 0.65848731, 0.65848731, 0.65848731]), 'label': 1}, {'sequence': array([0.03835794, 0.03835794, 0.03835794, 0.03835794, 0.03835794]), 'label': 0}, {'sequence': array([0.17424795, 0.17424795, 0.17424795, 0.17424795, 0.17424795]), 'label': 0}, {'sequence': array([0.42732341, 0.42732341, 0.42732341, 0.42732341, 0.42732341]), 'label': 0}, {'sequence': array([0.22491448, 0.22491448, 0.22491448, 0.22491448, 0.22491448]), 'label': 0}, {'sequence': array([0.80486047, 0.80486047, 0.80486047, 0.80486047, 0.80486047]), 'label': 1}, {'sequence': array([0.04172547, 0.04172547, 0.04172547, 0.04172547, 0.04172547]), 'label': 0}, {'sequence': array([0.29903915, 0.29903915, 0.29903915, 0.29903915, 0.29903915]), 'label': 0}, {'sequence': array([0.06111765, 0.04753773, 0.06111555, 0.06111555, 0.04752882]), 'label': 0}, {'sequence': array([0.49957444, 0.49957444, 0.49957444, 0.49957444, 0.49957444]), 'label': 0}, {'sequence': array([0.23196632, 0.23196632, 0.23196632, 0.23196632, 0.23196632]), 'label': 0}, {'sequence': array([0.22570741, 0.22570741, 0.22570741, 0.22570741, 0.22570741]), 'label': 0}, {'sequence': array([0.22645852, 0.22645852, 0.22645852, 0.22645852, 0.22645852]), 'label': 0}, {'sequence': array([0.99241012, 0.99241012, 0.99241012, 0.99241012, 0.99241012]), 'label': 1}, {'sequence': array([0.3808493, 0.3808493, 0.3808493, 0.3808493, 0.3808493]), 'label': 0}, {'sequence': array([0.87987482, 0.87987482, 0.87987482, 0.87987482, 0.87987482]), 'label': 1}, {'sequence': array([0.14050466, 0.14050466, 0.14050466, 0.14050466, 0.14050466]), 'label': 0}, {'sequence': array([0.09294685, 0.09294685, 0.09294685, 0.09294685, 0.09294685]), 'label': 0}, {'sequence': array([0.24001981, 0.24001981, 0.24001981, 0.24001981, 0.24001981]), 'label': 0}, {'sequence': array([0.43275882, 0.43275882, 0.43275882, 0.43275882, 0.43275882]), 'label': 0}, {'sequence': array([0.46422058, 0.46422058, 0.46422058, 0.46422058, 0.46422058]), 'label': 0}, {'sequence': array([0.45584922, 0.45584922, 0.45584922, 0.45584922, 0.45584922]), 'label': 0}, {'sequence': array([0.93679766, 0.93679766, 0.93679766, 0.93679766, 0.93679766]), 'label': 1}, {'sequence': array([0.42163087, 0.42163087, 0.42163087, 0.42163087, 0.42163087]), 'label': 0}, {'sequence': array([0.53324004, 0.53324004, 0.53324004, 0.53324004, 0.53324004]), 'label': 1}, {'sequence': array([0.76146487, 0.76146487, 0.76146487, 0.76146487, 0.76146487]), 'label': 1}, {'sequence': array([0.2817439, 0.2817439, 0.2817439, 0.2817439, 0.2817439]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.91975458  0.56563103 -0.01285481  0.8136536   0.65686659  0.70234467\n","  0.33699731  0.56655919  0.92992609  0.95990482  0.50958212  0.85462477\n","  1.03194482  0.20848741  0.47427763  0.2497038   0.48580948  1.03915442\n","  0.92091412  0.89090165]\n","Iteration 1 - Learning Rate: 0.194673\n","Iteration 1 - Training Accuracy: 66.00%\n","Iteration 1 - Test Accuracy: 64.80%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.87857752  0.57833085 -0.20944849  0.8830302   0.6303101   0.63293332\n","  0.34984052  0.37523328  0.95210341  0.8583633   0.39767292  0.92264745\n","  1.04876155  0.22116226  0.39025049  0.21208399  0.41426026  1.13352397\n","  1.04769673  0.83180983]\n","Iteration 2 - Learning Rate: 0.246983\n","Iteration 2 - Training Accuracy: 84.00%\n","Iteration 2 - Test Accuracy: 81.60%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.84139512  0.69658153 -0.34075761  0.97875148  0.63312152  0.72125483\n","  0.3461612   0.29190265  0.98127998  0.94352181  0.4034337   0.98551028\n","  1.05559498  0.20980475  0.43983313  0.17992267  0.40563357  1.18962946\n","  1.10072176  0.81787594]\n","Iteration 3 - Learning Rate: 0.293343\n","Iteration 3 - Training Accuracy: 80.00%\n","Iteration 3 - Test Accuracy: 80.80%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.82018408  0.69234026 -0.38818404  1.01204527  0.65492492  0.71743573\n","  0.37130585  0.20378229  0.99669319  0.97171299  0.39912404  0.98416047\n","  1.0749353   0.21815152  0.4857505   0.15833863  0.40576607  1.13650161\n","  1.10853261  0.83464427]\n","Iteration 4 - Learning Rate: 0.327768\n","Iteration 4 - Training Accuracy: 80.00%\n","Iteration 4 - Test Accuracy: 80.80%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.81144459  0.71992712 -0.40873128  1.02597145  0.67100417  0.75081698\n","  0.38567409  0.14067567  0.98872045  1.01493955  0.39178546  0.99046359\n","  1.02686742  0.27669908  0.46608625  0.16943659  0.35066535  1.10781495\n","  1.09574789  0.88183444]\n","Iteration 5 - Learning Rate: 0.353356\n","Iteration 5 - Training Accuracy: 76.00%\n","Iteration 5 - Test Accuracy: 76.00%\n","\n","\n","Fed_Epoch 1, Client 3:\n","Training data for epoch 1: 50\n","Client Data Structure:\n","[{'sequence': array([0.97580373, 0.97580373, 0.69537745, 0.69537745, 0.69537745]), 'label': 1}, {'sequence': array([0.06270111, 0.06270111, 0.06270111, 0.06270111, 0.06270111]), 'label': 0}, {'sequence': array([0.40946128, 0.40946128, 0.09836385, 0.09836385, 0.09836385]), 'label': 0}, {'sequence': array([0.42028135, 0.42028135, 0.42028135, 0.42028135, 0.42028135]), 'label': 0}, {'sequence': array([0.13745297, 0.48746195, 0.48746195, 0.48746195, 0.48746195]), 'label': 0}, {'sequence': array([0.55859711, 0.55859711, 0.55859711, 0.55859711, 0.55859711]), 'label': 1}, {'sequence': array([0.61240731, 0.61240731, 0.61240731, 0.61240731, 0.61240731]), 'label': 1}, {'sequence': array([0.61522738, 0.61522738, 0.61522738, 0.61522738, 0.61522738]), 'label': 1}, {'sequence': array([0.60295342, 0.60295342, 0.60295342, 0.60295342, 0.60295342]), 'label': 1}, {'sequence': array([0.72654911, 0.72654911, 0.72654911, 0.72654911, 0.72654911]), 'label': 1}, {'sequence': array([0.06628795, 0.06628795, 0.06628795, 0.06628795, 0.06628795]), 'label': 0}, {'sequence': array([0.4628607, 0.4628607, 0.4628607, 0.4628607, 0.4628607]), 'label': 0}, {'sequence': array([0.43495786, 0.43495786, 0.43495786, 0.43495786, 0.43495786]), 'label': 0}, {'sequence': array([0.62741437, 0.62741437, 0.62741437, 0.62741437, 0.62741437]), 'label': 1}, {'sequence': array([0.73746478, 0.73746478, 0.73746478, 0.73746478, 0.73746478]), 'label': 1}, {'sequence': array([0.36547792, 0.36547792, 0.36547792, 0.36547792, 0.36547792]), 'label': 0}, {'sequence': array([0.9601118, 0.9601118, 0.9601118, 0.9601118, 0.9601118]), 'label': 1}, {'sequence': array([0.84777638, 0.84777638, 0.84777638, 0.84777638, 0.84777638]), 'label': 1}, {'sequence': array([0.52664702, 0.52664702, 0.52664702, 0.52664702, 0.52664702]), 'label': 1}, {'sequence': array([0.55537416, 0.55537416, 0.55537416, 0.55537416, 0.55537416]), 'label': 1}, {'sequence': array([0.28531023, 0.28531023, 0.28531023, 0.28531023, 0.28531023]), 'label': 0}, {'sequence': array([0.25434483, 0.25434483, 0.25434483, 0.25434483, 0.25434483]), 'label': 0}, {'sequence': array([0.4548475, 0.4548475, 0.4548475, 0.4548475, 0.4548475]), 'label': 0}, {'sequence': array([0.58192871, 0.95990525, 0.95990423, 0.95990423, 0.95990423]), 'label': 1}, {'sequence': array([0.32663992, 0.32663992, 0.32663992, 0.32663992, 0.32663992]), 'label': 0}, {'sequence': array([0.98921805, 0.98921805, 0.98921805, 0.98921805, 0.98921805]), 'label': 1}, {'sequence': array([0.87573451, 0.87573451, 0.87573451, 0.87573451, 0.87573451]), 'label': 1}, {'sequence': array([0.57433165, 0.57433165, 0.57433165, 0.57433165, 0.57433165]), 'label': 1}, {'sequence': array([0.09155943, 0.09155943, 0.09155943, 0.09155943, 0.09155943]), 'label': 0}, {'sequence': array([0.01540233, 0.01540233, 0.01540233, 0.01540233, 0.01540233]), 'label': 0}, {'sequence': array([0.87809134, 0.87809134, 0.87809134, 0.87809134, 0.87809134]), 'label': 1}, {'sequence': array([0.66366225, 0.66366225, 0.66366225, 0.66366225, 0.66366225]), 'label': 1}, {'sequence': array([0.65841767, 0.65841767, 0.65841767, 0.65841767, 0.65841767]), 'label': 1}, {'sequence': array([0.31151219, 0.31151219, 0.31151219, 0.31151219, 0.31151219]), 'label': 0}, {'sequence': array([0.78389179, 0.78389179, 0.78389179, 0.78389179, 0.78389179]), 'label': 1}, {'sequence': array([0.40312163, 0.40312163, 0.40312163, 0.40312163, 0.40312163]), 'label': 0}, {'sequence': array([0.23359081, 0.23359081, 0.23359081, 0.23359081, 0.33608975]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.93534088, 0.93534088, 0.93534088, 0.93534088, 0.93534088]), 'label': 1}, {'sequence': array([0.91602081, 0.91602081, 0.91602081, 0.91602081, 0.91602081]), 'label': 1}, {'sequence': array([0.06490002, 0.06490002, 0.06490002, 0.06490002, 0.06490002]), 'label': 0}, {'sequence': array([0.51736113, 0.51736113, 0.51736113, 0.51736113, 0.51736113]), 'label': 1}, {'sequence': array([0.07064307, 0.07064307, 0.07064307, 0.07064307, 0.07064307]), 'label': 0}, {'sequence': array([0.5376814, 0.5376814, 0.5376814, 0.5376814, 0.5376814]), 'label': 1}, {'sequence': array([0.12782123, 0.12782123, 0.12782123, 0.12782123, 0.12782123]), 'label': 0}, {'sequence': array([0.05719345, 0.05719345, 0.05719345, 0.05719345, 0.05719345]), 'label': 0}, {'sequence': array([0.76410934, 0.76410934, 0.76410861, 0.7641076 , 0.7641076 ]), 'label': 1}, {'sequence': array([0.25044194, 0.25044194, 0.25044194, 0.25044194, 0.25044194]), 'label': 0}, {'sequence': array([0.39178439, 0.39178439, 0.39178439, 0.39177757, 0.39177757]), 'label': 0}, {'sequence': array([0.70626652, 0.70626652, 0.70626652, 0.70626652, 0.70626652]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.13585188 0.82003324 0.7239992  0.7132081  0.75659005 0.93012557\n"," 0.88819416 0.07630044 0.33741613 0.86833236 0.36146196 0.05262208\n"," 0.27417426 0.52372954 0.46564627 0.78344888 0.56955366 0.41271105\n"," 0.98803075 0.89927611]\n","Iteration 1 - Learning Rate: 0.178610\n","Iteration 1 - Training Accuracy: 52.00%\n","Iteration 1 - Test Accuracy: 46.40%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.13795125  0.7857996   0.60898898  0.85570404  0.67362929  0.890984\n","  0.72965408 -0.02838529  0.2867126   0.95684523  0.45012294 -0.01160213\n","  0.20091094  0.37625208  0.48074518  0.67768877  0.42737857  0.40897624\n","  1.13085176  0.91392295]\n","Iteration 2 - Learning Rate: 0.218448\n","Iteration 2 - Training Accuracy: 76.00%\n","Iteration 2 - Test Accuracy: 60.80%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [-0.02095601  0.86224044  0.45944791  0.90144098  0.62414153  0.78773379\n","  0.63467206 -0.12250716  0.38548618  1.0219083   0.42072408  0.01208791\n","  0.28027566  0.38753871  0.58971133  0.54158983  0.42055181  0.34580762\n","  1.13267393  0.88992192]\n","Iteration 3 - Learning Rate: 0.260604\n","Iteration 3 - Training Accuracy: 74.00%\n","Iteration 3 - Test Accuracy: 66.40%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [-0.18190355  0.9068947   0.36922264  1.03686096  0.67280766  0.83093718\n","  0.50750455 -0.14656172  0.55197195  0.98176864  0.4399388  -0.05920737\n","  0.19292725  0.21708086  0.60490606  0.51473101  0.29754919  0.35209737\n","  1.12167442  0.79779102]\n","Iteration 4 - Learning Rate: 0.311876\n","Iteration 4 - Training Accuracy: 82.00%\n","Iteration 4 - Test Accuracy: 73.60%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [-0.34064617  0.81808284  0.38061955  1.10505224  0.64608998  0.72942731\n","  0.41964045 -0.19226234  0.69969014  0.93922269  0.40988656 -0.07575839\n","  0.26485133  0.17363517  0.57614242  0.37773132  0.1371294   0.28912628\n","  1.16659346  0.75664846]\n","Iteration 5 - Learning Rate: 0.361766\n","Iteration 5 - Training Accuracy: 86.00%\n","Iteration 5 - Test Accuracy: 78.40%\n","\n","\n","Fed_Epoch 1, Client 4:\n","Training data for epoch 1: 50\n","Client Data Structure:\n","[{'sequence': array([0.32858205, 0.32858205, 0.32858205, 0.32858205, 0.32858205]), 'label': 0}, {'sequence': array([0.48776866, 0.48776866, 0.48776866, 0.48776866, 0.48776866]), 'label': 0}, {'sequence': array([0.10882779, 0.37482244, 0.37482244, 0.37482244, 0.37482244]), 'label': 0}, {'sequence': array([0.5303343, 0.5303343, 0.5303343, 0.5303343, 0.5303343]), 'label': 1}, {'sequence': array([0.46075028, 0.46075028, 0.46075028, 0.46075028, 0.46075028]), 'label': 0}, {'sequence': array([0.90770272, 0.90770272, 0.90770272, 0.90770272, 0.90770272]), 'label': 1}, {'sequence': array([0.26770508, 0.26770508, 0.26770508, 0.26770508, 0.26770508]), 'label': 0}, {'sequence': array([0.0917741, 0.0917741, 0.0917741, 0.3875287, 0.3875287]), 'label': 0}, {'sequence': array([0.1198871 , 0.1198871 , 0.21466252, 0.21466252, 0.21466252]), 'label': 0}, {'sequence': array([0.03290536, 0.03290536, 0.03290536, 0.03290536, 0.03290536]), 'label': 0}, {'sequence': array([0.51263386, 0.51263386, 0.51263386, 0.51263386, 0.51263386]), 'label': 0}, {'sequence': array([0.83297283, 0.83297283, 0.83297283, 0.83297283, 0.83297283]), 'label': 1}, {'sequence': array([0.88202271, 0.88202271, 0.88202271, 0.88202271, 0.88202271]), 'label': 1}, {'sequence': array([0.1804075, 0.1804075, 0.1804075, 0.1804075, 0.1804075]), 'label': 0}, {'sequence': array([0.37377419, 0.37377419, 0.37377419, 0.37377419, 0.37377419]), 'label': 0}, {'sequence': array([0.7476202, 0.7476202, 0.7476202, 0.7476202, 0.7476202]), 'label': 1}, {'sequence': array([0.54265029, 0.54265029, 0.54265029, 0.54265029, 0.54265029]), 'label': 1}, {'sequence': array([0.27822802, 0.27822802, 0.27822802, 0.27822802, 0.27822802]), 'label': 0}, {'sequence': array([0.80711801, 0.80711801, 0.80711801, 0.80711801, 0.80711801]), 'label': 1}, {'sequence': array([0.41937943, 0.41937943, 0.41937943, 0.41937943, 0.41937943]), 'label': 0}, {'sequence': array([0.45603758, 0.45603758, 0.45603758, 0.45603758, 0.45603758]), 'label': 0}, {'sequence': array([0.96634882, 0.96634882, 0.96634882, 0.96634882, 0.96634882]), 'label': 1}, {'sequence': array([0.85424054, 0.85424054, 0.85424054, 0.85424054, 0.85424054]), 'label': 1}, {'sequence': array([0.17647533, 0.17647533, 0.17647533, 0.17647533, 0.17647533]), 'label': 0}, {'sequence': array([0.2973743, 0.2973743, 0.2973743, 0.2973743, 0.2973743]), 'label': 0}, {'sequence': array([0.76417739, 0.76417739, 0.76417739, 0.76417739, 0.76417739]), 'label': 1}, {'sequence': array([0.07587823, 0.07587823, 0.07587823, 0.07587823, 0.31180469]), 'label': 0}, {'sequence': array([0.67569284, 0.67569284, 0.67569284, 0.67569284, 0.67569284]), 'label': 1}, {'sequence': array([0.04189404, 0.04189404, 0.04189404, 0.04189404, 0.04189404]), 'label': 0}, {'sequence': array([0.60687312, 0.64935412, 0.64935412, 0.64935412, 0.64935412]), 'label': 1}, {'sequence': array([0.57851972, 0.57851972, 0.57851972, 0.57851972, 0.57851972]), 'label': 1}, {'sequence': array([0.81932304, 0.81932304, 0.81932304, 0.76470311, 0.81932044]), 'label': 1}, {'sequence': array([0.54381834, 0.54381834, 0.54381834, 0.54381834, 0.54381834]), 'label': 1}, {'sequence': array([0.39814157, 0.39814157, 0.39814157, 0.39814157, 0.39814157]), 'label': 0}, {'sequence': array([0.51121984, 0.51121984, 0.51121984, 0.51121824, 0.51121824]), 'label': 0}, {'sequence': array([0.5342414, 0.5342414, 0.5342414, 0.5342414, 0.5342414]), 'label': 1}, {'sequence': array([0.08408558, 0.08408558, 0.08408558, 0.08408558, 0.08408558]), 'label': 0}, {'sequence': array([0.19257586, 0.19257586, 0.19257586, 0.19257586, 0.19257586]), 'label': 0}, {'sequence': array([0.16484044, 0.16484044, 0.16484044, 0.16484044, 0.16484044]), 'label': 0}, {'sequence': array([0.87628669, 0.87628669, 0.87628669, 0.87628669, 0.87628669]), 'label': 1}, {'sequence': array([0.74352106, 0.74352106, 0.74352106, 0.74352106, 0.74352106]), 'label': 1}, {'sequence': array([0.65707054, 0.65707054, 0.65707054, 0.65707054, 0.65707054]), 'label': 1}, {'sequence': array([0.68496257, 0.68496257, 0.68496257, 0.68496257, 0.68496257]), 'label': 1}, {'sequence': array([0.3272837, 0.3272837, 0.3272837, 0.3272837, 0.3272837]), 'label': 0}, {'sequence': array([0.45990271, 0.45990271, 0.45990271, 0.45990271, 0.45990271]), 'label': 0}, {'sequence': array([0.34341474, 0.34341474, 0.34341474, 0.34341474, 0.34341474]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.06420145, 0.06420145, 0.06420145, 0.06420145, 0.06420145]), 'label': 0}, {'sequence': array([0.72534925, 0.72534925, 0.72534925, 0.72534925, 0.72534925]), 'label': 1}, {'sequence': array([0.41739794, 0.41739794, 0.41739794, 0.41739794, 0.41739794]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.85664922 0.59221652 0.77214336 0.43797249 0.26557011 0.90402399\n"," 0.62351063 0.30652981 0.95703931 0.47548944 0.3633828  0.08349746\n"," 0.59374604 0.49448253 0.30211854 0.06153712 0.19033826 0.25302289\n"," 0.88247822 0.52559157]\n","Iteration 1 - Learning Rate: 0.194233\n","Iteration 1 - Training Accuracy: 58.00%\n","Iteration 1 - Test Accuracy: 60.80%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [0.83659978 0.50821828 0.72872844 0.5008001  0.24670634 0.88707956\n"," 0.55257233 0.26217493 1.06412504 0.47070463 0.35958323 0.13679934\n"," 0.52043201 0.52570018 0.20465689 0.07022506 0.14916846 0.29962898\n"," 0.8615714  0.42152204]\n","Iteration 2 - Learning Rate: 0.231986\n","Iteration 2 - Training Accuracy: 62.00%\n","Iteration 2 - Test Accuracy: 64.00%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.81231956  0.49843676  0.74435725  0.57851064  0.31918944  0.8854684\n","  0.49707125  0.3047704   1.13703254  0.53896471  0.32115151  0.16694356\n","  0.44892351  0.52817235  0.14090715 -0.00155285  0.11515341  0.33797571\n","  0.88395252  0.38884029]\n","Iteration 3 - Learning Rate: 0.267747\n","Iteration 3 - Training Accuracy: 68.00%\n","Iteration 3 - Test Accuracy: 72.80%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [0.79013877 0.50891379 0.74007847 0.63945331 0.35853958 0.91899653\n"," 0.51440722 0.30774778 1.21992881 0.58399206 0.29637263 0.21464335\n"," 0.41311292 0.49030286 0.14745    0.05124174 0.05530101 0.39706686\n"," 0.88624159 0.36201358]\n","Iteration 4 - Learning Rate: 0.302082\n","Iteration 4 - Training Accuracy: 76.00%\n","Iteration 4 - Test Accuracy: 73.60%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.69626641  0.40151336  0.67809214  0.73274593  0.43275444  0.85721345\n","  0.57074316  0.23286878  1.25575832  0.69082004  0.37221298  0.29498435\n","  0.39783957  0.4464568   0.09306043  0.06492    -0.04802259  0.53367688\n","  0.9080702   0.30918413]\n","Iteration 5 - Learning Rate: 0.337700\n","Iteration 5 - Training Accuracy: 80.00%\n","Iteration 5 - Test Accuracy: 75.20%\n","\n","\n","Fed_Epoch 1, Client 5:\n","Training data for epoch 1: 50\n","Client Data Structure:\n","[{'sequence': array([0.25037461, 0.25037461, 0.25037461, 0.25037461, 0.25037461]), 'label': 0}, {'sequence': array([0.07282784, 0.07282784, 0.07282784, 0.07282784, 0.07282784]), 'label': 0}, {'sequence': array([0.66607017, 0.66607017, 0.66607017, 0.6660698 , 0.5702112 ]), 'label': 1}, {'sequence': array([0.82220921, 0.82220921, 0.82220921, 0.82220921, 0.82220921]), 'label': 1}, {'sequence': array([0.53354674, 0.53354674, 0.53354674, 0.53354674, 0.53354674]), 'label': 1}, {'sequence': array([0.39817738, 0.39817738, 0.39817738, 0.39817738, 0.39817738]), 'label': 0}, {'sequence': array([0.01668626, 0.01668626, 0.01668626, 0.01668626, 0.01668626]), 'label': 0}, {'sequence': array([0.21143871, 0.21143871, 0.21143871, 0.21143871, 0.21143871]), 'label': 0}, {'sequence': array([0.70382455, 0.70382455, 0.70382302, 0.70382295, 0.70382295]), 'label': 1}, {'sequence': array([0.82475685, 0.82475685, 0.82475685, 0.82475685, 0.82475685]), 'label': 1}, {'sequence': array([0.73487865, 0.73487865, 0.73487865, 0.73487865, 0.73487865]), 'label': 1}, {'sequence': array([0.05709533, 0.05709533, 0.05709533, 0.05709533, 0.05709533]), 'label': 0}, {'sequence': array([0.08324091, 0.08324091, 0.08324091, 0.08324091, 0.08324091]), 'label': 0}, {'sequence': array([0.44017549, 0.44017549, 0.44017549, 0.44017549, 0.44017549]), 'label': 0}, {'sequence': array([0.01108946, 0.01108946, 0.01108946, 0.01108946, 0.01108946]), 'label': 0}, {'sequence': array([0.40207316, 0.40207316, 0.40207316, 0.40207316, 0.40207316]), 'label': 0}, {'sequence': array([0.8908871, 0.8908871, 0.8908871, 0.8908871, 0.8908871]), 'label': 1}, {'sequence': array([0.37866583, 0.37866583, 0.37866583, 0.37866583, 0.37866583]), 'label': 0}, {'sequence': array([0.34387248, 0.34387248, 0.34387248, 0.34387248, 0.34387248]), 'label': 0}, {'sequence': array([0.6070409, 0.6070409, 0.6070409, 0.6070409, 0.6070409]), 'label': 1}, {'sequence': array([0.61744099, 0.61744099, 0.61744099, 0.61744099, 0.61744099]), 'label': 1}, {'sequence': array([0.93796107, 0.93796107, 0.93796107, 0.93796107, 0.93796107]), 'label': 1}, {'sequence': array([0.57510074, 0.57510074, 0.57510074, 0.57510074, 0.57510074]), 'label': 1}, {'sequence': array([0.7844728, 0.7844728, 0.7844728, 0.7844728, 0.7844728]), 'label': 1}, {'sequence': array([0.6055739, 0.6055739, 0.6055739, 0.6055739, 0.6055739]), 'label': 1}, {'sequence': array([0.44893037, 0.44893037, 0.44893037, 0.44893037, 0.44893037]), 'label': 0}, {'sequence': array([0.41865992, 0.41865992, 0.41865992, 0.41865992, 0.41865992]), 'label': 0}, {'sequence': array([0.68564991, 0.68564991, 0.68564991, 0.68564991, 0.68564991]), 'label': 1}, {'sequence': array([0.99296939, 0.99296939, 0.99296939, 0.99296939, 0.99296939]), 'label': 1}, {'sequence': array([0.06626164, 0.06626164, 0.06626164, 0.06626164, 0.06626164]), 'label': 0}, {'sequence': array([0.58484524, 0.58484524, 0.58484524, 0.58484524, 0.58484524]), 'label': 1}, {'sequence': array([0.82312005, 0.82312005, 0.82312005, 0.8231194 , 0.8231194 ]), 'label': 1}, {'sequence': array([0.39643947, 0.39643947, 0.39643947, 0.39643947, 0.39643947]), 'label': 0}, {'sequence': array([0.34191622, 0.34191622, 0.34191622, 0.34191622, 0.34191622]), 'label': 0}, {'sequence': array([0.94530752, 0.94530752, 0.94530752, 0.94530752, 0.94530752]), 'label': 1}, {'sequence': array([0.33424212, 0.33424212, 0.33424212, 0.33424212, 0.33424212]), 'label': 0}, {'sequence': array([0.45566159, 0.45566159, 0.45566159, 0.45566159, 0.45566159]), 'label': 0}, {'sequence': array([0.82053755, 0.82053755, 0.82053755, 0.82053755, 0.82053755]), 'label': 1}, {'sequence': array([0.89105074, 0.89105074, 0.89105074, 0.89105074, 0.89105074]), 'label': 1}, {'sequence': array([0.28829742, 0.28829742, 0.28829742, 0.28829742, 0.28829742]), 'label': 0}, {'sequence': array([0.48748985, 0.48748985, 0.48748985, 0.48748985, 0.48748985]), 'label': 0}, {'sequence': array([0.04704303, 0.04704303, 0.04704303, 0.04704303, 0.04704303]), 'label': 0}, {'sequence': array([0.08394339, 0.21058077, 0.21058077, 0.21058077, 0.21058077]), 'label': 0}, {'sequence': array([0.93339969, 0.93339969, 0.93339969, 0.93339969, 0.93339969]), 'label': 1}, {'sequence': array([0.79445632, 0.79445632, 0.79445632, 0.79445632, 0.79445632]), 'label': 1}, {'sequence': array([0.69927186, 0.69927186, 0.69927186, 0.69927136, 0.69927136]), 'label': 1}, {'sequence': array([0.01722241, 0.01722241, 0.01722241, 0.01722241, 0.01722241]), 'label': 0}, {'sequence': array([0.03339506, 0.03339506, 0.03339506, 0.03339506, 0.03339506]), 'label': 0}, {'sequence': array([0.22104174, 0.22104174, 0.22104174, 0.22104174, 0.22104174]), 'label': 0}, {'sequence': array([0.15489794, 0.15489794, 0.15489794, 0.15489794, 0.15489794]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.68892961 0.51170827 0.40716712 0.80633311 0.68298641 0.33630087\n"," 0.61638677 0.71075384 0.40737095 0.08080487 0.35178565 0.43004544\n"," 0.75513668 0.79774807 0.37269619 0.63667062 0.62481627 0.63952532\n"," 0.53936443 0.70308751]\n","Iteration 1 - Learning Rate: 0.182621\n","Iteration 1 - Training Accuracy: 56.00%\n","Iteration 1 - Test Accuracy: 44.00%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [0.71658946 0.64356673 0.31767242 0.86943089 0.50837789 0.37907626\n"," 0.64451872 0.7184878  0.54627216 0.11524096 0.38250349 0.38989999\n"," 0.73842903 0.7200369  0.32885456 0.57296302 0.58084302 0.6507186\n"," 0.6039827  0.73488137]\n","Iteration 2 - Learning Rate: 0.220096\n","Iteration 2 - Training Accuracy: 60.00%\n","Iteration 2 - Test Accuracy: 47.20%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [0.75160363 0.6900707  0.15650357 0.92102928 0.2428157  0.40991453\n"," 0.6744497  0.61386822 0.55855922 0.201941   0.40555952 0.57908382\n"," 0.85334262 0.70551098 0.34090989 0.37108992 0.45592067 0.63174196\n"," 0.59710509 0.80821596]\n","Iteration 3 - Learning Rate: 0.269370\n","Iteration 3 - Training Accuracy: 64.00%\n","Iteration 3 - Test Accuracy: 60.00%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [0.76000828 0.78999969 0.05148022 0.94458049 0.03537572 0.3600722\n"," 0.80574916 0.68946222 0.47797997 0.28584053 0.49284348 0.5680477\n"," 0.90016807 0.64849985 0.37779981 0.29151234 0.32533051 0.60735825\n"," 0.52812005 0.74126003]\n","Iteration 4 - Learning Rate: 0.322521\n","Iteration 4 - Training Accuracy: 64.00%\n","Iteration 4 - Test Accuracy: 67.20%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.84116575  0.72138771 -0.02846409  1.03414659 -0.11314976  0.46549764\n","  0.83260758  0.63989541  0.50897853  0.19915441  0.6049785   0.56158198\n","  0.94304061  0.56168852  0.51309517  0.31662468  0.14419955  0.60607018\n","  0.40893379  0.74175824]\n","Iteration 5 - Learning Rate: 0.372694\n","Iteration 5 - Training Accuracy: 76.00%\n","Iteration 5 - Test Accuracy: 72.80%\n","\n","\n","Fed_Epoch 1, Client 6:\n","Training data for epoch 1: 50\n","Client Data Structure:\n","[{'sequence': array([0.68806529, 0.68806529, 0.68806514, 0.68806514, 0.68806514]), 'label': 1}, {'sequence': array([0.49888558, 0.49888558, 0.49888558, 0.49888558, 0.49888558]), 'label': 0}, {'sequence': array([0.12955131, 0.12955131, 0.12955131, 0.12955131, 0.12955131]), 'label': 0}, {'sequence': array([0.88303001, 0.88303001, 0.88303001, 0.88303001, 0.88303001]), 'label': 1}, {'sequence': array([0.01359695, 0.01359695, 0.01359695, 0.01359695, 0.01359695]), 'label': 0}, {'sequence': array([0.61939697, 0.61939697, 0.61939697, 0.61939697, 0.61939697]), 'label': 1}, {'sequence': array([0.29501378, 0.29501378, 0.29501378, 0.29501378, 0.29501378]), 'label': 0}, {'sequence': array([0.22001241, 0.22001241, 0.22001241, 0.22001241, 0.22001241]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.41296296, 0.41296296, 0.41296296, 0.47827085, 0.47827085]), 'label': 0}, {'sequence': array([0.67083664, 0.67083664, 0.67083664, 0.67083664, 0.67083664]), 'label': 1}, {'sequence': array([0.57903522, 0.57903522, 0.57903522, 0.57903522, 0.57903522]), 'label': 1}, {'sequence': array([0.95081851, 0.95081851, 0.95081851, 0.95081851, 0.95081808]), 'label': 1}, {'sequence': array([0.35786397, 0.35786397, 0.35786397, 0.35786397, 0.35786397]), 'label': 0}, {'sequence': array([0.51435451, 0.51435451, 0.51435451, 0.51435451, 0.51435451]), 'label': 1}, {'sequence': array([0.7297551, 0.7297551, 0.7297551, 0.7297551, 0.7297551]), 'label': 1}, {'sequence': array([0.10283783, 0.10283783, 0.10283783, 0.10283783, 0.10283783]), 'label': 0}, {'sequence': array([0.45350893, 0.45350893, 0.45350893, 0.45350893, 0.36493611]), 'label': 0}, {'sequence': array([0.66965229, 0.66965229, 0.66965229, 0.66965229, 0.66965229]), 'label': 1}, {'sequence': array([0.58807812, 0.58807812, 0.58807812, 0.58807812, 0.58807812]), 'label': 1}, {'sequence': array([0.45758191, 0.45758191, 0.45758191, 0.45758191, 0.45758191]), 'label': 0}, {'sequence': array([0.99967655, 0.99967655, 0.99967655, 0.99967655, 0.99967655]), 'label': 1}, {'sequence': array([0.72076634, 0.72076634, 0.72076634, 0.72076634, 0.72076634]), 'label': 1}, {'sequence': array([0.61941081, 0.61941081, 0.61941081, 0.61941081, 0.61941081]), 'label': 1}, {'sequence': array([0.8392874, 0.8392874, 0.8392874, 0.8392874, 0.8392874]), 'label': 1}, {'sequence': array([0.80916363, 0.80916363, 0.80916363, 0.80916363, 0.80916363]), 'label': 1}, {'sequence': array([0.21998436, 0.21998436, 0.21998436, 0.21998436, 0.21998436]), 'label': 0}, {'sequence': array([0.07711252, 0.07711252, 0.07711252, 0.07711252, 0.07711252]), 'label': 0}, {'sequence': array([0.52178655, 0.52178655, 0.52178655, 0.52178655, 0.52178655]), 'label': 1}, {'sequence': array([0.76496415, 0.76496415, 0.76496415, 0.76496415, 0.76496415]), 'label': 1}, {'sequence': array([0.6469873, 0.6469873, 0.6469873, 0.6469873, 0.6469873]), 'label': 1}, {'sequence': array([0.01101887, 0.01101887, 0.01101887, 0.01101887, 0.01101887]), 'label': 0}, {'sequence': array([0.24472846, 0.24472846, 0.24472846, 0.24472846, 0.24472846]), 'label': 0}, {'sequence': array([0.23750638, 0.23750638, 0.23750638, 0.23750638, 0.23750638]), 'label': 0}, {'sequence': array([0.42104544, 0.42104544, 0.42104544, 0.42104544, 0.42104544]), 'label': 0}, {'sequence': array([0.0682774, 0.0682774, 0.0682774, 0.0682774, 0.0682774]), 'label': 0}, {'sequence': array([0.1259033, 0.1259033, 0.1259033, 0.1259033, 0.1259033]), 'label': 0}, {'sequence': array([0.46856701, 0.46856701, 0.46856701, 0.46856701, 0.46856701]), 'label': 0}, {'sequence': array([0.19523823, 0.19523823, 0.19523823, 0.19523823, 0.19523823]), 'label': 0}, {'sequence': array([0.67360279, 0.67360279, 0.67360279, 0.67360279, 0.67360279]), 'label': 1}, {'sequence': array([0.86390344, 0.86390344, 0.86390344, 0.86390344, 0.86390344]), 'label': 1}, {'sequence': array([0.0071612, 0.0071612, 0.0071612, 0.0071612, 0.0071612]), 'label': 0}, {'sequence': array([0.6987718 , 0.69877158, 0.69877158, 0.69877158, 0.69877158]), 'label': 1}, {'sequence': array([0.7388759 , 0.7388759 , 0.54348098, 0.73887213, 0.73887213]), 'label': 1}, {'sequence': array([0.14166227, 0.14166227, 0.14166227, 0.14166227, 0.14166227]), 'label': 0}, {'sequence': array([0.67530721, 0.67530721, 0.67530721, 0.67530721, 0.67530721]), 'label': 1}, {'sequence': array([0.23901374, 0.23901374, 0.23901374, 0.23901374, 0.23901374]), 'label': 0}, {'sequence': array([0.30630327, 0.30630327, 0.30630327, 0.30630327, 0.30630327]), 'label': 0}, {'sequence': array([0.71561308, 0.71561308, 0.71561308, 0.71561308, 0.71561308]), 'label': 1}, {'sequence': array([0.71792642, 0.71792642, 0.71792642, 0.71792642, 0.71792642]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.86593161 0.88013211 0.15761005 0.05236931 0.46528098 0.45500664\n"," 0.38666883 0.4779039  0.89260029 0.55427388 0.32374428 0.47654294\n"," 0.83922203 0.1757815  0.0607347  0.38114514 1.06292338 0.73212926\n"," 0.51398044 0.1846229 ]\n","Iteration 1 - Learning Rate: 0.191478\n","Iteration 1 - Training Accuracy: 50.00%\n","Iteration 1 - Test Accuracy: 52.00%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [0.87648638 0.83863361 0.12745386 0.03709816 0.46423573 0.45361761\n"," 0.28370223 0.4911799  0.90962971 0.48099987 0.25749844 0.52191983\n"," 0.86658    0.15390959 0.02650224 0.40637189 1.06690124 0.76373678\n"," 0.58481801 0.25176395]\n","Iteration 2 - Learning Rate: 0.225386\n","Iteration 2 - Training Accuracy: 44.00%\n","Iteration 2 - Test Accuracy: 53.60%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.79366309  0.68554759  0.10826705  0.02921106  0.33911744  0.47613202\n","  0.2096428   0.54900298  0.90103374  0.43214437  0.22049959  0.52464955\n","  0.82901357  0.06963736 -0.05272742  0.41905102  1.02698003  0.75297758\n","  0.79251014  0.2930703 ]\n","Iteration 3 - Learning Rate: 0.265600\n","Iteration 3 - Training Accuracy: 60.00%\n","Iteration 3 - Test Accuracy: 69.60%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.75803949  0.53539731  0.13676639  0.12389492  0.22177451  0.48993107\n","  0.13480677  0.50376189  0.77119877  0.48885011  0.16785474  0.55114748\n","  0.92182791  0.11310391 -0.16838233  0.49866372  0.8934087   0.63091772\n","  0.88803627  0.29921763]\n","Iteration 4 - Learning Rate: 0.309526\n","Iteration 4 - Training Accuracy: 62.00%\n","Iteration 4 - Test Accuracy: 71.20%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.75851592  0.45424119  0.10265404  0.12971261  0.1959568   0.49353345\n","  0.12283229  0.51671689  0.76747064  0.44582283  0.11512135  0.55681545\n","  0.92702837  0.13548266 -0.1615481   0.59365479  0.83886359  0.65309108\n","  0.99298995  0.382767  ]\n","Iteration 5 - Learning Rate: 0.350670\n","Iteration 5 - Training Accuracy: 82.00%\n","Iteration 5 - Test Accuracy: 84.80%\n","\n","\n","Fed_Epoch 1, Client 7:\n","Training data for epoch 1: 50\n","Client Data Structure:\n","[{'sequence': array([0.0282989, 0.0282989, 0.0282989, 0.0282989, 0.0282989]), 'label': 0}, {'sequence': array([0.44947899, 0.44947899, 0.44947899, 0.44947899, 0.44947899]), 'label': 0}, {'sequence': array([0.68196698, 0.68196698, 0.68196698, 0.68196698, 0.68196698]), 'label': 1}, {'sequence': array([0.61024471, 0.61024471, 0.61024471, 0.61024471, 0.61024471]), 'label': 1}, {'sequence': array([0.47871265, 0.47871265, 0.47871265, 0.47871265, 0.47871265]), 'label': 0}, {'sequence': array([0.44120656, 0.44120656, 0.44120656, 0.44120656, 0.44120656]), 'label': 0}, {'sequence': array([0.69510278, 0.80951331, 0.80951281, 0.80951281, 0.80951281]), 'label': 1}, {'sequence': array([0.37440645, 0.37440645, 0.37440645, 0.37440645, 0.37440645]), 'label': 0}, {'sequence': array([0.76034922, 0.76034922, 0.76034922, 0.76034922, 0.76034922]), 'label': 1}, {'sequence': array([0.21779698, 0.21779698, 0.21779698, 0.21779698, 0.21779698]), 'label': 0}, {'sequence': array([0.98843526, 0.98843526, 0.98843526, 0.98843526, 0.98843526]), 'label': 1}, {'sequence': array([0.37836768, 0.37836768, 0.37836768, 0.37836768, 0.37836768]), 'label': 0}, {'sequence': array([0.6236728 , 0.6236728 , 0.62367266, 0.62367266, 0.62367266]), 'label': 1}, {'sequence': array([0.19586563, 0.19586563, 0.19586563, 0.19586563, 0.19586563]), 'label': 0}, {'sequence': array([0.8887498, 0.8887498, 0.8887498, 0.5319635, 0.5319635]), 'label': 1}, {'sequence': array([0.96348926, 0.96348926, 0.96348926, 0.96348926, 0.96348926]), 'label': 1}, {'sequence': array([0.98230724, 0.98230724, 0.98230724, 0.98230724, 0.98230724]), 'label': 1}, {'sequence': array([0.94268885, 0.94268885, 0.94268885, 0.94268885, 0.94268885]), 'label': 1}, {'sequence': array([0.50373352, 0.50373352, 0.50373352, 0.50373352, 0.50373352]), 'label': 0}, {'sequence': array([0.6135189, 0.6135189, 0.6135189, 0.6135189, 0.6135189]), 'label': 1}, {'sequence': array([0.00974994, 0.00974994, 0.00974994, 0.00974994, 0.00974994]), 'label': 0}, {'sequence': array([0.6122583 , 0.6122583 , 0.6122583 , 0.6122583 , 0.61121687]), 'label': 1}, {'sequence': array([0.39848162, 0.39848162, 0.39848162, 0.39848162, 0.39848162]), 'label': 0}, {'sequence': array([0.24387857, 0.24387857, 0.24387857, 0.24387857, 0.24387857]), 'label': 0}, {'sequence': array([0.18211794, 0.18211794, 0.18211794, 0.18211794, 0.18211794]), 'label': 0}, {'sequence': array([0.71406491, 0.71406491, 0.71406491, 0.71406491, 0.71406491]), 'label': 1}, {'sequence': array([0.65673745, 0.65673745, 0.65673745, 0.65673745, 0.65673745]), 'label': 1}, {'sequence': array([0.74070316, 0.74070316, 0.74070316, 0.55452587, 0.740702  ]), 'label': 1}, {'sequence': array([0.72719231, 0.72719195, 0.72719151, 0.72719151, 0.72719151]), 'label': 1}, {'sequence': array([0.16378987, 0.16378987, 0.16378987, 0.16378987, 0.16378987]), 'label': 0}, {'sequence': array([0.06195319, 0.06195319, 0.06195319, 0.06195319, 0.06195319]), 'label': 0}, {'sequence': array([0.31590674, 0.31590674, 0.31590674, 0.31590674, 0.31590674]), 'label': 0}, {'sequence': array([0.93048411, 0.93048411, 0.93048411, 0.93048411, 0.93048411]), 'label': 1}, {'sequence': array([0.48690906, 0.48690906, 0.48690906, 0.48690906, 0.48690906]), 'label': 0}, {'sequence': array([0.74526512, 0.74526512, 0.74526512, 0.74526512, 0.74526512]), 'label': 1}, {'sequence': array([0.04696882, 0.04696882, 0.04696882, 0.04696882, 0.04696882]), 'label': 0}, {'sequence': array([0.90959702, 0.90959702, 0.90959702, 0.90959702, 0.90959702]), 'label': 1}, {'sequence': array([0.4165998, 0.4165998, 0.4165998, 0.4165998, 0.4165998]), 'label': 0}, {'sequence': array([0.68645443, 0.68645443, 0.68645443, 0.68645443, 0.68645443]), 'label': 1}, {'sequence': array([0.93109708, 0.93109708, 0.93109708, 0.93109708, 0.93109708]), 'label': 1}, {'sequence': array([0.36845938, 0.36845938, 0.36845938, 0.36845917, 0.36845917]), 'label': 0}, {'sequence': array([0.6096958, 0.6096958, 0.6096958, 0.6096958, 0.6096958]), 'label': 1}, {'sequence': array([0.26796215, 0.26796215, 0.26796215, 0.26796215, 0.26796215]), 'label': 0}, {'sequence': array([0.8422085 , 0.8422085 , 0.51800179, 0.8422064 , 0.8422064 ]), 'label': 1}, {'sequence': array([0.19391488, 0.19391488, 0.19391488, 0.19391488, 0.19391488]), 'label': 0}, {'sequence': array([0.29569612, 0.29569612, 0.29569612, 0.29569612, 0.29569612]), 'label': 0}, {'sequence': array([0.87103087, 0.87103087, 0.87103087, 0.87103087, 0.87103087]), 'label': 1}, {'sequence': array([0.45930438, 0.45930438, 0.45930438, 0.45930438, 0.45930438]), 'label': 0}, {'sequence': array([0.86727481, 0.86727481, 0.86727481, 0.86727481, 0.86727481]), 'label': 1}, {'sequence': array([0.34232076, 0.34232076, 0.34232076, 0.34232076, 0.34232076]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.47882152  0.89483682  0.73441396  0.58007852  0.63315593  0.98246447\n","  0.53644194  0.43432196  0.43979973  0.53442037  0.63640017  0.25329536\n","  0.42322712 -0.01856266  0.96954306 -0.11330747  1.0772436   0.88713061\n","  0.57620252  0.41273344]\n","Iteration 1 - Learning Rate: 0.188457\n","Iteration 1 - Training Accuracy: 44.00%\n","Iteration 1 - Test Accuracy: 48.80%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.36546815  0.90397256  0.83899781  0.75525126  0.45947887  1.02681442\n","  0.54590055  0.37097445  0.47586215  0.48675918  0.53471974  0.2948154\n","  0.48222587 -0.07421954  0.88642685 -0.32974654  1.11325385  0.83432131\n","  0.69389202  0.55513924]\n","Iteration 2 - Learning Rate: 0.236504\n","Iteration 2 - Training Accuracy: 54.00%\n","Iteration 2 - Test Accuracy: 60.00%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.32060523  0.98557462  0.90935102  0.83112467  0.41212793  1.02527504\n","  0.55503933  0.32367151  0.4478319   0.46214452  0.52463164  0.30191196\n","  0.38085857 -0.12720631  0.92660705 -0.44159467  1.08250723  0.76205279\n","  0.69446998  0.58023874]\n","Iteration 3 - Learning Rate: 0.283417\n","Iteration 3 - Training Accuracy: 56.00%\n","Iteration 3 - Test Accuracy: 60.80%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.24830868  0.98188303  0.97268986  0.83338982  0.39994711  1.07488457\n","  0.57487626  0.35067509  0.44572754  0.54014468  0.55580107  0.31331004\n","  0.33768982 -0.19902732  0.92662144 -0.51584827  1.12448349  0.69359512\n","  0.66769226  0.62588937]\n","Iteration 4 - Learning Rate: 0.322269\n","Iteration 4 - Training Accuracy: 58.00%\n","Iteration 4 - Test Accuracy: 63.20%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.29266221  1.04511706  0.97513782  0.88823476  0.399656    1.01074322\n","  0.64519578  0.3092992   0.42470911  0.55146085  0.48803207  0.36394477\n","  0.36351133 -0.25248761  0.98954333 -0.58552572  1.09648518  0.62759905\n","  0.69396918  0.60619923]\n","Iteration 5 - Learning Rate: 0.354259\n","Iteration 5 - Training Accuracy: 58.00%\n","Iteration 5 - Test Accuracy: 64.80%\n","\n","\n","Fed_Epoch 1, Client 8:\n","Training data for epoch 1: 50\n","Client Data Structure:\n","[{'sequence': array([0.78557077, 0.78557077, 0.78557077, 0.78557077, 0.78557077]), 'label': 1}, {'sequence': array([0.53630369, 0.53630369, 0.53630369, 0.53630369, 0.53630369]), 'label': 1}, {'sequence': array([0.57413648, 0.57413648, 0.57413648, 0.57413648, 0.57413648]), 'label': 1}, {'sequence': array([0.89229982, 0.89229982, 0.89229982, 0.89229982, 0.89229982]), 'label': 1}, {'sequence': array([0.10944584, 0.10944584, 0.10944584, 0.10944584, 0.10944584]), 'label': 0}, {'sequence': array([0.43324185, 0.43324185, 0.43324185, 0.43324185, 0.43324185]), 'label': 0}, {'sequence': array([0.54805968, 0.54805968, 0.54805968, 0.54805968, 0.54805968]), 'label': 1}, {'sequence': array([0.69061648, 0.69061648, 0.69061648, 0.69061648, 0.69061648]), 'label': 1}, {'sequence': array([0.63244914, 0.63244914, 0.63244914, 0.63244914, 0.63244914]), 'label': 1}, {'sequence': array([0.79599318, 0.79599318, 0.79599318, 0.79599318, 0.79599318]), 'label': 1}, {'sequence': array([0.50490838, 0.50490838, 0.50490838, 0.50490838, 0.50490838]), 'label': 0}, {'sequence': array([0.91906627, 0.91906627, 0.91906627, 0.91906627, 0.91906627]), 'label': 1}, {'sequence': array([0.73957266, 0.73957266, 0.73957266, 0.73957266, 0.73957266]), 'label': 1}, {'sequence': array([0.36829226, 0.36829226, 0.36829226, 0.36829226, 0.36829226]), 'label': 0}, {'sequence': array([0.54425028, 0.54425028, 0.54425028, 0.54425028, 0.54425028]), 'label': 1}, {'sequence': array([0.01332945, 0.01332945, 0.01332945, 0.01332945, 0.01332945]), 'label': 0}, {'sequence': array([0.61224432, 0.61224432, 0.61224432, 0.61224432, 0.61224432]), 'label': 1}, {'sequence': array([0.99489957, 0.57887289, 0.51316871, 0.70382034, 0.59574721]), 'label': 1}, {'sequence': array([0.00626921, 0.00626921, 0.00626921, 0.00626921, 0.00626921]), 'label': 0}, {'sequence': array([0.69328204, 0.69328204, 0.69328204, 0.69328204, 0.69328204]), 'label': 1}, {'sequence': array([0.44853547, 0.44853547, 0.44853547, 0.44853547, 0.44853547]), 'label': 0}, {'sequence': array([0.19477745, 0.19477745, 0.19477745, 0.19477745, 0.19477745]), 'label': 0}, {'sequence': array([0.58281926, 0.58281926, 0.58281926, 0.58281926, 0.58281926]), 'label': 1}, {'sequence': array([0.27530736, 0.27530736, 0.27530736, 0.27530736, 0.27530736]), 'label': 0}, {'sequence': array([0.91581274, 0.91581274, 0.91581274, 0.91581238, 0.91581238]), 'label': 1}, {'sequence': array([0.18492221, 0.18492221, 0.18492221, 0.18492221, 0.18492221]), 'label': 0}, {'sequence': array([0.95202316, 0.56180745, 0.95202076, 0.95202026, 0.95202026]), 'label': 1}, {'sequence': array([0.08847092, 0.08847092, 0.08847092, 0.08847092, 0.08847092]), 'label': 0}, {'sequence': array([0.01275264, 0.01275264, 0.01275264, 0.01275264, 0.01275264]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.42487332, 0.42487332, 0.42487332, 0.42487332, 0.42487332]), 'label': 0}, {'sequence': array([0.00540547, 0.00540547, 0.00540547, 0.00540547, 0.00540547]), 'label': 0}, {'sequence': array([0.28750529, 0.28750529, 0.28750529, 0.28750529, 0.28750529]), 'label': 0}, {'sequence': array([0.08257053, 0.08257053, 0.08257053, 0.08257053, 0.08257053]), 'label': 0}, {'sequence': array([0.35492222, 0.35492222, 0.35492222, 0.35492222, 0.35492222]), 'label': 0}, {'sequence': array([0.4066136, 0.4066136, 0.4066136, 0.4066136, 0.4066136]), 'label': 0}, {'sequence': array([0.45959927, 0.45959927, 0.45959927, 0.45959927, 0.45959927]), 'label': 0}, {'sequence': array([0.71260219, 0.71260219, 0.71260219, 0.71260219, 0.71260219]), 'label': 1}, {'sequence': array([0.94348055, 0.94348055, 0.94348055, 0.94348055, 0.6182832 ]), 'label': 1}, {'sequence': array([0.62553753, 0.62553753, 0.62553753, 0.62553753, 0.62553753]), 'label': 1}, {'sequence': array([0.15711743, 0.15711743, 0.15711743, 0.15711743, 0.15711743]), 'label': 0}, {'sequence': array([0.28012623, 0.28012623, 0.28012623, 0.28012623, 0.28012623]), 'label': 0}, {'sequence': array([0.434536  , 0.434536  , 0.434536  , 0.13722525, 0.13722525]), 'label': 0}, {'sequence': array([0.97211391, 0.97211391, 0.97211391, 0.97211391, 0.97211391]), 'label': 1}, {'sequence': array([0.78811812, 0.78811812, 0.78811812, 0.78811812, 0.78811812]), 'label': 1}, {'sequence': array([0.82388935, 0.82388935, 0.82388935, 0.82388935, 0.82388935]), 'label': 1}, {'sequence': array([0.38500048, 0.38500048, 0.38500048, 0.38500048, 0.38500048]), 'label': 0}, {'sequence': array([0.56411412, 0.56411412, 0.56411412, 0.56411412, 0.56411412]), 'label': 1}, {'sequence': array([0.39523715, 0.39523715, 0.39523715, 0.39523715, 0.39523715]), 'label': 0}, {'sequence': array([0.0321849, 0.0321849, 0.0321849, 0.0321849, 0.0321849]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.23026217  0.14483379  0.20722158  0.36122883  0.55299063  0.3749767\n","  0.69338044  0.50348794 -0.05871778  0.13806819  0.64081104  0.22157198\n","  0.77062922  0.28331411  0.7802432   0.26133472  0.86586189  0.426474\n","  0.74339023 -0.05970816]\n","Iteration 1 - Learning Rate: 0.188574\n","Iteration 1 - Training Accuracy: 52.00%\n","Iteration 1 - Test Accuracy: 40.00%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.23706236  0.06693063  0.24354851  0.29478225  0.40784774  0.41070271\n","  0.56155841  0.56329639 -0.02313428  0.15568278  0.63862537  0.19375915\n","  0.88268703  0.20794861  0.68085246  0.23571283  0.9336021   0.497709\n","  0.72448945  0.05885916]\n","Iteration 2 - Learning Rate: 0.230954\n","Iteration 2 - Training Accuracy: 64.00%\n","Iteration 2 - Test Accuracy: 46.40%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [0.29536281 0.02310582 0.22014909 0.194814   0.25514014 0.36846577\n"," 0.4862904  0.53140777 0.01500556 0.12885601 0.69015638 0.28088232\n"," 0.94039068 0.17161723 0.6735754  0.27401625 1.04539622 0.64095889\n"," 0.68325832 0.11666949]\n","Iteration 3 - Learning Rate: 0.275228\n","Iteration 3 - Training Accuracy: 64.00%\n","Iteration 3 - Test Accuracy: 52.00%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.31380185 -0.01084153  0.25394033  0.1810771   0.17966445  0.35049683\n","  0.36584083  0.46769003 -0.02992105  0.03902652  0.71174899  0.31272168\n","  1.10455918  0.09051786  0.63833196  0.43106131  0.99495096  0.79958984\n","  0.73920851  0.21738944]\n","Iteration 4 - Learning Rate: 0.321636\n","Iteration 4 - Training Accuracy: 68.00%\n","Iteration 4 - Test Accuracy: 57.60%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.28951194 -0.06898303  0.28202509  0.15215829  0.11906475  0.4083765\n","  0.32648735  0.42371301 -0.11417313 -0.02775956  0.7820629   0.30283948\n","  1.07087065  0.04926791  0.52238879  0.45291205  1.03261131  0.88061259\n","  0.73625392  0.30553499]\n","Iteration 5 - Learning Rate: 0.363765\n","Iteration 5 - Training Accuracy: 70.00%\n","Iteration 5 - Test Accuracy: 58.40%\n","Global Loss for Round 1: 0.43097006208481764\n","Time for Round 1: 1160.90 s\n","Best client for epoch 1 is Client 3 with test accuracy 0.86\n","Global Model Accuracy in Epoch 1: 0.80\n","----------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  20%|██        | 2/10 [39:09<2:36:29, 1173.73s/it]"]},{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","File saved to /content/drive/MyDrive/DQFL_Genome_IID_Global_2504_2025_.csv\n","\n","\n","Fed_Epoch: 2\n","\n","\n","Fed_Epoch 2, Client 1:\n","Training data for epoch 2: 50\n","Client Data Structure:\n","[{'sequence': array([0.19589353, 0.19589353, 0.19589353, 0.19589353, 0.19589353]), 'label': 0}, {'sequence': array([0.47142621, 0.47142621, 0.47142621, 0.47142621, 0.47142621]), 'label': 0}, {'sequence': array([0.8776149, 0.8776149, 0.8776149, 0.8776149, 0.8776149]), 'label': 1}, {'sequence': array([0.60071241, 0.60071241, 0.60071241, 0.60071241, 0.60071241]), 'label': 1}, {'sequence': array([0.10405342, 0.10405342, 0.10405342, 0.10405342, 0.10405342]), 'label': 0}, {'sequence': array([0.3181284, 0.3181284, 0.3181284, 0.3181284, 0.3181284]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.78787041, 0.78787041, 0.78787041, 0.78787041, 0.78787041]), 'label': 1}, {'sequence': array([0.56151096, 0.56151096, 0.56151096, 0.56151096, 0.56151096]), 'label': 1}, {'sequence': array([0.39390343, 0.39390343, 0.39390343, 0.39390343, 0.39390343]), 'label': 0}, {'sequence': array([0.94231474, 0.94231474, 0.94231474, 0.94231474, 0.94231474]), 'label': 1}, {'sequence': array([0.46933754, 0.46933754, 0.46933754, 0.46933754, 0.46933754]), 'label': 0}, {'sequence': array([0.18421371, 0.18421371, 0.18421371, 0.18421371, 0.18421371]), 'label': 0}, {'sequence': array([0.12145701, 0.12145701, 0.12145701, 0.12145701, 0.12145701]), 'label': 0}, {'sequence': array([0.11432386, 0.11432386, 0.11432386, 0.11432386, 0.11432386]), 'label': 0}, {'sequence': array([0.27107305, 0.27107305, 0.27107305, 0.27107305, 0.24721196]), 'label': 0}, {'sequence': array([0.61011948, 0.61011948, 0.61011948, 0.61011948, 0.61011948]), 'label': 1}, {'sequence': array([0.47042282, 0.47042282, 0.47042282, 0.47042282, 0.47042282]), 'label': 0}, {'sequence': array([0.82449283, 0.82449283, 0.82449283, 0.82449283, 0.82449283]), 'label': 1}, {'sequence': array([0.73685274, 0.73685274, 0.73685274, 0.73685274, 0.73685274]), 'label': 1}, {'sequence': array([0.20762525, 0.20762525, 0.20762525, 0.20762525, 0.20762525]), 'label': 0}, {'sequence': array([0.72341661, 0.72341661, 0.72341661, 0.72341661, 0.72341661]), 'label': 1}, {'sequence': array([0.97398552, 0.97398552, 0.97398552, 0.97398552, 0.97398552]), 'label': 1}, {'sequence': array([0.47675312, 0.47675312, 0.47675312, 0.47675312, 0.47675312]), 'label': 0}, {'sequence': array([0.31107083, 0.31107083, 0.31107083, 0.31107083, 0.31107083]), 'label': 0}, {'sequence': array([0.30168413, 0.30168413, 0.30168413, 0.30168413, 0.30168413]), 'label': 0}, {'sequence': array([0.55187509, 0.55187509, 0.55187509, 0.55187509, 0.55187509]), 'label': 1}, {'sequence': array([0.57979221, 0.57979221, 0.57979221, 0.57979221, 0.57979221]), 'label': 1}, {'sequence': array([0.20785491, 0.20785491, 0.20785491, 0.20785491, 0.20785491]), 'label': 0}, {'sequence': array([0.37934592, 0.37934592, 0.37934592, 0.37934592, 0.37934592]), 'label': 0}, {'sequence': array([0.11237317, 0.11237317, 0.11237317, 0.11237317, 0.11237317]), 'label': 0}, {'sequence': array([0.54524881, 0.54524881, 0.54524881, 0.54524881, 0.54524881]), 'label': 1}, {'sequence': array([0.47748075, 0.47748075, 0.47748075, 0.47748075, 0.47748075]), 'label': 0}, {'sequence': array([0.66824581, 0.66824581, 0.66824581, 0.66824581, 0.66824581]), 'label': 1}, {'sequence': array([0.80750987, 0.80750987, 0.80750987, 0.80750987, 0.80750987]), 'label': 1}, {'sequence': array([0.00360445, 0.00360445, 0.00360445, 0.00360445, 0.00360445]), 'label': 0}, {'sequence': array([0.85709475, 0.85709475, 0.85709475, 0.85709475, 0.85709475]), 'label': 1}, {'sequence': array([0.1822157, 0.1822157, 0.1822157, 0.1822157, 0.1822157]), 'label': 0}, {'sequence': array([0.57730986, 0.84457387, 0.92687046, 0.92687046, 0.58753276]), 'label': 1}, {'sequence': array([0.22077664, 0.22077664, 0.22077664, 0.22077664, 0.22077664]), 'label': 0}, {'sequence': array([0.4997033, 0.4997033, 0.4997033, 0.4997033, 0.4997033]), 'label': 0}, {'sequence': array([0.45710663, 0.45710641, 0.0454221 , 0.4571038 , 0.45710243]), 'label': 0}, {'sequence': array([0.36084131, 0.36084131, 0.36084131, 0.36084131, 0.36084131]), 'label': 0}, {'sequence': array([0.01725032, 0.01725032, 0.01725032, 0.01725032, 0.01725032]), 'label': 0}, {'sequence': array([0.13955236, 0.13955236, 0.13955236, 0.13955236, 0.13955236]), 'label': 0}, {'sequence': array([0.21720589, 0.21720589, 0.21720589, 0.21720589, 0.21720589]), 'label': 0}, {'sequence': array([0.93914086, 0.93914086, 0.93914086, 0.93914086, 0.93914086]), 'label': 1}, {'sequence': array([0.66755173, 0.66755173, 0.66755173, 0.66755173, 0.66755173]), 'label': 1}, {'sequence': array([0.76269031, 0.76269031, 0.76269031, 0.76269031, 0.76269031]), 'label': 1}, {'sequence': array([0.9293931, 0.9293931, 0.9293931, 0.9293931, 0.9293931]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.33767746  0.2544297   0.30757956  1.03885749  0.19451274  0.02893485\n","  0.07072041  0.1768464   0.1041802   0.6661536   0.19902509  0.14246485\n","  0.64378541  0.37536416 -0.04133293  1.00741666  0.60061457  0.51020396\n","  0.7951923   0.82720204]\n","Iteration 1 - Learning Rate: 0.165436\n","Iteration 1 - Training Accuracy: 60.00%\n","Iteration 1 - Test Accuracy: 55.20%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.28513144  0.27234634  0.2025917   1.10691511  0.20849733  0.10137098\n","  0.03759739  0.25389326  0.20986238  0.72328173  0.17469084  0.15917078\n","  0.6424647   0.30790679 -0.04945524  1.00623015  0.65828193  0.4719756\n","  0.82647735  0.77978182]\n","Iteration 2 - Learning Rate: 0.195547\n","Iteration 2 - Training Accuracy: 66.00%\n","Iteration 2 - Test Accuracy: 58.40%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.21940306  0.29689923  0.04434639  1.21156811  0.12680334  0.07650357\n","  0.05587053  0.35152442  0.28892606  0.71385458  0.15042559  0.13705624\n","  0.67825628  0.30882396 -0.0194887   0.98547878  0.65788165  0.45878031\n","  0.80103449  0.75056595]\n","Iteration 3 - Learning Rate: 0.230343\n","Iteration 3 - Training Accuracy: 70.00%\n","Iteration 3 - Test Accuracy: 65.60%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.18394626  0.31891628 -0.01890115  1.22934985  0.09506668  0.10180645\n","  0.06428515  0.38840587  0.34180808  0.73764245  0.15108679  0.10988531\n","  0.69682514  0.23970611 -0.08138952  1.0043883   0.64260229  0.45368608\n","  0.79066809  0.74887688]\n","Iteration 4 - Learning Rate: 0.260581\n","Iteration 4 - Training Accuracy: 76.00%\n","Iteration 4 - Test Accuracy: 72.00%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.19443236  0.43802487 -0.08322085  1.26603097  0.10369044  0.15360133\n","  0.02065017  0.51062313  0.36888277  0.65996255  0.27878075  0.03976167\n","  0.64582234  0.20334353 -0.03413632  0.92171441  0.54927248  0.30696968\n","  0.71717418  0.69172026]\n","Iteration 5 - Learning Rate: 0.293839\n","Iteration 5 - Training Accuracy: 74.00%\n","Iteration 5 - Test Accuracy: 66.40%\n","\n","\n","Fed_Epoch 2, Client 2:\n","Training data for epoch 2: 50\n","Client Data Structure:\n","[{'sequence': array([0.96236266, 0.96236266, 0.96236237, 0.96236237, 0.96236237]), 'label': 1}, {'sequence': array([0.58358631, 0.58358631, 0.61568396, 0.72491463, 0.72491296]), 'label': 1}, {'sequence': array([0.62187373, 0.62187373, 0.62187373, 0.62187373, 0.62187373]), 'label': 1}, {'sequence': array([0.61597153, 0.61597153, 0.61597153, 0.61597153, 0.61597153]), 'label': 1}, {'sequence': array([0.87541498, 0.87541498, 0.87541498, 0.87541498, 0.87541498]), 'label': 1}, {'sequence': array([0.22630524, 0.22630524, 0.22630524, 0.22630524, 0.22630524]), 'label': 0}, {'sequence': array([0.0088786, 0.0088786, 0.0088786, 0.0088786, 0.0088786]), 'label': 0}, {'sequence': array([0.67833456, 0.67833456, 0.67833456, 0.67833456, 0.67833456]), 'label': 1}, {'sequence': array([0.39758462, 0.39758462, 0.39758462, 0.39758462, 0.39758462]), 'label': 0}, {'sequence': array([0.78485031, 0.78485031, 0.78485031, 0.78485031, 0.78485031]), 'label': 1}, {'sequence': array([0.54065504, 0.54065504, 0.54065504, 0.54065504, 0.54065504]), 'label': 1}, {'sequence': array([0.63251864, 0.63251864, 0.63251864, 0.63251864, 0.63251864]), 'label': 1}, {'sequence': array([0.11843786, 0.11843786, 0.11843786, 0.11843786, 0.11843786]), 'label': 0}, {'sequence': array([0.92252664, 0.92252664, 0.92252664, 0.92252664, 0.92252664]), 'label': 1}, {'sequence': array([0.64243541, 0.64243541, 0.64243541, 0.64243541, 0.64243541]), 'label': 1}, {'sequence': array([0.5016871, 0.5016871, 0.5016871, 0.5016871, 0.5016871]), 'label': 0}, {'sequence': array([0.19983672, 0.19983672, 0.19983672, 0.19983672, 0.19983672]), 'label': 0}, {'sequence': array([0.80760648, 0.80760648, 0.80760648, 0.80760648, 0.80760648]), 'label': 1}, {'sequence': array([0.28119572, 0.28119572, 0.28119572, 0.28119572, 0.28119572]), 'label': 0}, {'sequence': array([0.33509187, 0.33509187, 0.33509187, 0.33509187, 0.33509187]), 'label': 0}, {'sequence': array([0.80985604, 0.80985604, 0.80985604, 0.80985604, 0.80985604]), 'label': 1}, {'sequence': array([0.98184884, 0.98184884, 0.98184884, 0.98184884, 0.98184884]), 'label': 1}, {'sequence': array([0.92116553, 0.92116553, 0.92116553, 0.92116553, 0.92116553]), 'label': 1}, {'sequence': array([0.58537342, 0.58537342, 0.58537342, 0.58537342, 0.58537342]), 'label': 1}, {'sequence': array([0.52407452, 0.52407452, 0.52407452, 0.52407452, 0.52407452]), 'label': 1}, {'sequence': array([0.0629294, 0.0629294, 0.0629294, 0.0629294, 0.0629294]), 'label': 0}, {'sequence': array([0.13511752, 0.13511752, 0.13511752, 0.13511752, 0.13511752]), 'label': 0}, {'sequence': array([0.67371411, 0.67371411, 0.67371411, 0.67371411, 0.67371411]), 'label': 1}, {'sequence': array([0.24577272, 0.24577272, 0.24577272, 0.24577272, 0.24577272]), 'label': 0}, {'sequence': array([0.11397417, 0.11397417, 0.11397417, 0.11397417, 0.11397417]), 'label': 0}, {'sequence': array([0.67419867, 0.67419867, 0.67419867, 0.67419867, 0.67419867]), 'label': 1}, {'sequence': array([0.49614183, 0.49614183, 0.49614183, 0.49614183, 0.49614183]), 'label': 0}, {'sequence': array([0.77395922, 0.77395922, 0.77395922, 0.77395922, 0.77395922]), 'label': 1}, {'sequence': array([0.48645501, 0.48645501, 0.48645501, 0.48645501, 0.48645501]), 'label': 0}, {'sequence': array([0.15234617, 0.15234617, 0.15234617, 0.15234617, 0.15234617]), 'label': 0}, {'sequence': array([0.51035183, 0.51035183, 0.51035183, 0.51035183, 0.51035183]), 'label': 0}, {'sequence': array([0.56651508, 0.56651508, 0.56651508, 0.56651508, 0.56651508]), 'label': 1}, {'sequence': array([0.58698138, 0.58698138, 0.58698138, 0.58698138, 0.58698138]), 'label': 1}, {'sequence': array([0.01646029, 0.01646029, 0.01646029, 0.01646029, 0.01646029]), 'label': 0}, {'sequence': array([0.3816236, 0.3816236, 0.3816236, 0.3816236, 0.3816236]), 'label': 0}, {'sequence': array([0.13265177, 0.13265177, 0.13265177, 0.13265177, 0.13265177]), 'label': 0}, {'sequence': array([0.25402254, 0.25402254, 0.25402254, 0.25402254, 0.25402254]), 'label': 0}, {'sequence': array([0.5325714, 0.5325714, 0.5325714, 0.5325714, 0.5325714]), 'label': 1}, {'sequence': array([0.73405144, 0.73405144, 0.73405144, 0.73405144, 0.73405144]), 'label': 1}, {'sequence': array([0.60682949, 0.60682949, 0.60682949, 0.60682949, 0.60682949]), 'label': 1}, {'sequence': array([0.29962336, 0.29962336, 0.29962336, 0.29962336, 0.29962336]), 'label': 0}, {'sequence': array([0.96432212, 0.96432212, 0.96432212, 0.96432212, 0.96432212]), 'label': 1}, {'sequence': array([0.61525521, 0.61525521, 0.61525521, 0.61525521, 0.61525521]), 'label': 1}, {'sequence': array([0.94367071, 0.9436684 , 0.94366608, 0.94366376, 0.94365912]), 'label': 1}, {'sequence': array([0.04460243, 0.04460243, 0.04460243, 0.04460243, 0.04460243]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.07298792 0.05160219 0.67597637 0.83793623 0.12748044 0.45710597\n"," 0.78614127 0.91291716 0.41143327 0.8385173  0.17737457 0.40112911\n"," 0.18927162 0.94405562 0.88588926 0.6429242  0.17916654 0.87606683\n"," 0.89886184 0.74545209]\n","Iteration 1 - Learning Rate: 0.192454\n","Iteration 1 - Training Accuracy: 86.00%\n","Iteration 1 - Test Accuracy: 71.20%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.11844381  0.20200002  0.65778238  1.00298825 -0.03444935  0.64201241\n","  0.81938291  0.93114521  0.32878511  0.8306434   0.14730765  0.48030444\n","  0.21215014  1.07861925  0.83920962  0.59898797  0.24277691  0.82421807\n","  0.73027453  0.78968628]\n","Iteration 2 - Learning Rate: 0.237747\n","Iteration 2 - Training Accuracy: 88.00%\n","Iteration 2 - Test Accuracy: 73.60%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.13894485  0.1280099   0.68154865  1.04279314 -0.09211361  0.70780963\n","  0.84674039  0.87942295  0.18711662  0.84778883  0.16944993  0.51868636\n","  0.26303567  1.10072218  0.90659162  0.48823585  0.11728699  0.81724636\n","  0.77543933  0.83855156]\n","Iteration 3 - Learning Rate: 0.288752\n","Iteration 3 - Training Accuracy: 88.00%\n","Iteration 3 - Test Accuracy: 72.80%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.24305721  0.1650654   0.59916395  1.15235253 -0.22116084  0.75279771\n","  0.77630309  0.81692315  0.08154905  0.84866505  0.23835844  0.43402894\n","  0.15205822  1.20578554  0.85178992  0.42451187 -0.01615454  0.84847192\n","  0.78521233  0.72523185]\n","Iteration 4 - Learning Rate: 0.340599\n","Iteration 4 - Training Accuracy: 88.00%\n","Iteration 4 - Test Accuracy: 77.60%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.25357782  0.17669433  0.66870692  1.14172734 -0.24715444  0.88462533\n","  0.70231336  0.79058398  0.06072636  0.88041122  0.20603726  0.50972354\n","  0.10069029  1.25594569  0.89295131  0.34398488 -0.09115553  0.82639418\n","  0.77728581  0.6493363 ]\n","Iteration 5 - Learning Rate: 0.392906\n","Iteration 5 - Training Accuracy: 88.00%\n","Iteration 5 - Test Accuracy: 80.00%\n","\n","\n","Fed_Epoch 2, Client 3:\n","Training data for epoch 2: 50\n","Client Data Structure:\n","[{'sequence': array([0.10044469, 0.10044469, 0.10044469, 0.10044469, 0.10044469]), 'label': 0}, {'sequence': array([0.29908126, 0.29908126, 0.29908126, 0.29908126, 0.29908126]), 'label': 0}, {'sequence': array([0.70614194, 0.70614194, 0.70614194, 0.70614194, 0.70614165]), 'label': 1}, {'sequence': array([0.92787058, 0.92787058, 0.92787058, 0.92787058, 0.92787058]), 'label': 1}, {'sequence': array([0.50511507, 0.50511507, 0.50511507, 0.50511507, 0.50511507]), 'label': 0}, {'sequence': array([0.4308572, 0.4308572, 0.4308572, 0.4308572, 0.4308572]), 'label': 0}, {'sequence': array([0.06529246, 0.06529246, 0.06529246, 0.06529246, 0.06529246]), 'label': 0}, {'sequence': array([0.67565182, 0.67565182, 0.67565182, 0.67565182, 0.6497283 ]), 'label': 1}, {'sequence': array([0.81015956, 0.81015956, 0.81015956, 0.81015956, 0.81015956]), 'label': 1}, {'sequence': array([0.46069448, 0.46069448, 0.46069448, 0.46069448, 0.46069448]), 'label': 0}, {'sequence': array([0.02967574, 0.02967574, 0.02967574, 0.02967574, 0.02967574]), 'label': 0}, {'sequence': array([0.9746393, 0.9746393, 0.9746393, 0.9746393, 0.9746393]), 'label': 1}, {'sequence': array([0.4608337, 0.4608337, 0.4608337, 0.4608337, 0.4608337]), 'label': 0}, {'sequence': array([0.10159571, 0.10159571, 0.10159571, 0.10159571, 0.10159571]), 'label': 0}, {'sequence': array([0.01795773, 0.01795773, 0.01795773, 0.01795773, 0.01795773]), 'label': 0}, {'sequence': array([0.64173829, 0.64173829, 0.64173829, 0.64173808, 0.64173808]), 'label': 1}, {'sequence': array([0.42400545, 0.42400545, 0.42400545, 0.42400545, 0.42400545]), 'label': 0}, {'sequence': array([0.1373015, 0.1373015, 0.1373015, 0.1373015, 0.1373015]), 'label': 0}, {'sequence': array([0.81499003, 0.81499003, 0.81499003, 0.81499003, 0.81499003]), 'label': 1}, {'sequence': array([0.60418735, 0.60418735, 0.60418735, 0.60418735, 0.60418735]), 'label': 1}, {'sequence': array([0.13657474, 0.13657474, 0.13657474, 0.13657474, 0.13657474]), 'label': 0}, {'sequence': array([0.93819668, 0.93819668, 0.93819668, 0.93819668, 0.93819668]), 'label': 1}, {'sequence': array([0.53467276, 0.53467276, 0.53467276, 0.53467276, 0.53467276]), 'label': 1}, {'sequence': array([0.15050985, 0.15050985, 0.15050985, 0.15050985, 0.15050985]), 'label': 0}, {'sequence': array([0.57137976, 0.57137976, 0.57137976, 0.57137976, 0.57137976]), 'label': 1}, {'sequence': array([0.73440308, 0.73440308, 0.73440308, 0.73440308, 0.73440308]), 'label': 1}, {'sequence': array([0.97956507, 0.97956507, 0.97956507, 0.97956507, 0.97956507]), 'label': 1}, {'sequence': array([0.17225668, 0.17225668, 0.17225668, 0.17225668, 0.17225668]), 'label': 0}, {'sequence': array([0.32084063, 0.32084063, 0.32084063, 0.32084063, 0.32084063]), 'label': 0}, {'sequence': array([0.08796723, 0.08796723, 0.08796723, 0.08796723, 0.08796723]), 'label': 0}, {'sequence': array([0.22847211, 0.22847211, 0.22847211, 0.22847211, 0.22847211]), 'label': 0}, {'sequence': array([0.13411464, 0.13411464, 0.13411464, 0.13411464, 0.13411464]), 'label': 0}, {'sequence': array([0.4896489, 0.4896489, 0.4896489, 0.4896489, 0.4896489]), 'label': 0}, {'sequence': array([0.27516893, 0.27516893, 0.27516893, 0.27516893, 0.27516893]), 'label': 0}, {'sequence': array([0.59934963, 0.59934963, 0.59934963, 0.59934963, 0.59934963]), 'label': 1}, {'sequence': array([0.08950431, 0.08950431, 0.08950431, 0.08950431, 0.08950431]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.61250471, 0.61250471, 0.61250471, 0.61250471, 0.61250471]), 'label': 1}, {'sequence': array([0.63542198, 0.63542198, 0.63542198, 0.63542198, 0.63542198]), 'label': 1}, {'sequence': array([0.83854289, 0.83854289, 0.83854289, 0.83854289, 0.83854289]), 'label': 1}, {'sequence': array([0.89397764, 0.89397764, 0.89397764, 0.89397764, 0.89397764]), 'label': 1}, {'sequence': array([0.21529057, 0.21529057, 0.21529057, 0.21529057, 0.21529057]), 'label': 0}, {'sequence': array([0.35355067, 0.35355067, 0.35355067, 0.35355067, 0.35355067]), 'label': 0}, {'sequence': array([0.30783665, 0.30783665, 0.30783665, 0.30783665, 0.30783665]), 'label': 0}, {'sequence': array([0.43039315, 0.43039315, 0.43039315, 0.43039315, 0.43039315]), 'label': 0}, {'sequence': array([0.97311389, 0.97311389, 0.97311389, 0.97311389, 0.97311389]), 'label': 1}, {'sequence': array([0.61098524, 0.61098524, 0.61098524, 0.61098524, 0.61098524]), 'label': 1}, {'sequence': array([0.78773431, 0.78773431, 0.78773431, 0.78773431, 0.78773431]), 'label': 1}, {'sequence': array([0.47564139, 0.47564139, 0.47564139, 0.47564139, 0.47564139]), 'label': 0}, {'sequence': array([0.88700537, 0.88700537, 0.88700537, 0.88700537, 0.88700537]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.57316098  0.4284842   0.62610342  0.60361958  0.16181487  0.90355683\n","  0.06606173  0.98119099  0.38573476  0.34328958  0.41194553  0.47703349\n","  0.92827458  0.10134012  0.62652419  0.53800758  0.73017846  0.59513316\n"," -0.1292399   0.79460156]\n","Iteration 1 - Learning Rate: 0.201157\n","Iteration 1 - Training Accuracy: 66.00%\n","Iteration 1 - Test Accuracy: 64.80%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.54222216  0.44620326  0.58292798  0.60497621 -0.01544372  0.97720443\n","  0.10895182  0.96336233  0.29239513  0.19775094  0.48553696  0.40561733\n","  1.03492524  0.13904188  0.61493418  0.49098856  0.5980164   0.56360823\n"," -0.16702073  0.72047796]\n","Iteration 2 - Learning Rate: 0.256497\n","Iteration 2 - Training Accuracy: 78.00%\n","Iteration 2 - Test Accuracy: 68.00%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.46354821  0.29826548  0.59664669  0.50453884 -0.28405936  0.97586364\n","  0.17013084  1.02790152  0.21042744  0.1170817   0.5357545   0.4169373\n","  1.09542386  0.22249087  0.72108606  0.5732771   0.38311126  0.5730437\n"," -0.08235444  0.74538344]\n","Iteration 3 - Learning Rate: 0.313380\n","Iteration 3 - Training Accuracy: 84.00%\n","Iteration 3 - Test Accuracy: 75.20%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.48039763  0.35015523  0.54948583  0.53360128 -0.3666966   0.98815198\n","  0.1464959   1.05898948  0.17002125  0.03902052  0.55043818  0.36699735\n","  1.1150579   0.22543298  0.74638711  0.55291231  0.3164253   0.6207418\n"," -0.12687571  0.70100886]\n","Iteration 4 - Learning Rate: 0.361027\n","Iteration 4 - Training Accuracy: 86.00%\n","Iteration 4 - Test Accuracy: 74.40%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.62126677  0.30652361  0.60640796  0.51897819 -0.47369449  1.04435749\n","  0.1702781   1.09360381  0.18382055  0.03275424  0.59174573  0.38480776\n","  1.24134702  0.22350446  0.81616893  0.49379541  0.20070096  0.58025014\n","  0.02831249  0.73905431]\n","Iteration 5 - Learning Rate: 0.397809\n","Iteration 5 - Training Accuracy: 86.00%\n","Iteration 5 - Test Accuracy: 76.80%\n","\n","\n","Fed_Epoch 2, Client 4:\n","Training data for epoch 2: 50\n","Client Data Structure:\n","[{'sequence': array([0.81971201, 0.81971201, 0.81971201, 0.81971201, 0.81971201]), 'label': 1}, {'sequence': array([0.60317584, 0.60317584, 0.60317584, 0.60317584, 0.60317584]), 'label': 1}, {'sequence': array([0.44554095, 0.44554095, 0.44554095, 0.44554095, 0.44554095]), 'label': 0}, {'sequence': array([0.87383674, 0.87383674, 0.87383674, 0.87383674, 0.87383674]), 'label': 1}, {'sequence': array([0.08978812, 0.08978812, 0.08978812, 0.08978812, 0.08978812]), 'label': 0}, {'sequence': array([0.34297758, 0.34297758, 0.34297758, 0.34297758, 0.34297758]), 'label': 0}, {'sequence': array([0.53432409, 0.53432409, 0.53432409, 0.53432409, 0.53432409]), 'label': 1}, {'sequence': array([0.23859079, 0.23859079, 0.23859079, 0.23859079, 0.23859079]), 'label': 0}, {'sequence': array([0.07004379, 0.07004379, 0.07004379, 0.07004379, 0.07004379]), 'label': 0}, {'sequence': array([0.52813475, 0.52813475, 0.52813475, 0.52813475, 0.52813475]), 'label': 1}, {'sequence': array([0.5694269, 0.5694269, 0.5694269, 0.5694269, 0.5694269]), 'label': 1}, {'sequence': array([0.60910747, 0.69415056, 0.69415056, 0.69415056, 0.69415005]), 'label': 1}, {'sequence': array([0.3763064, 0.3763064, 0.3763064, 0.3763064, 0.3763064]), 'label': 0}, {'sequence': array([0.59611103, 0.59611103, 0.59611103, 0.59611103, 0.59611103]), 'label': 1}, {'sequence': array([0.82347886, 0.82347886, 0.82347886, 0.82347886, 0.82347886]), 'label': 1}, {'sequence': array([0.47419156, 0.47419156, 0.47419156, 0.47419156, 0.47419156]), 'label': 0}, {'sequence': array([0.33867218, 0.33867218, 0.33867218, 0.33867218, 0.33867218]), 'label': 0}, {'sequence': array([0.17109255, 0.17109255, 0.17109255, 0.17109255, 0.17109255]), 'label': 0}, {'sequence': array([0.62805495, 0.62805495, 0.62805495, 0.62805495, 0.62805495]), 'label': 1}, {'sequence': array([0.44425492, 0.44425492, 0.44425492, 0.44425492, 0.44425492]), 'label': 0}, {'sequence': array([0.72116045, 0.72116045, 0.72116045, 0.72116045, 0.72116045]), 'label': 1}, {'sequence': array([0.75088932, 0.75088932, 0.75088932, 0.75088932, 0.75088932]), 'label': 1}, {'sequence': array([0.34556414, 0.34556414, 0.34556414, 0.34556414, 0.34556414]), 'label': 0}, {'sequence': array([0.94558502, 0.94558502, 0.94558502, 0.94558502, 0.94558502]), 'label': 1}, {'sequence': array([0.11603241, 0.09095732, 0.11603081, 0.11603081, 0.11603081]), 'label': 0}, {'sequence': array([0.70044817, 0.70044817, 0.70044759, 0.70044759, 0.70044759]), 'label': 1}, {'sequence': array([0.03175847, 0.03175847, 0.03175847, 0.03175847, 0.03175847]), 'label': 0}, {'sequence': array([0.78818784, 0.78818784, 0.78818784, 0.78818784, 0.78818784]), 'label': 1}, {'sequence': array([0.41870173, 0.41870173, 0.41870173, 0.41870173, 0.41870173]), 'label': 0}, {'sequence': array([0.0948858, 0.0948858, 0.0948858, 0.0948858, 0.0948858]), 'label': 0}, {'sequence': array([0.63634623, 0.63634623, 0.63634623, 0.63634623, 0.63634623]), 'label': 1}, {'sequence': array([0.37715078, 0.37715078, 0.37715078, 0.37715078, 0.37715078]), 'label': 0}, {'sequence': array([0.91559199, 0.91559199, 0.91559199, 0.91559199, 0.91559199]), 'label': 1}, {'sequence': array([0.65480293, 0.65480293, 0.65480293, 0.65480293, 0.65480293]), 'label': 1}, {'sequence': array([0.65737268, 0.65737268, 0.65737268, 0.65737268, 0.65737268]), 'label': 1}, {'sequence': array([0.59312151, 0.59312151, 0.59312151, 0.59312151, 0.59312151]), 'label': 1}, {'sequence': array([0.56831183, 0.56831183, 0.56831183, 0.56831183, 0.56831183]), 'label': 1}, {'sequence': array([0.16840901, 0.16840901, 0.16840901, 0.16840901, 0.16840901]), 'label': 0}, {'sequence': array([0.55205446, 0.55205446, 0.55205446, 0.55205446, 0.55205446]), 'label': 1}, {'sequence': array([0.50307938, 0.50307938, 0.50307938, 0.50307938, 0.50307938]), 'label': 0}, {'sequence': array([0.59085594, 0.59085594, 0.59085594, 0.59085594, 0.59085594]), 'label': 1}, {'sequence': array([0.54882036, 0.54882036, 0.54882036, 0.54882036, 0.54882036]), 'label': 1}, {'sequence': array([0.74454757, 0.74454757, 0.74454757, 0.74454757, 0.74454757]), 'label': 1}, {'sequence': array([0.56656878, 0.56656878, 0.56656878, 0.56656878, 0.56656878]), 'label': 1}, {'sequence': array([0.28275824, 0.28275824, 0.28275824, 0.28275824, 0.28275824]), 'label': 0}, {'sequence': array([0.64407961, 0.64407961, 0.64407961, 0.64407961, 0.64407961]), 'label': 1}, {'sequence': array([0.82211463, 0.58227187, 0.82211202, 0.82211202, 0.82211202]), 'label': 1}, {'sequence': array([0.41643231, 0.41643231, 0.41643231, 0.41643231, 0.41643231]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.9650238, 0.9650238, 0.9650238, 0.9650238, 0.9650238]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.93322805  0.16145065  1.06678225  0.46817601  0.79498609  0.36570962\n"," -0.01013139  0.78216636  0.97405349  0.1921621   0.56937665  0.71882619\n","  0.45435601  0.77006839  0.61991007  0.73418264  1.00294312  0.50988691\n","  0.81652831  0.57232293]\n","Iteration 1 - Learning Rate: 0.188806\n","Iteration 1 - Training Accuracy: 56.00%\n","Iteration 1 - Test Accuracy: 48.00%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.86891762  0.19479897  1.21756353  0.35837252  0.79173568  0.36841247\n"," -0.03175482  0.81293765  1.09745606  0.1812721   0.51593431  0.67615907\n","  0.44011303  0.74553801  0.69877377  0.64854443  1.0216814   0.61207737\n","  0.84282195  0.35151816]\n","Iteration 2 - Learning Rate: 0.233787\n","Iteration 2 - Training Accuracy: 64.00%\n","Iteration 2 - Test Accuracy: 49.60%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.86868711  0.26355292  1.25072129  0.27786306  0.76847378  0.39904246\n"," -0.08407991  0.68848961  1.18311809  0.14347555  0.47689818  0.60359533\n","  0.45793793  0.67666351  0.7128497   0.53635025  1.16374204  0.75749075\n","  0.86642769  0.23832165]\n","Iteration 3 - Learning Rate: 0.280962\n","Iteration 3 - Training Accuracy: 70.00%\n","Iteration 3 - Test Accuracy: 48.80%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.82060284  0.21370199  1.30213178  0.15915931  0.80504358  0.45097179\n"," -0.12555234  0.577715    1.21586554  0.14544846  0.36644991  0.54613949\n","  0.42459416  0.70185757  0.64598846  0.48418568  1.15720655  0.87434142\n","  0.92148777  0.19279688]\n","Iteration 4 - Learning Rate: 0.324652\n","Iteration 4 - Training Accuracy: 68.00%\n","Iteration 4 - Test Accuracy: 46.40%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.79954974  0.1770182   1.42889172  0.18464251  0.80621852  0.54386159\n"," -0.11906221  0.54004028  1.20880177  0.10207355  0.36296103  0.49958305\n","  0.40161934  0.68239575  0.64868963  0.42814489  1.26526648  0.93645847\n","  0.88809004  0.20241874]\n","Iteration 5 - Learning Rate: 0.362858\n","Iteration 5 - Training Accuracy: 72.00%\n","Iteration 5 - Test Accuracy: 48.80%\n","\n","\n","Fed_Epoch 2, Client 5:\n","Training data for epoch 2: 50\n","Client Data Structure:\n","[{'sequence': array([0.50082351, 0.50082351, 0.50082351, 0.50082351, 0.50082351]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.37547426, 0.37547426, 0.37547426, 0.37547426, 0.37547426]), 'label': 0}, {'sequence': array([0.35620949, 0.35620949, 0.35620949, 0.35620949, 0.35620949]), 'label': 0}, {'sequence': array([0.75855696, 0.75855696, 0.75855696, 0.75855696, 0.75855696]), 'label': 1}, {'sequence': array([0.64496581, 0.64496581, 0.64496581, 0.64496581, 0.64496581]), 'label': 1}, {'sequence': array([0.13554018, 0.13554018, 0.13554018, 0.13554018, 0.13554018]), 'label': 0}, {'sequence': array([0.23411971, 0.23411971, 0.23411971, 0.23411971, 0.23411971]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.46862252, 0.46862064, 0.46862064, 0.33710024, 0.46861882]), 'label': 0}, {'sequence': array([0.12089998, 0.12089998, 0.12089998, 0.12089998, 0.12089998]), 'label': 0}, {'sequence': array([0.7932903, 0.7932903, 0.7932903, 0.7932903, 0.7932903]), 'label': 1}, {'sequence': array([0.64711057, 0.64711057, 0.64711057, 0.64711057, 0.64711057]), 'label': 1}, {'sequence': array([0.87764251, 0.75628877, 0.87764005, 0.87764005, 0.87764005]), 'label': 1}, {'sequence': array([0.75470712, 0.75470712, 0.75470712, 0.75470712, 0.75470712]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.81598001, 0.81598001, 0.81598001, 0.81598001, 0.81598001]), 'label': 1}, {'sequence': array([0.3621285, 0.3621285, 0.3621285, 0.3621285, 0.3621285]), 'label': 0}, {'sequence': array([0.29367651, 0.29367651, 0.29367651, 0.29367651, 0.29367651]), 'label': 0}, {'sequence': array([0.95512906, 0.95512906, 0.95512906, 0.95512906, 0.95512906]), 'label': 1}, {'sequence': array([0.77483317, 0.77483317, 0.77483317, 0.77483317, 0.77483317]), 'label': 1}, {'sequence': array([0.79538622, 0.79538622, 0.79538622, 0.79538622, 0.79538622]), 'label': 1}, {'sequence': array([0.77277964, 0.77277964, 0.77277964, 0.77277964, 0.77277964]), 'label': 1}, {'sequence': array([0.14526483, 0.14526483, 0.14526483, 0.14526483, 0.14526483]), 'label': 0}, {'sequence': array([0.00162905, 0.00162905, 0.00162905, 0.00162905, 0.00162905]), 'label': 0}, {'sequence': array([0.55405798, 0.55405798, 0.55405798, 0.55405791, 0.55405791]), 'label': 1}, {'sequence': array([0.51605313, 0.51605313, 0.51605313, 0.51605313, 0.51605313]), 'label': 1}, {'sequence': array([0.30048158, 0.30048158, 0.30048158, 0.30048158, 0.30048158]), 'label': 0}, {'sequence': array([0.18974558, 0.18974558, 0.18974558, 0.18974558, 0.18974558]), 'label': 0}, {'sequence': array([0.42565871, 0.42565871, 0.42565871, 0.42565871, 0.42565871]), 'label': 0}, {'sequence': array([0.4985259, 0.4985259, 0.4985259, 0.4985259, 0.4985259]), 'label': 0}, {'sequence': array([0.23354218, 0.23354218, 0.23354218, 0.23354218, 0.23354218]), 'label': 0}, {'sequence': array([0.06698217, 0.06698217, 0.06698217, 0.06698217, 0.06698217]), 'label': 0}, {'sequence': array([0.13925718, 0.13925718, 0.13925718, 0.13925718, 0.13925718]), 'label': 0}, {'sequence': array([0.30890592, 0.30890592, 0.30890592, 0.30890592, 0.30890592]), 'label': 0}, {'sequence': array([0.25749943, 0.25749943, 0.25749943, 0.25749943, 0.25749943]), 'label': 0}, {'sequence': array([0.54591665, 0.54591665, 0.54591665, 0.54591665, 0.54591665]), 'label': 1}, {'sequence': array([0.67500058, 0.67500058, 0.67500058, 0.67500058, 0.67500058]), 'label': 1}, {'sequence': array([0.21892792, 0.21892792, 0.21892792, 0.21892792, 0.21892792]), 'label': 0}, {'sequence': array([0.93246588, 0.93246588, 0.93246588, 0.93246588, 0.93246588]), 'label': 1}, {'sequence': array([0.98943655, 0.98943655, 0.98943655, 0.98943655, 0.98943655]), 'label': 1}, {'sequence': array([0.4666377, 0.4666377, 0.4666377, 0.4666377, 0.4666377]), 'label': 0}, {'sequence': array([0.73624259, 0.73624259, 0.73624259, 0.73624259, 0.73624259]), 'label': 1}, {'sequence': array([0.2699495, 0.2699495, 0.2699495, 0.2699495, 0.2699495]), 'label': 0}, {'sequence': array([0.51896285, 0.51896285, 0.51896285, 0.51896285, 0.51896285]), 'label': 1}, {'sequence': array([0.6929349, 0.6929349, 0.6929349, 0.6929349, 0.6929349]), 'label': 1}, {'sequence': array([0.42273913, 0.42273913, 0.42273913, 0.42273913, 0.42273913]), 'label': 0}, {'sequence': array([0.57103152, 0.57103152, 0.57103152, 0.57103152, 0.57103152]), 'label': 1}, {'sequence': array([0.14341467, 0.14341467, 0.14341467, 0.14341467, 0.14341467]), 'label': 0}, {'sequence': array([0.69963684, 0.69963684, 0.69963684, 0.69963684, 0.69963684]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.454015   0.3764892  0.83508418 0.37816334 0.29047596 1.07306431\n"," 0.147498   0.94489092 0.45251801 0.56122156 0.4370124  0.15603303\n"," 0.70569834 0.84669828 0.95943186 0.86040145 0.75872759 0.07039726\n"," 0.48001825 0.68819709]\n","Iteration 1 - Learning Rate: 0.186587\n","Iteration 1 - Training Accuracy: 58.00%\n","Iteration 1 - Test Accuracy: 52.80%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [0.3023334  0.46247392 0.79217996 0.53595534 0.16029408 1.18023511\n"," 0.00521926 1.01432083 0.46856666 0.503478   0.40740709 0.15863364\n"," 0.68958437 0.79500176 0.98498001 0.75591179 0.73244336 0.15561458\n"," 0.41142019 0.60047536]\n","Iteration 2 - Learning Rate: 0.233216\n","Iteration 2 - Training Accuracy: 72.00%\n","Iteration 2 - Test Accuracy: 61.60%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.15124908  0.47783897  0.70561258  0.70206325 -0.01202333  1.14803509\n"," -0.06559226  1.07913347  0.5122975   0.42687956  0.45383862  0.26285116\n","  0.71366045  0.71337162  1.03483198  0.77359455  0.63266872  0.15180983\n","  0.44630442  0.67462367]\n","Iteration 3 - Learning Rate: 0.278964\n","Iteration 3 - Training Accuracy: 80.00%\n","Iteration 3 - Test Accuracy: 79.20%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.08898789  0.56282909  0.6180061   0.77776742 -0.09433396  1.12334137\n"," -0.04807434  1.12269682  0.48820556  0.40370178  0.42286802  0.3545517\n","  0.73026344  0.68532876  1.15370342  0.82495272  0.71921209  0.19615197\n","  0.49919207  0.781033  ]\n","Iteration 4 - Learning Rate: 0.323734\n","Iteration 4 - Training Accuracy: 76.00%\n","Iteration 4 - Test Accuracy: 78.40%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.0786323   0.52945091  0.54406657  0.90574523 -0.19548577  1.09489926\n"," -0.0585963   1.19434222  0.51092337  0.46019425  0.35581144  0.37008126\n","  0.78423672  0.63420006  1.19240111  0.72813614  0.60134645  0.12287422\n","  0.50424591  0.90309782]\n","Iteration 5 - Learning Rate: 0.363150\n","Iteration 5 - Training Accuracy: 78.00%\n","Iteration 5 - Test Accuracy: 77.60%\n","\n","\n","Fed_Epoch 2, Client 6:\n","Training data for epoch 2: 50\n","Client Data Structure:\n","[{'sequence': array([0.70312504, 0.70312504, 0.70312504, 0.70312504, 0.70312504]), 'label': 1}, {'sequence': array([0.83063673, 0.83063673, 0.83063673, 0.83063673, 0.83063673]), 'label': 1}, {'sequence': array([0.34254224, 0.34254224, 0.34254224, 0.34254224, 0.34254224]), 'label': 0}, {'sequence': array([0.5024056, 0.5024056, 0.5024056, 0.5024056, 0.5024056]), 'label': 0}, {'sequence': array([0.0716187, 0.0716187, 0.0716187, 0.0716187, 0.0716187]), 'label': 0}, {'sequence': array([0.7358166, 0.7358166, 0.7358166, 0.7358166, 0.7358166]), 'label': 1}, {'sequence': array([0.72225813, 0.72225813, 0.72225813, 0.72225813, 0.72225813]), 'label': 1}, {'sequence': array([0.5109693, 0.5109693, 0.5109693, 0.5109693, 0.5109693]), 'label': 0}, {'sequence': array([0.37634829, 0.37634829, 0.37634829, 0.37634829, 0.37634829]), 'label': 0}, {'sequence': array([0.70538083, 0.70538083, 0.70538083, 0.70538083, 0.70538083]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.79741351, 0.79741351, 0.79741351, 0.79741351, 0.79741351]), 'label': 1}, {'sequence': array([0.16736475, 0.16736475, 0.16736475, 0.16736475, 0.16736475]), 'label': 0}, {'sequence': array([0.67708012, 0.67708012, 0.67708012, 0.67708012, 0.67708012]), 'label': 1}, {'sequence': array([0.91721741, 0.91721741, 0.91721741, 0.91721741, 0.91721741]), 'label': 1}, {'sequence': array([0.93422654, 0.93422654, 0.52573364, 0.67754931, 0.65812278]), 'label': 1}, {'sequence': array([0.68838656, 0.68838656, 0.68838656, 0.68838656, 0.68838656]), 'label': 1}, {'sequence': array([0.59866969, 0.59866969, 0.59866969, 0.59866969, 0.59866969]), 'label': 1}, {'sequence': array([0.06184144, 0.06184144, 0.06184144, 0.06184144, 0.06184144]), 'label': 0}, {'sequence': array([0.41400896, 0.41400896, 0.41400896, 0.41400896, 0.41400896]), 'label': 0}, {'sequence': array([0.0985488, 0.0985488, 0.0985488, 0.0985488, 0.0985488]), 'label': 0}, {'sequence': array([0.98136501, 0.98136458, 0.98136458, 0.98136429, 0.98136429]), 'label': 1}, {'sequence': array([0.2558056, 0.2558056, 0.2558056, 0.2558056, 0.2558056]), 'label': 0}, {'sequence': array([0.47894934, 0.47894934, 0.47894934, 0.47894934, 0.47894934]), 'label': 0}, {'sequence': array([0.28672563, 0.28672563, 0.28672563, 0.28672563, 0.28672563]), 'label': 0}, {'sequence': array([0.03778946, 0.03778946, 0.03778946, 0.03778946, 0.03778946]), 'label': 0}, {'sequence': array([0.23909723, 0.23909723, 0.23909723, 0.23909723, 0.23909723]), 'label': 0}, {'sequence': array([0.52390856, 0.52390856, 0.52390856, 0.52390856, 0.52390856]), 'label': 1}, {'sequence': array([0.11376538, 0.11376538, 0.11376538, 0.11376538, 0.11376538]), 'label': 0}, {'sequence': array([0.005675, 0.005675, 0.005675, 0.005675, 0.005675]), 'label': 0}, {'sequence': array([0.89245281, 0.89245281, 0.89245281, 0.89245281, 0.89245281]), 'label': 1}, {'sequence': array([0.44331226, 0.44331226, 0.44331226, 0.44331226, 0.44331226]), 'label': 0}, {'sequence': array([0.20241784, 0.20241784, 0.20241784, 0.20241784, 0.20241784]), 'label': 0}, {'sequence': array([0.30993801, 0.30993801, 0.30993801, 0.30993801, 0.30993801]), 'label': 0}, {'sequence': array([0.7853777, 0.7853777, 0.7853777, 0.7853777, 0.7853777]), 'label': 1}, {'sequence': array([0.42071126, 0.42071126, 0.42071126, 0.42071126, 0.42071126]), 'label': 0}, {'sequence': array([0.34759766, 0.34759766, 0.34759766, 0.34759766, 0.34759766]), 'label': 0}, {'sequence': array([0.88520014, 0.88520014, 0.88520014, 0.88520014, 0.88520014]), 'label': 1}, {'sequence': array([0.69208189, 0.69208189, 0.69208189, 0.69208189, 0.69208189]), 'label': 1}, {'sequence': array([0.41971099, 0.41971099, 0.41971099, 0.41971099, 0.41971099]), 'label': 0}, {'sequence': array([0.89924367, 0.89924367, 0.89924367, 0.89924367, 0.89924367]), 'label': 1}, {'sequence': array([0.87210898, 0.87210898, 0.87210898, 0.87210898, 0.87210898]), 'label': 1}, {'sequence': array([0.14834972, 0.14834972, 0.14834972, 0.14834972, 0.14834972]), 'label': 0}, {'sequence': array([0.9707712, 0.9707712, 0.9707712, 0.9707712, 0.9707712]), 'label': 1}, {'sequence': array([0.62331123, 0.62331123, 0.62331123, 0.62331123, 0.62331123]), 'label': 1}, {'sequence': array([0.11983746, 0.11983746, 0.11983746, 0.11983746, 0.11983746]), 'label': 0}, {'sequence': array([0.76369769, 0.76369762, 0.76369762, 0.76369762, 0.76369617]), 'label': 1}, {'sequence': array([0.40169775, 0.40169775, 0.40169775, 0.40169775, 0.40169775]), 'label': 0}, {'sequence': array([0.93059513, 0.93059513, 0.93059513, 0.93059513, 0.93059513]), 'label': 1}, {'sequence': array([0.08364306, 0.08364306, 0.08364306, 0.08364306, 0.08364306]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.07775311 0.79652719 0.68041206 0.62651563 0.22627099 0.29766807\n"," 0.86951647 0.8442291  0.63067291 0.90722912 0.21363706 0.78061173\n"," 0.63901634 0.90339272 0.64841505 0.70113096 0.1359874  0.31430041\n"," 0.37615393 0.75121145]\n","Iteration 1 - Learning Rate: 0.191184\n","Iteration 1 - Training Accuracy: 76.00%\n","Iteration 1 - Test Accuracy: 76.00%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [0.00194708 0.71213632 0.60978037 0.81595176 0.03449954 0.39445853\n"," 0.90252598 0.91038755 0.54514008 0.92218666 0.2481969  0.68190178\n"," 0.65138428 0.92970965 0.6550902  0.56916159 0.1317331  0.51052443\n"," 0.38240467 0.78341122]\n","Iteration 2 - Learning Rate: 0.238120\n","Iteration 2 - Training Accuracy: 88.00%\n","Iteration 2 - Test Accuracy: 85.60%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.01903736  0.79681818  0.54424345  0.91649766 -0.12008195  0.46901133\n","  0.88988811  0.92716496  0.48638759  0.85055053  0.27337482  0.73403045\n","  0.71540578  0.9420256   0.61059597  0.43785159  0.09168274  0.59958003\n","  0.41028968  0.78291278]\n","Iteration 3 - Learning Rate: 0.289671\n","Iteration 3 - Training Accuracy: 80.00%\n","Iteration 3 - Test Accuracy: 82.40%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [-0.00729612  0.75682338  0.47759635  0.99001856 -0.17286672  0.4646838\n","  0.9192747   0.98908153  0.45929017  0.81173139  0.28562212  0.71114992\n","  0.67869154  0.94942434  0.67055206  0.37651086  0.0625355   0.60567186\n","  0.38267279  0.74368322]\n","Iteration 4 - Learning Rate: 0.331196\n","Iteration 4 - Training Accuracy: 82.00%\n","Iteration 4 - Test Accuracy: 79.20%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.04713073  0.73990519  0.34812743  1.05227248 -0.25445659  0.52459671\n","  0.94870857  1.10708988  0.43658896  0.7687732   0.32134506  0.72453643\n","  0.76743909  0.97126991  0.65628328  0.2991589   0.00336936  0.61885153\n","  0.3692111   0.67824935]\n","Iteration 5 - Learning Rate: 0.369097\n","Iteration 5 - Training Accuracy: 78.00%\n","Iteration 5 - Test Accuracy: 72.00%\n","\n","\n","Fed_Epoch 2, Client 7:\n","Training data for epoch 2: 50\n","Client Data Structure:\n","[{'sequence': array([0.18630999, 0.18630999, 0.18630999, 0.18630999, 0.18630999]), 'label': 0}, {'sequence': array([0.1797925, 0.1797925, 0.1797925, 0.1797925, 0.1797925]), 'label': 0}, {'sequence': array([0.2149277, 0.2149277, 0.2149277, 0.2149277, 0.2149277]), 'label': 0}, {'sequence': array([0.36278902, 0.36278902, 0.36278902, 0.36278902, 0.36278902]), 'label': 0}, {'sequence': array([0.63976819, 0.63976819, 0.63976819, 0.63976819, 0.63976819]), 'label': 1}, {'sequence': array([0.60835585, 0.60835585, 0.60835549, 0.60835549, 0.60835469]), 'label': 1}, {'sequence': array([0.56840872, 0.56840872, 0.56840872, 0.56840872, 0.56840872]), 'label': 1}, {'sequence': array([0.23060767, 0.23060767, 0.23060767, 0.23060767, 0.23060767]), 'label': 0}, {'sequence': array([0.58269468, 0.58269468, 0.58269468, 0.58269468, 0.58269468]), 'label': 1}, {'sequence': array([0.66445047, 0.66445047, 0.66445047, 0.66445047, 0.66445047]), 'label': 1}, {'sequence': array([0.22579148, 0.22579148, 0.22579148, 0.22579148, 0.22579148]), 'label': 0}, {'sequence': array([0.73395368, 0.73395368, 0.73395368, 0.73395368, 0.73395368]), 'label': 1}, {'sequence': array([0.95431939, 0.95431939, 0.95431939, 0.95431939, 0.95431939]), 'label': 1}, {'sequence': array([0.48721417, 0.48721417, 0.48721417, 0.48721417, 0.48721417]), 'label': 0}, {'sequence': array([0.74421694, 0.74421694, 0.74421694, 0.74421694, 0.74421694]), 'label': 1}, {'sequence': array([0.35835476, 0.35835476, 0.35835476, 0.35835476, 0.35835476]), 'label': 0}, {'sequence': array([0.20028801, 0.20028801, 0.20028801, 0.20028801, 0.20028801]), 'label': 0}, {'sequence': array([0.90682993, 0.90682993, 0.90682993, 0.90682993, 0.90682993]), 'label': 1}, {'sequence': array([0.8123494, 0.8123494, 0.8123494, 0.8123494, 0.8123494]), 'label': 1}, {'sequence': array([0.44061503, 0.44061503, 0.44061503, 0.44061503, 0.44061503]), 'label': 0}, {'sequence': array([0.95338529, 0.95338529, 0.95338529, 0.95338529, 0.95338529]), 'label': 1}, {'sequence': array([0.02219508, 0.02219508, 0.02219508, 0.02219508, 0.02219508]), 'label': 0}, {'sequence': array([0.83315031, 0.83315031, 0.83315031, 0.83315031, 0.83315031]), 'label': 1}, {'sequence': array([0.20092599, 0.20092599, 0.20092599, 0.20092599, 0.20092599]), 'label': 0}, {'sequence': array([0.70080916, 0.70080916, 0.70080916, 0.70080916, 0.70080916]), 'label': 1}, {'sequence': array([0.27654628, 0.27654628, 0.27654628, 0.27654628, 0.27654628]), 'label': 0}, {'sequence': array([0.68232876, 0.68232876, 0.68232876, 0.68232876, 0.68232876]), 'label': 1}, {'sequence': array([0.40193423, 0.40193423, 0.40193423, 0.40193423, 0.40193423]), 'label': 0}, {'sequence': array([0.46198653, 0.46198653, 0.46198653, 0.46198653, 0.46198653]), 'label': 0}, {'sequence': array([0.44794242, 0.44794242, 0.44794242, 0.44794242, 0.44794242]), 'label': 0}, {'sequence': array([0.18973159, 0.18973159, 0.18973159, 0.18973159, 0.18973159]), 'label': 0}, {'sequence': array([0.25088845, 0.25088845, 0.25088845, 0.25088845, 0.25088845]), 'label': 0}, {'sequence': array([0.90417807, 0.90417807, 0.90417807, 0.90417807, 0.90417807]), 'label': 1}, {'sequence': array([0.81569222, 0.81569222, 0.81569222, 0.81569222, 0.81569222]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.07690263, 0.07690263, 0.07690263, 0.07690263, 0.07690263]), 'label': 0}, {'sequence': array([0.19735974, 0.19735974, 0.19735974, 0.19735974, 0.19735974]), 'label': 0}, {'sequence': array([0.03711372, 0.03711372, 0.03711372, 0.03711372, 0.03711372]), 'label': 0}, {'sequence': array([0.82060596, 0.82060596, 0.82060596, 0.82060596, 0.82060582]), 'label': 1}, {'sequence': array([0.27955188, 0.27955188, 0.27955188, 0.27955188, 0.27955188]), 'label': 0}, {'sequence': array([0.08980211, 0.08980211, 0.08980211, 0.08980211, 0.08980211]), 'label': 0}, {'sequence': array([0.63900026, 0.63900026, 0.63900026, 0.63900026, 0.63900026]), 'label': 1}, {'sequence': array([0.1529627, 0.1529627, 0.1529627, 0.1529627, 0.1529627]), 'label': 0}, {'sequence': array([0.98822814, 0.98822814, 0.98822814, 0.98822814, 0.98822814]), 'label': 1}, {'sequence': array([0.26167526, 0.26167526, 0.26167526, 0.26167526, 0.26167526]), 'label': 0}, {'sequence': array([0.66328988, 0.66328988, 0.66328988, 0.66328988, 0.66328988]), 'label': 1}, {'sequence': array([0.2803617, 0.2803617, 0.2803617, 0.2803617, 0.2803617]), 'label': 0}, {'sequence': array([0.79376015, 0.79376015, 0.79376015, 0.79376015, 0.79376015]), 'label': 1}, {'sequence': array([0.67870772, 0.67870772, 0.67870772, 0.67870772, 0.67870772]), 'label': 1}, {'sequence': array([0.87147614, 0.87147614, 0.87147614, 0.87147614, 0.87147614]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.37346487  0.81580191  0.26493574  0.89984014  0.73895542  0.66364496\n","  0.19376057  0.24570268  0.30094589  0.52771881  0.79663213  0.36776128\n"," -0.00352364  0.83556809  0.43534993  0.28025652  0.76785679  0.85900156\n","  0.74010902  0.39591033]\n","Iteration 1 - Learning Rate: 0.185416\n","Iteration 1 - Training Accuracy: 40.00%\n","Iteration 1 - Test Accuracy: 54.40%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.26973129  0.70066491  0.25709965  0.98094349  0.6783117   0.7085147\n","  0.11777504  0.17121204  0.27568141  0.57563355  0.8243148   0.35193271\n"," -0.01920599  0.8076115   0.50618632  0.30594062  0.69063271  0.77168368\n","  0.7818345   0.47801498]\n","Iteration 2 - Learning Rate: 0.223625\n","Iteration 2 - Training Accuracy: 44.00%\n","Iteration 2 - Test Accuracy: 56.80%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.2631966   0.58802671  0.2907697   1.08234936  0.58414069  0.73661278\n","  0.09958379  0.08935545  0.27963222  0.68374817  0.74274653  0.3548568\n"," -0.01282372  0.81897106  0.48232505  0.25158965  0.73734839  0.72940859\n","  0.77083522  0.55664228]\n","Iteration 3 - Learning Rate: 0.258376\n","Iteration 3 - Training Accuracy: 56.00%\n","Iteration 3 - Test Accuracy: 69.60%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.18659667  0.52938821  0.27912501  1.08099876  0.57314244  0.75878811\n"," -0.00418751  0.02665137  0.35062024  0.73524069  0.78725789  0.32373373\n"," -0.10715969  0.80404541  0.58171118  0.2257165   0.58847784  0.73012068\n","  0.84663222  0.6508132 ]\n","Iteration 4 - Learning Rate: 0.295204\n","Iteration 4 - Training Accuracy: 60.00%\n","Iteration 4 - Test Accuracy: 71.20%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.07895553  0.44096918  0.30183312  1.16330717  0.61566133  0.79343447\n"," -0.09187043 -0.11782049  0.40625014  0.81873654  0.736816    0.40181196\n"," -0.11766415  0.86835647  0.62065802  0.13978466  0.48861807  0.69408435\n","  0.9002006   0.7186511 ]\n","Iteration 5 - Learning Rate: 0.340023\n","Iteration 5 - Training Accuracy: 76.00%\n","Iteration 5 - Test Accuracy: 76.80%\n","\n","\n","Fed_Epoch 2, Client 8:\n","Training data for epoch 2: 50\n","Client Data Structure:\n","[{'sequence': array([0.94404083, 0.94404083, 0.94404083, 0.94404083, 0.94404083]), 'label': 1}, {'sequence': array([0.22773796, 0.22773796, 0.22773796, 0.22773796, 0.22773796]), 'label': 0}, {'sequence': array([0.72683792, 0.72683792, 0.72683792, 0.72683792, 0.72683792]), 'label': 1}, {'sequence': array([0.59102262, 0.59102262, 0.59102262, 0.59102262, 0.59102262]), 'label': 1}, {'sequence': array([0.21959032, 0.21959032, 0.21959032, 0.21959032, 0.21959032]), 'label': 0}, {'sequence': array([0.34320283, 0.34320283, 0.34320283, 0.34320283, 0.34320283]), 'label': 0}, {'sequence': array([0.91251015, 0.91251015, 0.91251015, 0.91251015, 0.91251015]), 'label': 1}, {'sequence': array([0.28289601, 0.28289601, 0.28289601, 0.28289601, 0.28289601]), 'label': 0}, {'sequence': array([0.72746974, 0.72746974, 0.72746974, 0.72746974, 0.72746974]), 'label': 1}, {'sequence': array([0.75239255, 0.75239255, 0.75239255, 0.75239255, 0.75239255]), 'label': 1}, {'sequence': array([0.40513486, 0.40513486, 0.40513486, 0.40513486, 0.40513486]), 'label': 0}, {'sequence': array([0.07237851, 0.07237851, 0.07237851, 0.07237851, 0.07237851]), 'label': 0}, {'sequence': array([0.84491529, 0.84491529, 0.84491529, 0.84491529, 0.84491529]), 'label': 1}, {'sequence': array([0.32392291, 0.32392291, 0.15367221, 0.15367221, 0.15367221]), 'label': 0}, {'sequence': array([0.18452977, 0.18452977, 0.18452977, 0.18452977, 0.18452977]), 'label': 0}, {'sequence': array([0.23871602, 0.23871602, 0.23871602, 0.23871602, 0.23871602]), 'label': 0}, {'sequence': array([0.91623874, 0.91623874, 0.91623874, 0.91623874, 0.91623874]), 'label': 1}, {'sequence': array([0.02570799, 0.02570799, 0.02570799, 0.02570799, 0.02570799]), 'label': 0}, {'sequence': array([0.55086243, 0.55086243, 0.55086243, 0.55086243, 0.55086243]), 'label': 1}, {'sequence': array([0.10055659, 0.10055659, 0.10055659, 0.10055659, 0.10055659]), 'label': 0}, {'sequence': array([0.08682499, 0.08682499, 0.08682499, 0.08682499, 0.08682499]), 'label': 0}, {'sequence': array([0.06642869, 0.06642869, 0.06642869, 0.06642869, 0.06642869]), 'label': 0}, {'sequence': array([0.14443284, 0.14443284, 0.14443284, 0.14443284, 0.14443284]), 'label': 0}, {'sequence': array([0.36297694, 0.36297694, 0.36297694, 0.36297694, 0.36297694]), 'label': 0}, {'sequence': array([0.98169767, 0.98169767, 0.98169767, 0.98169767, 0.98169767]), 'label': 1}, {'sequence': array([0.89648129, 0.89648129, 0.89648129, 0.89648129, 0.89648129]), 'label': 1}, {'sequence': array([0.82721383, 0.82721383, 0.51709276, 0.8759286 , 0.51709276]), 'label': 1}, {'sequence': array([0.39679278, 0.39679278, 0.39679278, 0.39679278, 0.39679278]), 'label': 0}, {'sequence': array([0.24944616, 0.24944616, 0.24944616, 0.24944616, 0.24944616]), 'label': 0}, {'sequence': array([0.89778769, 0.89778769, 0.89778769, 0.89778769, 0.89778769]), 'label': 1}, {'sequence': array([0.6169539, 0.6169539, 0.6169539, 0.6169539, 0.6169539]), 'label': 1}, {'sequence': array([0.55395703, 0.96918143, 0.55482924, 0.96917911, 0.96917911]), 'label': 1}, {'sequence': array([0.52830194, 0.52830194, 0.52830194, 0.52830194, 0.52830194]), 'label': 1}, {'sequence': array([0.98795346, 0.98795346, 0.71651537, 0.98795274, 0.98795274]), 'label': 1}, {'sequence': array([0.93307509, 0.93307509, 0.93307509, 0.93307509, 0.93307509]), 'label': 1}, {'sequence': array([0.78466993, 0.78466993, 0.78466993, 0.78466993, 0.78466993]), 'label': 1}, {'sequence': array([0.80000029, 0.80000029, 0.80000029, 0.80000029, 0.80000029]), 'label': 1}, {'sequence': array([0.5774993, 0.5774993, 0.5774993, 0.5774993, 0.5774993]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.57104551, 0.57104551, 0.57104551, 0.57104551, 0.57104551]), 'label': 1}, {'sequence': array([0.77484694, 0.77484694, 0.77484694, 0.77484694, 0.77484694]), 'label': 1}, {'sequence': array([0.83410131, 0.83410131, 0.83410131, 0.83410131, 0.83410131]), 'label': 1}, {'sequence': array([0.38267438, 0.38267438, 0.38267438, 0.38267438, 0.38267438]), 'label': 0}, {'sequence': array([0.97337255, 0.97337255, 0.97337255, 0.97337255, 0.97337255]), 'label': 1}, {'sequence': array([0.99712833, 0.99712833, 0.99712833, 0.99712833, 0.99712637]), 'label': 1}, {'sequence': array([0.04768499, 0.04768499, 0.04768499, 0.04768499, 0.04768499]), 'label': 0}, {'sequence': array([0.90589191, 0.90589191, 0.90589191, 0.90589191, 0.90589191]), 'label': 1}, {'sequence': array([0.53101301, 0.53101301, 0.53101301, 0.53101301, 0.53101301]), 'label': 1}, {'sequence': array([0.14192839, 0.14192839, 0.14192839, 0.14192839, 0.14192839]), 'label': 0}, {'sequence': array([0.30287471, 0.30287471, 0.30287471, 0.30287471, 0.30287471]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.28891791  0.69469906 -0.075332    0.339447    0.65284832  0.68093091\n","  0.69975784  0.57291574  0.33759996  0.42114486  0.7753581   0.18568572\n","  0.98752792  0.24884106 -0.06104675  0.76879823  1.02413945  0.20436517\n","  0.17639474  0.26118029]\n","Iteration 1 - Learning Rate: 0.186939\n","Iteration 1 - Training Accuracy: 44.00%\n","Iteration 1 - Test Accuracy: 49.60%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.28958773  0.64239072 -0.12881699  0.37538926  0.59544354  0.6820023\n","  0.7180882   0.55866429  0.39399269  0.39153113  0.71670575  0.22463001\n","  1.03215661  0.20835594 -0.12878681  0.8035168   1.07682493  0.22981963\n","  0.19409125  0.25243787]\n","Iteration 2 - Learning Rate: 0.222055\n","Iteration 2 - Training Accuracy: 44.00%\n","Iteration 2 - Test Accuracy: 49.60%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.37048693  0.55520419 -0.21736236  0.35286101  0.5672439   0.6016151\n","  0.63830712  0.59112932  0.39895152  0.3275409   0.64117049  0.22582604\n","  0.97260991  0.13122371 -0.23197819  0.87423607  1.13732489  0.21302918\n","  0.17717747  0.23106914]\n","Iteration 3 - Learning Rate: 0.255524\n","Iteration 3 - Training Accuracy: 48.00%\n","Iteration 3 - Test Accuracy: 49.60%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.37251399  0.48761575 -0.3108011   0.35532677  0.51672374  0.6045044\n","  0.63491463  0.62351524  0.41555911  0.29406846  0.58283403  0.25005065\n","  0.98452011  0.06255697 -0.28596423  0.88108434  1.13509149  0.17000307\n","  0.17854875  0.25990328]\n","Iteration 4 - Learning Rate: 0.286007\n","Iteration 4 - Training Accuracy: 50.00%\n","Iteration 4 - Test Accuracy: 50.40%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.37499856  0.43088827 -0.38327258  0.3513342   0.49527129  0.64672605\n","  0.63911961  0.64753875  0.43778938  0.22615969  0.48831131  0.23573718\n","  1.00273982  0.08144634 -0.41121553  0.95045557  1.17141583  0.17639075\n","  0.21921932  0.28988187]\n","Iteration 5 - Learning Rate: 0.318445\n","Iteration 5 - Training Accuracy: 50.00%\n","Iteration 5 - Test Accuracy: 50.40%\n","Global Loss for Round 2: 0.41848794045847953\n","Time for Round 2: 1164.39 s\n","Best client for epoch 2 is Client 2 with test accuracy 0.88\n","Global Model Accuracy in Epoch 2: 0.75\n","----------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  30%|███       | 3/10 [58:42<2:16:55, 1173.70s/it]"]},{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","File saved to /content/drive/MyDrive/DQFL_Genome_IID_Global_2504_2025_.csv\n","\n","\n","Fed_Epoch: 3\n","\n","\n","Fed_Epoch 3, Client 1:\n","Training data for epoch 3: 50\n","Client Data Structure:\n","[{'sequence': array([0.12204259, 0.12204259, 0.12204259, 0.12204259, 0.12204259]), 'label': 0}, {'sequence': array([0.20126291, 0.20126291, 0.20126291, 0.20126291, 0.20126291]), 'label': 0}, {'sequence': array([0.30599388, 0.30599388, 0.30599388, 0.30599388, 0.30599388]), 'label': 0}, {'sequence': array([0.84608638, 0.84608638, 0.84608638, 0.84608638, 0.84608638]), 'label': 1}, {'sequence': array([0.68776648, 0.68776598, 0.68776598, 0.56645927, 0.68776264]), 'label': 1}, {'sequence': array([0.34482463, 0.34482463, 0.34482463, 0.34482463, 0.34482463]), 'label': 0}, {'sequence': array([0.11423986, 0.11423986, 0.11423986, 0.11423986, 0.11423986]), 'label': 0}, {'sequence': array([0.64312282, 0.64312282, 0.64312282, 0.64312282, 0.64312282]), 'label': 1}, {'sequence': array([0.76209872, 0.76209872, 0.76209872, 0.76209872, 0.76209872]), 'label': 1}, {'sequence': array([0.23536212, 0.23536212, 0.23536212, 0.23536212, 0.23536212]), 'label': 0}, {'sequence': array([0.15938728, 0.15938728, 0.15938728, 0.15938728, 0.15938728]), 'label': 0}, {'sequence': array([0.51014448, 0.51014448, 0.51014448, 0.51014448, 0.51014448]), 'label': 0}, {'sequence': array([0.31062106, 0.31062106, 0.31062106, 0.31062106, 0.31062106]), 'label': 0}, {'sequence': array([0.69351743, 0.69351743, 0.69351743, 0.69351743, 0.69351743]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.86802186, 0.86802186, 0.86802186, 0.86802186, 0.86802186]), 'label': 1}, {'sequence': array([0.82341059, 0.82341059, 0.82341059, 0.82341059, 0.82341059]), 'label': 1}, {'sequence': array([0.51738896, 0.51738896, 0.51738896, 0.51738896, 0.51738896]), 'label': 1}, {'sequence': array([0.28558968, 0.28558968, 0.28558968, 0.28558968, 0.28558968]), 'label': 0}, {'sequence': array([0.07846943, 0.07846943, 0.07846943, 0.07846943, 0.07846943]), 'label': 0}, {'sequence': array([0.46493741, 0.46493741, 0.46493741, 0.46493741, 0.46493741]), 'label': 0}, {'sequence': array([0.37861032, 0.37861032, 0.37861032, 0.37861032, 0.37861032]), 'label': 0}, {'sequence': array([0.3638817, 0.3638817, 0.3638817, 0.3638817, 0.3638817]), 'label': 0}, {'sequence': array([0.07980322, 0.07980322, 0.06964004, 0.07980054, 0.07980054]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.41799092, 0.41799092, 0.41799092, 0.41799092, 0.41799092]), 'label': 0}, {'sequence': array([0.22884281, 0.22884281, 0.22884281, 0.22884281, 0.22884281]), 'label': 0}, {'sequence': array([0.84143594, 0.84143586, 0.84143586, 0.84143586, 0.84143586]), 'label': 1}, {'sequence': array([0.96182151, 0.96182151, 0.96182151, 0.96182151, 0.96182151]), 'label': 1}, {'sequence': array([0.65012618, 0.65012618, 0.65012618, 0.65012618, 0.65012618]), 'label': 1}, {'sequence': array([0.16997334, 0.16997334, 0.16997334, 0.16997334, 0.16997334]), 'label': 0}, {'sequence': array([0.48500874, 0.48500874, 0.48500874, 0.48500874, 0.48500874]), 'label': 0}, {'sequence': array([0.73972354, 0.73972354, 0.73972354, 0.73972354, 0.73972354]), 'label': 1}, {'sequence': array([0.72480563, 0.72480563, 0.72480563, 0.72480563, 0.72480563]), 'label': 1}, {'sequence': array([0.83749797, 0.83749797, 0.83749797, 0.83749797, 0.83749797]), 'label': 1}, {'sequence': array([0.81225221, 0.81225221, 0.81225221, 0.81225221, 0.81225221]), 'label': 1}, {'sequence': array([0.76788656, 0.76788656, 0.76788656, 0.76788656, 0.76788656]), 'label': 1}, {'sequence': array([0.17013496, 0.17013496, 0.09022687, 0.09022687, 0.09022687]), 'label': 0}, {'sequence': array([0.95913435, 0.95913435, 0.95913435, 0.95913435, 0.95913435]), 'label': 1}, {'sequence': array([0.82550035, 0.82550035, 0.82550035, 0.82550035, 0.82550035]), 'label': 1}, {'sequence': array([0.56571918, 0.56571918, 0.56571918, 0.56571918, 0.56571918]), 'label': 1}, {'sequence': array([0.42323391, 0.42323391, 0.42323391, 0.42323391, 0.42323391]), 'label': 0}, {'sequence': array([0.40027032, 0.40027032, 0.40027032, 0.40027032, 0.40027032]), 'label': 0}, {'sequence': array([0.54467809, 0.54467809, 0.54467809, 0.54467809, 0.54467809]), 'label': 1}, {'sequence': array([0.93730374, 0.93730374, 0.93730374, 0.93730374, 0.93730374]), 'label': 1}, {'sequence': array([0.04811512, 0.04811512, 0.04811512, 0.04811512, 0.04811512]), 'label': 0}, {'sequence': array([0.58638355, 0.58638355, 0.58638355, 0.58638355, 0.58638355]), 'label': 1}, {'sequence': array([0.35938431, 0.35938431, 0.35938431, 0.35938431, 0.35938431]), 'label': 0}, {'sequence': array([0.78428618, 0.78428618, 0.78428618, 0.78428618, 0.78428618]), 'label': 1}, {'sequence': array([0.06690462, 0.06690462, 0.06690208, 0.0669015 , 0.06690107]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.5372866  0.55836704 0.62685579 0.05733782 0.01072743 0.21919082\n"," 0.65407463 0.63166108 0.58316287 0.61331006 0.75073822 1.04621399\n"," 0.66902899 0.77284092 0.60938042 0.79994666 0.9202113  0.65909984\n"," 0.05569971 0.72313747]\n","Iteration 1 - Learning Rate: 0.168598\n","Iteration 1 - Training Accuracy: 56.00%\n","Iteration 1 - Test Accuracy: 62.40%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.41266152  0.56317297  0.6721274   0.07688424 -0.04638842  0.23789065\n","  0.63584027  0.66935608  0.54725083  0.55525076  0.72582357  1.04422555\n","  0.67178722  0.71068882  0.68824461  0.74486731  0.85903848  0.66944203\n","  0.0290508   0.70615859]\n","Iteration 2 - Learning Rate: 0.198860\n","Iteration 2 - Training Accuracy: 58.00%\n","Iteration 2 - Test Accuracy: 69.60%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.46325301  0.59307587  0.75877225  0.14853165 -0.19169573  0.30043399\n","  0.641358    0.75208435  0.5089623   0.50943361  0.77688358  1.11467621\n","  0.67569488  0.68276803  0.66156617  0.66922262  0.83818414  0.78530814\n","  0.08234935  0.63229636]\n","Iteration 3 - Learning Rate: 0.235502\n","Iteration 3 - Training Accuracy: 74.00%\n","Iteration 3 - Test Accuracy: 72.80%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.48965508  0.52093798  0.74629433  0.19219982 -0.30819181  0.29782391\n","  0.5869644   0.72682305  0.53686012  0.44074519  0.828747    1.14769894\n","  0.63014703  0.63058698  0.67695168  0.61552437  0.81359114  0.78938426\n","  0.08777307  0.63104423]\n","Iteration 4 - Learning Rate: 0.268112\n","Iteration 4 - Training Accuracy: 80.00%\n","Iteration 4 - Test Accuracy: 76.80%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.50250971  0.43434957  0.75737523  0.26604664 -0.36846394  0.31287796\n","  0.58371475  0.77484348  0.58189673  0.33461069  0.88965464  1.23074694\n","  0.60108192  0.616239    0.66989652  0.57106979  0.76605153  0.89311654\n","  0.09538479  0.6411636 ]\n","Iteration 5 - Learning Rate: 0.302392\n","Iteration 5 - Training Accuracy: 84.00%\n","Iteration 5 - Test Accuracy: 79.20%\n","\n","\n","Fed_Epoch 3, Client 2:\n","Training data for epoch 3: 50\n","Client Data Structure:\n","[{'sequence': array([0.87804952, 0.87804952, 0.87804952, 0.87804952, 0.87804952]), 'label': 1}, {'sequence': array([0.10190104, 0.10190104, 0.10190104, 0.10190104, 0.10190104]), 'label': 0}, {'sequence': array([0.11281214, 0.11281214, 0.11281214, 0.11281214, 0.11281214]), 'label': 0}, {'sequence': array([0.48493996, 0.48493996, 0.48493996, 0.48493996, 0.48493996]), 'label': 0}, {'sequence': array([0.12750061, 0.12750061, 0.12750061, 0.12750061, 0.12750025]), 'label': 0}, {'sequence': array([0.90693929, 0.90693929, 0.90693929, 0.90693929, 0.90693929]), 'label': 1}, {'sequence': array([0.07353583, 0.07353583, 0.07353583, 0.07353583, 0.07353583]), 'label': 0}, {'sequence': array([0.67891514, 0.67891514, 0.67891514, 0.67891514, 0.67891514]), 'label': 1}, {'sequence': array([0.34525679, 0.34525679, 0.34525679, 0.34525679, 0.34525679]), 'label': 0}, {'sequence': array([0.27361055, 0.27361055, 0.27361055, 0.27361055, 0.27361055]), 'label': 0}, {'sequence': array([0.42308418, 0.42308418, 0.42308418, 0.42308418, 0.42308418]), 'label': 0}, {'sequence': array([0.57597353, 0.57597353, 0.57597353, 0.57597353, 0.57597353]), 'label': 1}, {'sequence': array([0.68863529, 0.68863529, 0.68863529, 0.68863529, 0.68863529]), 'label': 1}, {'sequence': array([0.39332328, 0.39332328, 0.39332328, 0.39332328, 0.39332328]), 'label': 0}, {'sequence': array([0.84874368, 0.84874368, 0.84874368, 0.84874368, 0.84874368]), 'label': 1}, {'sequence': array([0.57175393, 0.57175393, 0.57175393, 0.57175393, 0.57175393]), 'label': 1}, {'sequence': array([0.12452603, 0.12452603, 0.12452603, 0.12452603, 0.12452603]), 'label': 0}, {'sequence': array([0.47847957, 0.47847957, 0.47847957, 0.47847957, 0.47847957]), 'label': 0}, {'sequence': array([0.25763924, 0.25763924, 0.25763924, 0.25763924, 0.25763924]), 'label': 0}, {'sequence': array([0.40306017, 0.40306017, 0.40306017, 0.40306017, 0.40306017]), 'label': 0}, {'sequence': array([0.60579523, 0.60579523, 0.60579523, 0.60579523, 0.60579523]), 'label': 1}, {'sequence': array([0.47402045, 0.47402045, 0.47402045, 0.47402045, 0.47402045]), 'label': 0}, {'sequence': array([0.48629833, 0.48629833, 0.17459321, 0.17459321, 0.17459321]), 'label': 0}, {'sequence': array([0.95052086, 0.95052086, 0.95052086, 0.95052086, 0.95052086]), 'label': 1}, {'sequence': array([0.51162018, 0.51162018, 0.51162018, 0.51162018, 0.51162018]), 'label': 0}, {'sequence': array([0.55544381, 0.55544381, 0.55544381, 0.55544381, 0.55544381]), 'label': 1}, {'sequence': array([0.99326552, 0.99326552, 0.99326552, 0.99326552, 0.99326552]), 'label': 1}, {'sequence': array([0.76486791, 0.76486791, 0.76486791, 0.76486791, 0.76486791]), 'label': 1}, {'sequence': array([0.41010542, 0.41010542, 0.41010542, 0.41010542, 0.41010542]), 'label': 0}, {'sequence': array([0.38086328, 0.38086328, 0.38086328, 0.38086328, 0.38086328]), 'label': 0}, {'sequence': array([0.5148561, 0.5148561, 0.5148561, 0.5148561, 0.5148561]), 'label': 1}, {'sequence': array([0.97472946, 0.97472946, 0.97472946, 0.97472946, 0.97472946]), 'label': 1}, {'sequence': array([0.06078058, 0.06078058, 0.06078058, 0.06078058, 0.06078058]), 'label': 0}, {'sequence': array([0.47271927, 0.47271927, 0.47271927, 0.47271927, 0.47271927]), 'label': 0}, {'sequence': array([0.22004038, 0.22004038, 0.22004038, 0.22004038, 0.22004038]), 'label': 0}, {'sequence': array([0.7510002, 0.7510002, 0.7510002, 0.7510002, 0.7510002]), 'label': 1}, {'sequence': array([0.24015244, 0.24015244, 0.24015244, 0.24015244, 0.24015244]), 'label': 0}, {'sequence': array([0.6721484, 0.6721484, 0.6721484, 0.6721484, 0.6721484]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.19339039, 0.19339039, 0.19339039, 0.19339039, 0.19339039]), 'label': 0}, {'sequence': array([0.83927349, 0.83927349, 0.83927349, 0.83927349, 0.83927349]), 'label': 1}, {'sequence': array([0.71090233, 0.71090233, 0.71090233, 0.71090233, 0.71090233]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.04651296, 0.04651296, 0.04651296, 0.04651296, 0.04651296]), 'label': 0}, {'sequence': array([0.79073614, 0.79073614, 0.79073614, 0.79073614, 0.79073614]), 'label': 1}, {'sequence': array([0.66864644, 0.66864644, 0.66864644, 0.66864644, 0.66864644]), 'label': 1}, {'sequence': array([0.51001925, 0.51001925, 0.51001925, 0.51001925, 0.51001925]), 'label': 0}, {'sequence': array([0.76989174, 0.76989174, 0.76989174, 0.76989174, 0.76989174]), 'label': 1}, {'sequence': array([0.01579716, 0.01579716, 0.01579716, 0.01579716, 0.01579716]), 'label': 0}, {'sequence': array([0.77968429, 0.77968429, 0.77968429, 0.77968429, 0.77968429]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.63079828  0.90528623  0.21760489  0.99457514  0.47908941  0.93188209\n","  0.77835552  0.80750211  0.34725794  0.2112622   0.61509897  0.32002903\n","  1.05841163  0.50323846  0.04456137  0.43461911  0.54256637 -0.0235387\n","  0.19342638  0.01160085]\n","Iteration 1 - Learning Rate: 0.179769\n","Iteration 1 - Training Accuracy: 52.00%\n","Iteration 1 - Test Accuracy: 57.60%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.64030216  0.87103539  0.21325263  0.97492864  0.40152874  0.92225112\n","  0.74772489  0.75826288  0.35147864  0.21743745  0.61763666  0.26485483\n","  1.11604885  0.46450224  0.01088854  0.40661833  0.48820486 -0.03899777\n","  0.15076177  0.03656192]\n","Iteration 2 - Learning Rate: 0.206551\n","Iteration 2 - Training Accuracy: 52.00%\n","Iteration 2 - Test Accuracy: 58.40%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.66894896  0.86333504  0.19503301  0.99758049  0.40177909  0.91360492\n","  0.72559648  0.80402363  0.34131597  0.19572487  0.59100565  0.26672261\n","  1.12297068  0.47192858 -0.00540608  0.37291544  0.45528438 -0.05756276\n","  0.08883633  0.07758998]\n","Iteration 3 - Learning Rate: 0.228322\n","Iteration 3 - Training Accuracy: 52.00%\n","Iteration 3 - Test Accuracy: 58.40%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.70653321  0.88667891  0.16553509  1.00787123  0.37330286  0.89607844\n","  0.73997297  0.80972286  0.3489217   0.19359304  0.56364244  0.23288173\n","  1.16728809  0.46909271 -0.01206135  0.38177578  0.42455282 -0.09462564\n","  0.08128655  0.11889575]\n","Iteration 4 - Learning Rate: 0.247192\n","Iteration 4 - Training Accuracy: 52.00%\n","Iteration 4 - Test Accuracy: 58.40%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.75580683  0.8979357   0.18473624  1.00971734  0.34681705  0.89732659\n","  0.72442725  0.81219009  0.37448275  0.20666591  0.55387394  0.21351057\n","  1.19735626  0.47039326  0.02149052  0.38705361  0.42397377 -0.10330643\n","  0.06387645  0.16041029]\n","Iteration 5 - Learning Rate: 0.264490\n","Iteration 5 - Training Accuracy: 52.00%\n","Iteration 5 - Test Accuracy: 58.40%\n","\n","\n","Fed_Epoch 3, Client 3:\n","Training data for epoch 3: 50\n","Client Data Structure:\n","[{'sequence': array([0.3786796, 0.3786796, 0.3786796, 0.3786796, 0.3786796]), 'label': 0}, {'sequence': array([0.17615587, 0.17615587, 0.17615587, 0.17615587, 0.42550608]), 'label': 0}, {'sequence': array([0.34964916, 0.34964916, 0.34964916, 0.34964916, 0.34964916]), 'label': 0}, {'sequence': array([0.85721831, 0.85721831, 0.85721831, 0.85721831, 0.85721831]), 'label': 1}, {'sequence': array([0.36205871, 0.36205871, 0.36205871, 0.36205871, 0.36205871]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.92303794, 0.92303794, 0.92303794, 0.92303794, 0.92303794]), 'label': 1}, {'sequence': array([0.92378513, 0.92378513, 0.92378513, 0.92378513, 0.92378513]), 'label': 1}, {'sequence': array([0.62666789, 0.62666789, 0.62666789, 0.62666789, 0.62666789]), 'label': 1}, {'sequence': array([0.09834109, 0.09834109, 0.09834109, 0.09834109, 0.09834109]), 'label': 0}, {'sequence': array([0.69118627, 0.69118627, 0.69118627, 0.69118627, 0.69118627]), 'label': 1}, {'sequence': array([0.00279499, 0.00279499, 0.00279499, 0.00279499, 0.00279499]), 'label': 0}, {'sequence': array([0.07088172, 0.07088172, 0.07088172, 0.07088172, 0.07088172]), 'label': 0}, {'sequence': array([0.97089622, 0.97089622, 0.97089622, 0.97089622, 0.97089622]), 'label': 1}, {'sequence': array([0.75501173, 0.75501173, 0.75501173, 0.75501173, 0.75501173]), 'label': 1}, {'sequence': array([0.83251168, 0.83251168, 0.83251168, 0.83251168, 0.83251168]), 'label': 1}, {'sequence': array([0.46696325, 0.46696325, 0.46696325, 0.46696325, 0.46696325]), 'label': 0}, {'sequence': array([0.98975007, 0.98975007, 0.98975007, 0.98975007, 0.98975007]), 'label': 1}, {'sequence': array([0.79021846, 0.78136965, 0.51427001, 0.79021506, 0.79021506]), 'label': 1}, {'sequence': array([0.7448513, 0.7448513, 0.7448513, 0.7448513, 0.7448513]), 'label': 1}, {'sequence': array([0.16276489, 0.16276489, 0.16276489, 0.16276489, 0.16276489]), 'label': 0}, {'sequence': array([0.08958845, 0.08958845, 0.08958845, 0.08958845, 0.08958845]), 'label': 0}, {'sequence': array([0.43011507, 0.43011507, 0.43011507, 0.43011507, 0.43011507]), 'label': 0}, {'sequence': array([0.58731425, 0.58731425, 0.58731425, 0.58731425, 0.58731425]), 'label': 1}, {'sequence': array([0.3277792, 0.3277792, 0.3277792, 0.3277792, 0.3277792]), 'label': 0}, {'sequence': array([0.68896258, 0.68896258, 0.68896258, 0.68896258, 0.68896258]), 'label': 1}, {'sequence': array([0.64468787, 0.64468787, 0.64468787, 0.64468787, 0.64468787]), 'label': 1}, {'sequence': array([0.50944461, 0.50944461, 0.50944461, 0.50944461, 0.50944461]), 'label': 0}, {'sequence': array([0.95291226, 0.95291226, 0.95291226, 0.95291226, 0.95291226]), 'label': 1}, {'sequence': array([0.66471536, 0.66471536, 0.66471536, 0.61764196, 0.61764102]), 'label': 1}, {'sequence': array([0.43320025, 0.43320025, 0.43320025, 0.43320025, 0.43320025]), 'label': 0}, {'sequence': array([0.24011686, 0.00755241, 0.06251623, 0.24011055, 0.24011055]), 'label': 0}, {'sequence': array([0.94765948, 0.94765948, 0.94765948, 0.94765948, 0.94765948]), 'label': 1}, {'sequence': array([0.76594319, 0.76594319, 0.76594319, 0.76594319, 0.76594319]), 'label': 1}, {'sequence': array([0.14967663, 0.14967663, 0.14967663, 0.14967663, 0.14967663]), 'label': 0}, {'sequence': array([0.90374171, 0.90374171, 0.90374171, 0.90374171, 0.90374171]), 'label': 1}, {'sequence': array([0.57482389, 0.57482389, 0.57482389, 0.57482389, 0.57482389]), 'label': 1}, {'sequence': array([0.22741683, 0.22741683, 0.22741683, 0.22741683, 0.22741683]), 'label': 0}, {'sequence': array([0.26108141, 0.26108141, 0.26108141, 0.26108141, 0.26108141]), 'label': 0}, {'sequence': array([0.06733054, 0.06733054, 0.06733054, 0.06733054, 0.06733054]), 'label': 0}, {'sequence': array([0.26179846, 0.26179846, 0.26179846, 0.26179846, 0.26179846]), 'label': 0}, {'sequence': array([0.61295056, 0.61295056, 0.61295056, 0.61295056, 0.61295056]), 'label': 1}, {'sequence': array([0.60868944, 0.60868944, 0.60868944, 0.60868944, 0.60868944]), 'label': 1}, {'sequence': array([0.53904491, 0.53904491, 0.53904491, 0.53904491, 0.51577071]), 'label': 1}, {'sequence': array([0.85725824, 0.85725824, 0.85725824, 0.85725824, 0.85725824]), 'label': 1}, {'sequence': array([0.93558374, 0.93558374, 0.93558374, 0.93558374, 0.93558374]), 'label': 1}, {'sequence': array([0.11937566, 0.11937566, 0.11937566, 0.11937566, 0.11937566]), 'label': 0}, {'sequence': array([0.03360588, 0.03360588, 0.03360588, 0.03360588, 0.03360588]), 'label': 0}, {'sequence': array([0.84200695, 0.84200695, 0.84200695, 0.84200695, 0.84200695]), 'label': 1}, {'sequence': array([0.17386196, 0.17386196, 0.17386196, 0.17386196, 0.17386196]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.46019939 0.41949835 0.07332287 1.02834823 0.05432551 0.61058577\n"," 0.47803372 0.778946   0.14813365 0.90934467 0.38421183 0.02246808\n"," 0.79146408 0.89093642 0.37647073 0.50399692 0.38870059 0.12985213\n"," 0.8113999  0.72348079]\n","Iteration 1 - Learning Rate: 0.182162\n","Iteration 1 - Training Accuracy: 72.00%\n","Iteration 1 - Test Accuracy: 66.40%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.40950753  0.49481985 -0.05057167  1.19421225 -0.11969456  0.67885952\n","  0.42689593  0.64746047  0.00518016  0.77576983  0.37173631  0.12599985\n","  0.75503336  0.86123161  0.53320721  0.61198848  0.122128    0.10580949\n","  0.82648466  0.57223741]\n","Iteration 2 - Learning Rate: 0.236638\n","Iteration 2 - Training Accuracy: 76.00%\n","Iteration 2 - Test Accuracy: 73.60%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.26193175  0.46775466  0.00337074  1.24101213 -0.17937146  0.7127018\n","  0.40348796  0.57367963  0.01349374  0.71007236  0.35311032  0.143915\n","  0.80619297  0.78648118  0.60357228  0.65021709  0.00289586  0.18133758\n","  0.77571036  0.63673968]\n","Iteration 3 - Learning Rate: 0.289726\n","Iteration 3 - Training Accuracy: 82.00%\n","Iteration 3 - Test Accuracy: 75.20%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.20515261  0.44594195 -0.05340511  1.31827973 -0.22961479  0.67350291\n","  0.34062447  0.5189302   0.06979858  0.65003507  0.38122592  0.14968076\n","  0.81611306  0.7637818   0.64497149  0.66467957 -0.02405534  0.20089875\n","  0.75413483  0.60079234]\n","Iteration 4 - Learning Rate: 0.332087\n","Iteration 4 - Training Accuracy: 86.00%\n","Iteration 4 - Test Accuracy: 80.80%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.19983038  0.4213321  -0.08251863  1.38327851 -0.25598191  0.71884318\n","  0.3414226   0.47584159  0.16557697  0.626608    0.40252147  0.11191349\n","  0.83205354  0.74248457  0.65120046  0.64781324 -0.04514579  0.18025598\n","  0.71620763  0.6096827 ]\n","Iteration 5 - Learning Rate: 0.361693\n","Iteration 5 - Training Accuracy: 84.00%\n","Iteration 5 - Test Accuracy: 80.80%\n","\n","\n","Fed_Epoch 3, Client 4:\n","Training data for epoch 3: 50\n","Client Data Structure:\n","[{'sequence': array([0.87855734, 0.87855734, 0.87855705, 0.87855705, 0.87855705]), 'label': 1}, {'sequence': array([0.09809381, 0.09809381, 0.09809381, 0.08533516, 0.08533516]), 'label': 0}, {'sequence': array([0.45870741, 0.45870741, 0.45870741, 0.45870741, 0.45870741]), 'label': 0}, {'sequence': array([0.78709575, 0.78709575, 0.78709575, 0.78709575, 0.78709575]), 'label': 1}, {'sequence': array([0.38733208, 0.38733208, 0.38733208, 0.38733208, 0.38733208]), 'label': 0}, {'sequence': array([0.78058484, 0.78058484, 0.78058484, 0.78058484, 0.78058484]), 'label': 1}, {'sequence': array([0.48106179, 0.48106179, 0.48106179, 0.48106179, 0.48106179]), 'label': 0}, {'sequence': array([0.88483299, 0.88483299, 0.88483299, 0.88483299, 0.88483299]), 'label': 1}, {'sequence': array([0.14940007, 0.14940007, 0.14940007, 0.14940007, 0.14940007]), 'label': 0}, {'sequence': array([0.89845806, 0.89845806, 0.89845806, 0.89845806, 0.89845806]), 'label': 1}, {'sequence': array([0.94594209, 0.94594209, 0.94594209, 0.94594209, 0.94594209]), 'label': 1}, {'sequence': array([0.26732272, 0.26732272, 0.26732272, 0.26732272, 0.26732272]), 'label': 0}, {'sequence': array([0.2050334, 0.2050334, 0.2050334, 0.2050334, 0.2050334]), 'label': 0}, {'sequence': array([0.94004532, 0.94004532, 0.94004532, 0.94004482, 0.94004482]), 'label': 1}, {'sequence': array([0.09815853, 0.09815853, 0.09815853, 0.09815853, 0.09815853]), 'label': 0}, {'sequence': array([0.46582492, 0.46582492, 0.46582492, 0.46582492, 0.46582492]), 'label': 0}, {'sequence': array([0.99806997, 0.99806997, 0.99806997, 0.99806997, 0.99806997]), 'label': 1}, {'sequence': array([0.66101351, 0.66101285, 0.66101285, 0.66101285, 0.66101285]), 'label': 1}, {'sequence': array([0.07996926, 0.07996926, 0.07996926, 0.07996926, 0.07996926]), 'label': 0}, {'sequence': array([0.77192591, 0.77192591, 0.77192591, 0.77192591, 0.77192591]), 'label': 1}, {'sequence': array([0.7577054, 0.7577054, 0.7577054, 0.7577054, 0.7577054]), 'label': 1}, {'sequence': array([0.24080825, 0.24080825, 0.24080825, 0.24080825, 0.24080825]), 'label': 0}, {'sequence': array([0.04627438, 0.04627438, 0.04627438, 0.04627438, 0.04627438]), 'label': 0}, {'sequence': array([0.56592493, 0.56592493, 0.56592493, 0.56592493, 0.56592493]), 'label': 1}, {'sequence': array([0.02028338, 0.02028338, 0.02028338, 0.02028338, 0.02028338]), 'label': 0}, {'sequence': array([0.86979564, 0.86979564, 0.86979564, 0.86979564, 0.86979564]), 'label': 1}, {'sequence': array([0.02492289, 0.02492289, 0.02492289, 0.02492289, 0.02492289]), 'label': 0}, {'sequence': array([0.46667952, 0.46667952, 0.46667952, 0.46667952, 0.46667952]), 'label': 0}, {'sequence': array([0.49061235, 0.49061235, 0.49061235, 0.49061235, 0.49061235]), 'label': 0}, {'sequence': array([0.17728623, 0.17728623, 0.17728623, 0.44040972, 0.44040972]), 'label': 0}, {'sequence': array([0.96844293, 0.96844293, 0.96844293, 0.96844293, 0.96844293]), 'label': 1}, {'sequence': array([0.43786635, 0.43786635, 0.43786635, 0.43786635, 0.43786635]), 'label': 0}, {'sequence': array([0.201115, 0.201115, 0.201115, 0.201115, 0.201115]), 'label': 0}, {'sequence': array([0.01069376, 0.01069376, 0.01069376, 0.01069376, 0.01069376]), 'label': 0}, {'sequence': array([0.08398789, 0.08398789, 0.08398789, 0.08398789, 0.08398789]), 'label': 0}, {'sequence': array([0.23414754, 0.23414754, 0.23414754, 0.23414754, 0.23414754]), 'label': 0}, {'sequence': array([0.22528996, 0.22528996, 0.22528996, 0.22528996, 0.22528996]), 'label': 0}, {'sequence': array([0.45720918, 0.45720918, 0.45720918, 0.45720918, 0.45720918]), 'label': 0}, {'sequence': array([0.17321919, 0.17321919, 0.17321919, 0.17321919, 0.17321919]), 'label': 0}, {'sequence': array([0.10714903, 0.10714903, 0.10714903, 0.10714903, 0.10714903]), 'label': 0}, {'sequence': array([0.66306739, 0.66306739, 0.66306739, 0.66306739, 0.66306739]), 'label': 1}, {'sequence': array([0.41240434, 0.41240434, 0.41240434, 0.41240434, 0.41240434]), 'label': 0}, {'sequence': array([0.94987361, 0.94987361, 0.94987361, 0.94987361, 0.94987361]), 'label': 1}, {'sequence': array([0.22359431, 0.22359431, 0.22359431, 0.22359431, 0.22359431]), 'label': 0}, {'sequence': array([0.23379866, 0.23379866, 0.23379866, 0.23379866, 0.23379866]), 'label': 0}, {'sequence': array([0.80595518, 0.80595518, 0.80595518, 0.80595518, 0.80595518]), 'label': 1}, {'sequence': array([0.11726278, 0.11726278, 0.11726278, 0.11726278, 0.11726278]), 'label': 0}, {'sequence': array([0.51993486, 0.51993486, 0.51993486, 0.51993486, 0.51993486]), 'label': 1}, {'sequence': array([0.04211784, 0.04211784, 0.04211784, 0.04211784, 0.04211784]), 'label': 0}, {'sequence': array([0.56063926, 0.56063926, 0.56063926, 0.56063926, 0.56063926]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.32019282  0.17773773  0.35212418  1.0302923   0.41234136  0.21126301\n","  0.48588772  0.43986142  0.28217431  0.80327515  0.80451512  0.9795282\n","  0.56101892  0.5380308   0.32748898 -0.00425271  0.25234414  0.26943527\n","  0.59092645  0.52039377]\n","Iteration 1 - Learning Rate: 0.198075\n","Iteration 1 - Training Accuracy: 70.00%\n","Iteration 1 - Test Accuracy: 60.80%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.4481674   0.27469609  0.28464294  1.17701794  0.40209848  0.22484693\n","  0.45181988  0.32718501  0.4356957   0.76953924  0.73783008  1.00424927\n","  0.59116483  0.65520027  0.27057257 -0.04342885  0.15616596  0.36445412\n","  0.56567561  0.54933168]\n","Iteration 2 - Learning Rate: 0.253401\n","Iteration 2 - Training Accuracy: 72.00%\n","Iteration 2 - Test Accuracy: 61.60%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.47125924  0.3355117   0.18704003  1.26475703  0.32336786  0.21532958\n","  0.45193168  0.14066162  0.54399496  0.77020384  0.79208309  0.97862154\n","  0.57138708  0.68318371  0.14675663  0.01291266 -0.04741224  0.38156443\n","  0.52565181  0.51343434]\n","Iteration 3 - Learning Rate: 0.311269\n","Iteration 3 - Training Accuracy: 72.00%\n","Iteration 3 - Test Accuracy: 61.60%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.50113459  0.3324631   0.10263086  1.32953674  0.21979448  0.32297182\n","  0.53404332  0.12097309  0.62798379  0.70434976  0.85532047  0.96927\n","  0.60682299  0.80313438  0.1360037  -0.05337971 -0.15434952  0.43989606\n","  0.51959773  0.50117031]\n","Iteration 4 - Learning Rate: 0.364020\n","Iteration 4 - Training Accuracy: 72.00%\n","Iteration 4 - Test Accuracy: 61.60%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.53041325  0.37461934  0.1337284   1.41959807  0.19904371  0.26040671\n","  0.57635886  0.0546323   0.6479026   0.77786885  0.83347798  1.02412126\n","  0.55208616  0.87392833  0.12628272 -0.03825434 -0.18819422  0.40596383\n","  0.53747835  0.53810444]\n","Iteration 5 - Learning Rate: 0.403459\n","Iteration 5 - Training Accuracy: 72.00%\n","Iteration 5 - Test Accuracy: 61.60%\n","\n","\n","Fed_Epoch 3, Client 5:\n","Training data for epoch 3: 50\n","Client Data Structure:\n","[{'sequence': array([0.30010864, 0.30010864, 0.30010864, 0.30010864, 0.30010864]), 'label': 0}, {'sequence': array([0.31701058, 0.31701058, 0.31701058, 0.31701058, 0.31701058]), 'label': 0}, {'sequence': array([0.63997271, 0.63997271, 0.63997271, 0.63997271, 0.63997271]), 'label': 1}, {'sequence': array([0.9236541 , 0.92365345, 0.67984141, 0.92365149, 0.92365149]), 'label': 1}, {'sequence': array([0.34418701, 0.34418701, 0.34418701, 0.34418701, 0.34418701]), 'label': 0}, {'sequence': array([0.86006367, 0.86006367, 0.86006367, 0.86006367, 0.86006367]), 'label': 1}, {'sequence': array([0.1954192, 0.1954192, 0.1954192, 0.1954192, 0.1954192]), 'label': 0}, {'sequence': array([0.53649835, 0.53649835, 0.53649835, 0.53649835, 0.53649835]), 'label': 1}, {'sequence': array([0.6542483, 0.6542483, 0.6542483, 0.6542483, 0.6542483]), 'label': 1}, {'sequence': array([0.46883646, 0.46883646, 0.46883646, 0.46883646, 0.46883646]), 'label': 0}, {'sequence': array([0.18121072, 0.18121072, 0.18121072, 0.18121072, 0.18121072]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.55219419, 0.55219419, 0.55219419, 0.55219419, 0.55219419]), 'label': 1}, {'sequence': array([0.33677353, 0.33677353, 0.33677353, 0.33677353, 0.33677353]), 'label': 0}, {'sequence': array([0.78441823, 0.78441823, 0.78441722, 0.78441722, 0.78441722]), 'label': 1}, {'sequence': array([0.60637407, 0.60637407, 0.60637407, 0.60637407, 0.60637407]), 'label': 1}, {'sequence': array([0.99045683, 0.99045683, 0.99045683, 0.99045683, 0.99045683]), 'label': 1}, {'sequence': array([0.28066761, 0.28066761, 0.28066761, 0.28066761, 0.28066761]), 'label': 0}, {'sequence': array([0.01713755, 0.01713755, 0.01713755, 0.01713755, 0.01713755]), 'label': 0}, {'sequence': array([0.70411523, 0.70411523, 0.70411523, 0.70411523, 0.70411523]), 'label': 1}, {'sequence': array([0.67055943, 0.67055943, 0.67055943, 0.67055943, 0.67055943]), 'label': 1}, {'sequence': array([0.44917714, 0.44917714, 0.44917714, 0.44917714, 0.44917714]), 'label': 0}, {'sequence': array([0.64214371, 0.64214371, 0.64214371, 0.64214371, 0.64214371]), 'label': 1}, {'sequence': array([0.41126963, 0.41126963, 0.41126963, 0.41126963, 0.41126963]), 'label': 0}, {'sequence': array([0.0118218, 0.0118218, 0.0118218, 0.0118218, 0.0118218]), 'label': 0}, {'sequence': array([0.7333973, 0.7333973, 0.7333973, 0.7333973, 0.7333973]), 'label': 1}, {'sequence': array([0.54062728, 0.54062728, 0.54062728, 0.54062728, 0.54062728]), 'label': 1}, {'sequence': array([0.69041015, 0.69041015, 0.69041015, 0.69041015, 0.69041015]), 'label': 1}, {'sequence': array([0.4520241, 0.4520241, 0.4520241, 0.4520241, 0.4520241]), 'label': 0}, {'sequence': array([0.68741955, 0.68741955, 0.68741955, 0.68741955, 0.68741955]), 'label': 1}, {'sequence': array([0.0560594, 0.0560594, 0.0560594, 0.0560594, 0.0560594]), 'label': 0}, {'sequence': array([0.84984455, 0.84984455, 0.84984455, 0.84984455, 0.84984455]), 'label': 1}, {'sequence': array([0.68207583, 0.68207583, 0.68207583, 0.68207583, 0.68207583]), 'label': 1}, {'sequence': array([0.60745856, 0.52519213, 0.60745747, 0.60745747, 0.60745697]), 'label': 1}, {'sequence': array([0.35952332, 0.35952332, 0.35952332, 0.35952332, 0.35952332]), 'label': 0}, {'sequence': array([0.1810041, 0.1810041, 0.1810041, 0.1810041, 0.1810041]), 'label': 0}, {'sequence': array([0.46521172, 0.46521172, 0.46521172, 0.46521172, 0.46521172]), 'label': 0}, {'sequence': array([0.901794, 0.901794, 0.901794, 0.901794, 0.901794]), 'label': 1}, {'sequence': array([0.15124712, 0.15124712, 0.15124712, 0.15124712, 0.15124712]), 'label': 0}, {'sequence': array([0.09386675, 0.09386675, 0.09386675, 0.09386675, 0.09386675]), 'label': 0}, {'sequence': array([0.39582657, 0.39582657, 0.39582657, 0.39582657, 0.39582657]), 'label': 0}, {'sequence': array([0.30080032, 0.30080032, 0.30080032, 0.30080032, 0.30080032]), 'label': 0}, {'sequence': array([0.89443675, 0.89443675, 0.89443675, 0.89443675, 0.89443675]), 'label': 1}, {'sequence': array([0.16313841, 0.16313841, 0.16313841, 0.16313841, 0.16313841]), 'label': 0}, {'sequence': array([0.89856735, 0.89856735, 0.89856735, 0.89856735, 0.89856735]), 'label': 1}, {'sequence': array([0.63503563, 0.63503563, 0.63503563, 0.63503563, 0.63503563]), 'label': 1}, {'sequence': array([0.80133778, 0.80133778, 0.80133778, 0.80133778, 0.80133778]), 'label': 1}, {'sequence': array([0.29744409, 0.29744409, 0.29744409, 0.29744409, 0.29744409]), 'label': 0}, {'sequence': array([0.290464, 0.290464, 0.290464, 0.290464, 0.290464]), 'label': 0}, {'sequence': array([0.89152856, 0.89152856, 0.89152856, 0.89152856, 0.89152856]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.27211648 0.84203291 0.64220276 0.29593426 0.07929045 0.08183285\n"," 1.03378426 0.24594872 0.05674855 0.23178012 0.37856436 0.64421417\n"," 0.09871214 0.12490956 1.00989031 0.5712633  0.07368587 0.52944598\n"," 0.20099539 0.91655673]\n","Iteration 1 - Learning Rate: 0.182206\n","Iteration 1 - Training Accuracy: 60.00%\n","Iteration 1 - Test Accuracy: 60.00%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.19006838  0.90215752  0.64714057  0.43702446 -0.04187576  0.12276021\n","  1.05134461  0.28190539  0.03648987  0.23388679  0.41242874  0.68197581\n","  0.14880858  0.14826538  1.06586258  0.47672184  0.03814285  0.52503667\n","  0.18990103  0.86152578]\n","Iteration 2 - Learning Rate: 0.218439\n","Iteration 2 - Training Accuracy: 60.00%\n","Iteration 2 - Test Accuracy: 56.80%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.11185231  0.928742    0.59025285  0.4318304  -0.15197875  0.03842816\n","  1.09418409  0.33289601  0.02346863  0.21793286  0.42156995  0.7003533\n","  0.27548788  0.12540172  1.1213389   0.44997252 -0.02796627  0.54232644\n","  0.16487621  0.84808812]\n","Iteration 3 - Learning Rate: 0.253230\n","Iteration 3 - Training Accuracy: 62.00%\n","Iteration 3 - Test Accuracy: 64.00%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.03730092  0.98404382  0.57812043  0.46374867 -0.23078706  0.03561677\n","  1.06502675  0.26628169  0.0019567   0.21447755  0.41394383  0.68325009\n","  0.29211159  0.14880449  1.18272993  0.36874831 -0.06526119  0.4841071\n","  0.16333771  0.76701941]\n","Iteration 4 - Learning Rate: 0.285962\n","Iteration 4 - Training Accuracy: 64.00%\n","Iteration 4 - Test Accuracy: 65.60%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 5.93021205e-02  1.00183969e+00  5.96695079e-01  5.04399680e-01\n"," -3.35707407e-01 -5.58697306e-04  1.03181066e+00  2.99766017e-01\n"," -1.21386624e-02  2.44838552e-01  4.32692222e-01  7.52583893e-01\n","  2.76249132e-01  1.92714999e-01  1.23005309e+00  3.56439379e-01\n"," -4.55108265e-02  4.58752339e-01  1.30052598e-01  7.05066837e-01]\n","Iteration 5 - Learning Rate: 0.314657\n","Iteration 5 - Training Accuracy: 68.00%\n","Iteration 5 - Test Accuracy: 68.00%\n","\n","\n","Fed_Epoch 3, Client 6:\n","Training data for epoch 3: 50\n","Client Data Structure:\n","[{'sequence': array([0.32516024, 0.32516024, 0.32516024, 0.32516024, 0.32516024]), 'label': 0}, {'sequence': array([0.82544651, 0.60087939, 0.82544455, 0.82544455, 0.82544455]), 'label': 1}, {'sequence': array([0.38551562, 0.38551562, 0.38551562, 0.38551562, 0.38551562]), 'label': 0}, {'sequence': array([0.07762273, 0.07762273, 0.07762273, 0.07762273, 0.07762273]), 'label': 0}, {'sequence': array([0.59345424, 0.59345424, 0.59345424, 0.59345424, 0.59345424]), 'label': 1}, {'sequence': array([0.50564173, 0.50564173, 0.50564173, 0.50564173, 0.50564173]), 'label': 0}, {'sequence': array([0.4430202, 0.4430202, 0.4430202, 0.4430202, 0.4430202]), 'label': 0}, {'sequence': array([0.43937444, 0.43937444, 0.43937444, 0.43937444, 0.43937444]), 'label': 0}, {'sequence': array([0.59125918, 0.59125918, 0.59125918, 0.59125918, 0.59125918]), 'label': 1}, {'sequence': array([0.42406981, 0.42406981, 0.42406981, 0.42406981, 0.42406981]), 'label': 0}, {'sequence': array([0.59441951, 0.59441951, 0.59441951, 0.59441936, 0.59441936]), 'label': 1}, {'sequence': array([0.90534619, 0.90534619, 0.90534619, 0.90534619, 0.90534619]), 'label': 1}, {'sequence': array([0.68480937, 0.68480937, 0.68480937, 0.68480937, 0.68480937]), 'label': 1}, {'sequence': array([0.19307064, 0.19307064, 0.19307064, 0.19307064, 0.19307064]), 'label': 0}, {'sequence': array([0.02803126, 0.02803126, 0.02803126, 0.02803126, 0.02803126]), 'label': 0}, {'sequence': array([0.52777202, 0.52777202, 0.52777202, 0.52777202, 0.52777202]), 'label': 1}, {'sequence': array([0.13956621, 0.13956621, 0.13956621, 0.13956621, 0.13956621]), 'label': 0}, {'sequence': array([0.67959189, 0.67959189, 0.67959189, 0.67959189, 0.67959189]), 'label': 1}, {'sequence': array([0.64515554, 0.64515554, 0.64515554, 0.64515554, 0.64515554]), 'label': 1}, {'sequence': array([0.52276798, 0.52276798, 0.52276798, 0.52276798, 0.52276798]), 'label': 1}, {'sequence': array([0.26700557, 0.04356882, 0.12592765, 0.04356201, 0.04356201]), 'label': 0}, {'sequence': array([0.09704672, 0.09704672, 0.09704672, 0.09704672, 0.09704672]), 'label': 0}, {'sequence': array([0.08620454, 0.08620454, 0.08620454, 0.08620454, 0.08620454]), 'label': 0}, {'sequence': array([0.8622025, 0.8622025, 0.8622025, 0.8622025, 0.8622025]), 'label': 1}, {'sequence': array([0.53652618, 0.53652618, 0.53652618, 0.53652618, 0.53652618]), 'label': 1}, {'sequence': array([0.00568928, 0.00568928, 0.00568928, 0.00568928, 0.00568928]), 'label': 0}, {'sequence': array([0.23601191, 0.23601191, 0.23601191, 0.23601191, 0.23601191]), 'label': 0}, {'sequence': array([0.76862339, 0.76862339, 0.76862339, 0.76862339, 0.76862339]), 'label': 1}, {'sequence': array([0.34647955, 0.34647955, 0.34647955, 0.34647955, 0.34647955]), 'label': 0}, {'sequence': array([0.89986948, 0.89986948, 0.89986948, 0.89986948, 0.89986948]), 'label': 1}, {'sequence': array([0.96571773, 0.96571773, 0.96571773, 0.96571773, 0.96571773]), 'label': 1}, {'sequence': array([0.92871895, 0.92871895, 0.92871895, 0.92871895, 0.92871895]), 'label': 1}, {'sequence': array([0.52187011, 0.52187011, 0.52001444, 0.52186779, 0.52186757]), 'label': 1}, {'sequence': array([0.38555722, 0.38555722, 0.38555722, 0.38555722, 0.38555722]), 'label': 0}, {'sequence': array([0.79270153, 0.79270153, 0.79270153, 0.79270153, 0.79270153]), 'label': 1}, {'sequence': array([0.1520249, 0.1520249, 0.1520249, 0.1520249, 0.1520249]), 'label': 0}, {'sequence': array([0.95352429, 0.95352429, 0.95352378, 0.95352378, 0.95352306]), 'label': 1}, {'sequence': array([0.3941752, 0.3941752, 0.3941752, 0.3941752, 0.3941752]), 'label': 0}, {'sequence': array([0.16929768, 0.16929768, 0.16929768, 0.16929768, 0.16929768]), 'label': 0}, {'sequence': array([0.58431735, 0.58431735, 0.58431735, 0.58431735, 0.58431735]), 'label': 1}, {'sequence': array([0.5307769, 0.5307769, 0.5307769, 0.5307769, 0.5307769]), 'label': 1}, {'sequence': array([0.98260909, 0.98260909, 0.98260909, 0.98260909, 0.98260909]), 'label': 1}, {'sequence': array([0.29032471, 0.29032471, 0.29032471, 0.29032471, 0.29032471]), 'label': 0}, {'sequence': array([0.22581952, 0.22581952, 0.22581952, 0.22581952, 0.22581952]), 'label': 0}, {'sequence': array([0.05789238, 0.05789238, 0.05789238, 0.05789238, 0.05789238]), 'label': 0}, {'sequence': array([0.20967102, 0.20967102, 0.20967102, 0.20967102, 0.20967102]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.35020713, 0.35020713, 0.35020713, 0.35020713, 0.35020713]), 'label': 0}, {'sequence': array([0.6945983, 0.6945983, 0.6945983, 0.6945983, 0.6945983]), 'label': 1}, {'sequence': array([0.64384806, 0.64384806, 0.64384806, 0.64384806, 0.64384806]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.47940731 0.2462736  0.56826125 0.314799   0.35838272 0.89425898\n"," 0.28771714 0.4921799  0.12704418 0.6424039  0.06435593 0.44106205\n"," 0.90545314 0.08402028 0.86178157 0.63112201 0.09798438 0.220565\n"," 0.50183201 0.70178163]\n","Iteration 1 - Learning Rate: 0.183283\n","Iteration 1 - Training Accuracy: 50.00%\n","Iteration 1 - Test Accuracy: 54.40%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [0.43581066 0.28381662 0.53385516 0.38266475 0.27341635 0.93526625\n"," 0.27591053 0.46264293 0.1391275  0.60030168 0.01849203 0.45318403\n"," 1.00073952 0.06713229 0.9000785  0.71176128 0.17783684 0.20757802\n"," 0.44736264 0.70634042]\n","Iteration 2 - Learning Rate: 0.222906\n","Iteration 2 - Training Accuracy: 50.00%\n","Iteration 2 - Test Accuracy: 56.00%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.45054531  0.29227037  0.53974385  0.51966857  0.16914878  1.01150909\n","  0.23370947  0.51187347  0.21834756  0.66482267 -0.01294825  0.48362253\n","  1.04543475  0.02013084  0.82748718  0.66046092  0.17738286  0.16807723\n","  0.35664708  0.72486788]\n","Iteration 3 - Learning Rate: 0.259615\n","Iteration 3 - Training Accuracy: 52.00%\n","Iteration 3 - Test Accuracy: 58.40%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.52802273  0.36045182  0.45158962  0.62224335 -0.0289949   1.04354545\n","  0.20632179  0.49454048  0.22995946  0.56876836 -0.07279278  0.47387028\n","  1.12462749 -0.06010158  0.80167444  0.60391038  0.25116347  0.25255769\n","  0.24801796  0.65283277]\n","Iteration 4 - Learning Rate: 0.301588\n","Iteration 4 - Training Accuracy: 56.00%\n","Iteration 4 - Test Accuracy: 60.80%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.48511672  0.41888474  0.38803157  0.75720035 -0.20661051  1.0300516\n","  0.16874809  0.44724954  0.32817309  0.46975054 -0.11446622  0.44535981\n","  1.16705643 -0.04891935  0.72798367  0.57913305  0.28118441  0.17238458\n","  0.16992119  0.57739011]\n","Iteration 5 - Learning Rate: 0.347351\n","Iteration 5 - Training Accuracy: 64.00%\n","Iteration 5 - Test Accuracy: 76.80%\n","\n","\n","Fed_Epoch 3, Client 7:\n","Training data for epoch 3: 50\n","Client Data Structure:\n","[{'sequence': array([0.0111462, 0.0111462, 0.0111462, 0.0111462, 0.0111462]), 'label': 0}, {'sequence': array([0.88942901, 0.88942901, 0.88942901, 0.88942901, 0.88942901]), 'label': 1}, {'sequence': array([0.16961199, 0.16961199, 0.16961199, 0.16961199, 0.16961199]), 'label': 0}, {'sequence': array([0.2410461, 0.2410461, 0.2410461, 0.2410461, 0.2410461]), 'label': 0}, {'sequence': array([0.98272475, 0.98272475, 0.98272475, 0.98272475, 0.98272475]), 'label': 1}, {'sequence': array([0.92423534, 0.92423534, 0.92423534, 0.92423534, 0.92423534]), 'label': 1}, {'sequence': array([0.17136787, 0.17136787, 0.17136787, 0.17136787, 0.17136787]), 'label': 0}, {'sequence': array([0.00302212, 0.00302212, 0.00302212, 0.00302212, 0.00302212]), 'label': 0}, {'sequence': array([0.35637712, 0.35637712, 0.35637712, 0.35637712, 0.35637712]), 'label': 0}, {'sequence': array([0.03236782, 0.03236782, 0.03236782, 0.03236782, 0.03236782]), 'label': 0}, {'sequence': array([0.72810706, 0.72810706, 0.72810706, 0.72810706, 0.72810706]), 'label': 1}, {'sequence': array([0.28382533, 0.28382533, 0.28382533, 0.28382533, 0.28382533]), 'label': 0}, {'sequence': array([0.44999406, 0.44999406, 0.44999406, 0.31848772, 0.31848772]), 'label': 0}, {'sequence': array([0.15469053, 0.15469053, 0.15469053, 0.15469053, 0.15469053]), 'label': 0}, {'sequence': array([0.12689742, 0.37454661, 0.37454661, 0.37454632, 0.37454117]), 'label': 0}, {'sequence': array([0.12043413, 0.12043413, 0.12043413, 0.12043413, 0.12043413]), 'label': 0}, {'sequence': array([0.9790387, 0.9790387, 0.9790387, 0.9790387, 0.9790387]), 'label': 1}, {'sequence': array([0.38630195, 0.38630195, 0.38630195, 0.38630195, 0.38630195]), 'label': 0}, {'sequence': array([0.07362019, 0.07362019, 0.07362019, 0.07362019, 0.07362019]), 'label': 0}, {'sequence': array([0.96598247, 0.96598247, 0.96598247, 0.96598247, 0.96598247]), 'label': 1}, {'sequence': array([0.57730957, 0.58753805, 0.56389953, 0.71785735, 0.71785735]), 'label': 1}, {'sequence': array([0.62778992, 0.62778992, 0.62778992, 0.62778992, 0.62778992]), 'label': 1}, {'sequence': array([0.25698807, 0.25698807, 0.25698807, 0.25698807, 0.25698807]), 'label': 0}, {'sequence': array([0.49904568, 0.49904568, 0.49904568, 0.49904568, 0.49904568]), 'label': 0}, {'sequence': array([0.4481365, 0.4481365, 0.4481365, 0.4481365, 0.4481365]), 'label': 0}, {'sequence': array([0.33831735, 0.33831735, 0.33831735, 0.33831735, 0.33831735]), 'label': 0}, {'sequence': array([0.04547355, 0.04547355, 0.04547355, 0.04547355, 0.04547355]), 'label': 0}, {'sequence': array([0.45711649, 0.45711649, 0.45711649, 0.45711649, 0.45711649]), 'label': 0}, {'sequence': array([0.88776641, 0.88776641, 0.88776641, 0.88776641, 0.88776641]), 'label': 1}, {'sequence': array([0.08854122, 0.08854122, 0.08854122, 0.08854122, 0.08854122]), 'label': 0}, {'sequence': array([0.01462542, 0.01462542, 0.01462542, 0.01462542, 0.01462542]), 'label': 0}, {'sequence': array([0.84476593, 0.84476593, 0.84476542, 0.84476542, 0.84476542]), 'label': 1}, {'sequence': array([0.57769418, 0.57769418, 0.57769418, 0.57769418, 0.57769418]), 'label': 1}, {'sequence': array([0.49256079, 0.49256079, 0.49256079, 0.49256079, 0.49256079]), 'label': 0}, {'sequence': array([0.84038189, 0.84038189, 0.84038189, 0.84038189, 0.84038189]), 'label': 1}, {'sequence': array([0.13498678, 0.13498678, 0.13498678, 0.13498678, 0.13498678]), 'label': 0}, {'sequence': array([0.20085641, 0.20085641, 0.20085641, 0.20085641, 0.20085641]), 'label': 0}, {'sequence': array([0.92459662, 0.92459662, 0.92459662, 0.92459662, 0.92459662]), 'label': 1}, {'sequence': array([0.38436199, 0.38436199, 0.38436199, 0.38436199, 0.38436199]), 'label': 0}, {'sequence': array([0.52430984, 0.52430984, 0.52430984, 0.52430955, 0.52430955]), 'label': 1}, {'sequence': array([0.11656262, 0.11656262, 0.11656262, 0.11656262, 0.11656262]), 'label': 0}, {'sequence': array([0.90656808, 0.90656808, 0.90656808, 0.90656808, 0.90656808]), 'label': 1}, {'sequence': array([0.99734423, 0.99734423, 0.99734423, 0.99734423, 0.99734423]), 'label': 1}, {'sequence': array([0.17632618, 0.17632618, 0.17632618, 0.17632618, 0.17632618]), 'label': 0}, {'sequence': array([0.3898029, 0.3898029, 0.3898029, 0.3898029, 0.3898029]), 'label': 0}, {'sequence': array([0.12309468, 0.1516913 , 0.1516913 , 0.12309461, 0.15168964]), 'label': 0}, {'sequence': array([0.25480177, 0.25480177, 0.25480177, 0.25480177, 0.25480177]), 'label': 0}, {'sequence': array([0.29345525, 0.29345525, 0.29345525, 0.29345525, 0.29345525]), 'label': 0}, {'sequence': array([0.50683718, 0.50683718, 0.50683718, 0.50683718, 0.50683718]), 'label': 0}, {'sequence': array([0.16012963, 0.16012963, 0.16012963, 0.16012963, 0.16012963]), 'label': 0}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [ 0.62081971  0.79301651  0.31230878 -0.05079053  0.12543353  0.58603104\n","  0.86886633 -0.03732592 -0.01211937  0.56227359  0.79656138  1.02936877\n","  0.40038811 -0.04275547  0.12427981  0.52166818 -0.05230716  0.58490631\n","  0.24728989 -0.31013381]\n","Iteration 1 - Learning Rate: 0.216523\n","Iteration 1 - Training Accuracy: 72.00%\n","Iteration 1 - Test Accuracy: 56.00%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.57525075  0.80104922  0.31266758 -0.07537754  0.05523114  0.63725606\n","  0.89736843 -0.11238019 -0.02827294  0.54512951  0.84044898  0.97456495\n","  0.44352332  0.04685917  0.02706599  0.48931354  0.08590765  0.50668913\n","  0.30607313 -0.3459156 ]\n","Iteration 2 - Learning Rate: 0.291380\n","Iteration 2 - Training Accuracy: 72.00%\n","Iteration 2 - Test Accuracy: 56.00%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.5692165   0.72751074  0.36447468 -0.0970917  -0.03949627  0.70873368\n","  0.89018128 -0.10255668 -0.0018352   0.54016891  0.91781164  0.92219967\n","  0.4776469   0.00694168 -0.00856821  0.40164718  0.1228183   0.49439158\n","  0.30438976 -0.38462932]\n","Iteration 3 - Learning Rate: 0.344287\n","Iteration 3 - Training Accuracy: 72.00%\n","Iteration 3 - Test Accuracy: 54.40%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [ 0.61433676  0.67810817  0.33912752 -0.06260508 -0.14038768  0.75582435\n","  0.88860622 -0.18290327 -0.04019744  0.53080542  0.89298216  0.90522815\n","  0.4651313  -0.01825604  0.09300305  0.28249029  0.17139851  0.42917502\n","  0.34557667 -0.33536057]\n","Iteration 4 - Learning Rate: 0.382672\n","Iteration 4 - Training Accuracy: 72.00%\n","Iteration 4 - Test Accuracy: 56.00%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [ 0.57075378  0.6255771   0.32284019 -0.07486063 -0.19730673  0.75766412\n","  0.92480748 -0.16843328 -0.02124635  0.51980865  0.86174221  0.86886568\n","  0.46146672  0.01689186  0.1128137   0.27181111  0.2398747   0.44265929\n","  0.36338767 -0.347409  ]\n","Iteration 5 - Learning Rate: 0.412572\n","Iteration 5 - Training Accuracy: 72.00%\n","Iteration 5 - Test Accuracy: 56.00%\n","\n","\n","Fed_Epoch 3, Client 8:\n","Training data for epoch 3: 50\n","Client Data Structure:\n","[{'sequence': array([0.61339366, 0.61339366, 0.61339366, 0.61339366, 0.61339366]), 'label': 1}, {'sequence': array([0.69900748, 0.69900748, 0.69900748, 0.69900748, 0.69900748]), 'label': 1}, {'sequence': array([0.89364354, 0.89364354, 0.89364354, 0.89364354, 0.89364354]), 'label': 1}, {'sequence': array([0.25470364, 0.25470364, 0.25470364, 0.25470364, 0.25470364]), 'label': 0}, {'sequence': array([0.88329352, 0.88329352, 0.88329352, 0.88329352, 0.88329352]), 'label': 1}, {'sequence': array([0.38912079, 0.38912079, 0.38912079, 0.38912079, 0.38912079]), 'label': 0}, {'sequence': array([0.70568623, 0.70568623, 0.70568623, 0.70568623, 0.70568623]), 'label': 1}, {'sequence': array([0.37174582, 0.37174582, 0.37174582, 0.37174582, 0.37174582]), 'label': 0}, {'sequence': array([0.25853768, 0.25853768, 0.25853768, 0.25853768, 0.25853768]), 'label': 0}, {'sequence': array([0.93727591, 0.93727591, 0.93727591, 0.93727591, 0.93727591]), 'label': 1}, {'sequence': array([0.15687414, 0.15687414, 0.15687414, 0.15687414, 0.15687414]), 'label': 0}, {'sequence': array([0.90222311, 0.90222311, 0.90222311, 0.90222311, 0.90222311]), 'label': 1}, {'sequence': array([0.1311655, 0.1311655, 0.1311655, 0.1311655, 0.1311655]), 'label': 0}, {'sequence': array([0.22275884, 0.22275884, 0.22275884, 0.22275884, 0.22275884]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.15100911, 0.15100911, 0.15100911, 0.15100911, 0.15100911]), 'label': 0}, {'sequence': array([0.19292533, 0.19292533, 0.19292533, 0.19292533, 0.19292533]), 'label': 0}, {'sequence': array([0.8864561, 0.8864561, 0.8864561, 0.8864561, 0.8864561]), 'label': 1}, {'sequence': array([0.73625651, 0.73625651, 0.73625651, 0.73625651, 0.73625651]), 'label': 1}, {'sequence': array([0.19165314, 0.19165314, 0.19165314, 0.19165314, 0.19165314]), 'label': 0}, {'sequence': array([0.32784891, 0.32784891, 0.32784891, 0.32784891, 0.32784891]), 'label': 0}, {'sequence': array([0.77380601, 0.77380601, 0.77380601, 0.77380601, 0.77380601]), 'label': 1}, {'sequence': array([0.7426603, 0.7426603, 0.7426603, 0.7426603, 0.7426603]), 'label': 1}, {'sequence': array([0.70837317, 0.70837317, 0.70837317, 0.70837317, 0.70837317]), 'label': 1}, {'sequence': array([0.46037857, 0.46037857, 0.46037857, 0.46037857, 0.46037857]), 'label': 0}, {'sequence': array([0.34938014, 0.34938014, 0.34938014, 0.34938014, 0.34938014]), 'label': 0}, {'sequence': array([0.53780649, 0.53780649, 0.53780649, 0.53780649, 0.53780649]), 'label': 1}, {'sequence': array([0.93696102, 0.93696102, 0.93696102, 0.93696102, 0.93696102]), 'label': 1}, {'sequence': array([0.56578875, 0.56578875, 0.56578875, 0.56578875, 0.56578875]), 'label': 1}, {'sequence': array([0.02739878, 0.02739878, 0.02739878, 0.02739878, 0.02739878]), 'label': 0}, {'sequence': array([0.7077628, 0.7077628, 0.7077628, 0.7077628, 0.7077628]), 'label': 1}, {'sequence': array([0.44817919, 0.44817817, 0.44817817, 0.44817817, 0.44817817]), 'label': 0}, {'sequence': array([0.91941508, 0.91941508, 0.91941508, 0.91941508, 0.91941508]), 'label': 1}, {'sequence': array([0.05247118, 0.14063982, 0.04804758, 0.14063286, 0.04803547]), 'label': 0}, {'sequence': array([0.09779747, 0.09779747, 0.09779747, 0.09779747, 0.09779747]), 'label': 0}, {'sequence': array([0.25183016, 0.25183016, 0.25183016, 0.25183016, 0.25183016]), 'label': 0}, {'sequence': array([0.52049174, 0.52049174, 0.52049174, 0.52049174, 0.52049174]), 'label': 1}, {'sequence': array([0.99878608, 0.99878608, 0.75694958, 0.99878195, 0.99878195]), 'label': 1}, {'sequence': array([0.17072989, 0.17072989, 0.17072989, 0.17072989, 0.17072989]), 'label': 0}, {'sequence': array([0.92730935, 0.92730935, 0.92730935, 0.92730935, 0.92730935]), 'label': 1}, {'sequence': array([0.307385, 0.307385, 0.307385, 0.307385, 0.307385]), 'label': 0}, {'sequence': array([0.02579256, 0.02579256, 0.02579256, 0.02579256, 0.02579256]), 'label': 0}, {'sequence': array([0.28132117, 0.28132117, 0.28132117, 0.28132117, 0.28132117]), 'label': 0}, {'sequence': array([0.65159615, 0.65159615, 0.65159615, 0.65159615, 0.65159615]), 'label': 1}, {'sequence': array([0.4097287, 0.4097287, 0.4097287, 0.4097287, 0.4097287]), 'label': 0}, {'sequence': array([0.15209454, 0.15209454, 0.15209454, 0.15209454, 0.15209454]), 'label': 0}, {'sequence': array([0.13066326, 0.13066326, 0.13066326, 0.13066326, 0.13066326]), 'label': 0}, {'sequence': array([0.96636267, 0.96636267, 0.96636267, 0.96636267, 0.96636267]), 'label': 1}, {'sequence': array([0.3585079, 0.3585079, 0.3585079, 0.3585079, 0.3585079]), 'label': 0}, {'sequence': array([0.56425015, 0.56425015, 0.56425015, 0.56425015, 0.56425015]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.56749071 0.31809694 0.53816782 0.04862204 0.39304903 0.85240742\n"," 0.70108141 0.90560009 0.75699792 0.75183889 0.82426155 0.05213248\n"," 0.43750078 0.97247861 0.18391807 0.61238713 0.72549347 0.92809651\n"," 0.82270616 0.72331775]\n","Iteration 1 - Learning Rate: 0.173275\n","Iteration 1 - Training Accuracy: 40.00%\n","Iteration 1 - Test Accuracy: 39.20%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [0.55711155 0.34233629 0.46920202 0.13466503 0.35149362 0.86342546\n"," 0.76164296 0.88749981 0.69374244 0.76416935 0.72103394 0.09434337\n"," 0.5013538  1.02937447 0.10424243 0.48908421 0.73493679 0.87873824\n"," 0.76437157 0.6152814 ]\n","Iteration 2 - Learning Rate: 0.203357\n","Iteration 2 - Training Accuracy: 44.00%\n","Iteration 2 - Test Accuracy: 43.20%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [0.52706166 0.35663282 0.41653692 0.18702747 0.28911365 0.88941291\n"," 0.74603591 0.91687678 0.71605555 0.73700402 0.67610151 0.15483717\n"," 0.47269178 1.03016426 0.08440072 0.44930099 0.76044969 0.7807779\n"," 0.65542918 0.65095724]\n","Iteration 3 - Learning Rate: 0.235579\n","Iteration 3 - Training Accuracy: 54.00%\n","Iteration 3 - Test Accuracy: 46.40%\n","\n","\n","Deep Unfolding Iteration 4/5\n","Trained parameters after iteration 4: [0.54423405 0.35953738 0.35119977 0.19335097 0.2178345  0.89250479\n"," 0.80212229 0.95063431 0.68617176 0.7549087  0.66828711 0.14435424\n"," 0.49493894 0.9890844  0.05768432 0.37024321 0.73055043 0.75570735\n"," 0.62287605 0.70528274]\n","Iteration 4 - Learning Rate: 0.263851\n","Iteration 4 - Training Accuracy: 62.00%\n","Iteration 4 - Test Accuracy: 48.00%\n","\n","\n","Deep Unfolding Iteration 5/5\n","Trained parameters after iteration 5: [0.51608052 0.31992055 0.33441757 0.215314   0.17519968 0.91527332\n"," 0.80504729 0.95735155 0.69235555 0.72172902 0.67222864 0.20953077\n"," 0.49220765 0.98783931 0.0356132  0.28032879 0.68537663 0.75508545\n"," 0.55385979 0.76820043]\n","Iteration 5 - Learning Rate: 0.290590\n","Iteration 5 - Training Accuracy: 56.00%\n","Iteration 5 - Test Accuracy: 48.80%\n","Global Loss for Round 3: 0.4233105629504486\n","Time for Round 3: 1162.35 s\n","Best client for epoch 3 is Client 1 with test accuracy 0.84\n","Global Model Accuracy in Epoch 3: 0.82\n","----------------------------------------------------------\n"]},{"output_type":"stream","name":"stderr","text":["\rTraining Progress:  40%|████      | 4/10 [1:20:12<2:01:57, 1219.57s/it]"]},{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n","File saved to /content/drive/MyDrive/DQFL_Genome_IID_Global_2504_2025_.csv\n","\n","\n","Fed_Epoch: 4\n","\n","\n","Fed_Epoch 4, Client 1:\n","Training data for epoch 4: 50\n","Client Data Structure:\n","[{'sequence': array([0.40630435, 0.40630435, 0.40630435, 0.40630435, 0.40630435]), 'label': 0}, {'sequence': array([0.69297679, 0.69297679, 0.69297679, 0.69297679, 0.69297679]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.01366776, 0.01366776, 0.01366776, 0.01366776, 0.01366776]), 'label': 0}, {'sequence': array([0.17035209, 0.17035209, 0.17035209, 0.17035209, 0.17035209]), 'label': 0}, {'sequence': array([0.10010762, 0.10010762, 0.10010762, 0.10010762, 0.10010762]), 'label': 0}, {'sequence': array([0.6644925, 0.6644925, 0.6644925, 0.6644925, 0.6644925]), 'label': 1}, {'sequence': array([0.3015228, 0.3015228, 0.3015228, 0.3015228, 0.3015228]), 'label': 0}, {'sequence': array([0.83585015, 0.83585015, 0.83585015, 0.83585015, 0.83585015]), 'label': 1}, {'sequence': array([0.0822202, 0.0822202, 0.0822202, 0.0822202, 0.0822202]), 'label': 0}, {'sequence': array([0.68830336, 0.68830336, 0.68830336, 0.68830336, 0.68830336]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.36352339, 0.36352339, 0.36352339, 0.36352339, 0.36352339]), 'label': 0}, {'sequence': array([0.0058314, 0.0058314, 0.0058314, 0.0058314, 0.0058314]), 'label': 0}, {'sequence': array([0.44427797, 0.44427797, 0.44427797, 0.44427797, 0.44427797]), 'label': 0}, {'sequence': array([0.5214539, 0.5214539, 0.5214539, 0.5214539, 0.5214539]), 'label': 1}, {'sequence': array([0.32741755, 0.32741755, 0.32741755, 0.32741755, 0.32741755]), 'label': 0}, {'sequence': array([0.65620992, 0.65620992, 0.65620992, 0.65620992, 0.65620992]), 'label': 1}, {'sequence': array([0.39504277, 0.39504277, 0.39504277, 0.39504277, 0.39504277]), 'label': 0}, {'sequence': array([0.51249442, 0.51249442, 0.51249442, 0.51249442, 0.51249442]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.46704652, 0.46704652, 0.46704652, 0.46704652, 0.46704652]), 'label': 0}, {'sequence': array([0.76351035, 0.76351035, 0.76351035, 0.76351035, 0.76351035]), 'label': 1}, {'sequence': array([0.34608494, 0.34608494, 0.34608494, 0.34608494, 0.34608494]), 'label': 0}, {'sequence': array([0.55764235, 0.57348887, 0.57348836, 0.57348836, 0.53887481]), 'label': 1}, {'sequence': array([0.21579122, 0.21579122, 0.21579122, 0.21579122, 0.21579122]), 'label': 0}, {'sequence': array([0.2791843, 0.2791843, 0.2791843, 0.2791843, 0.2791843]), 'label': 0}, {'sequence': array([0.51152285, 0.51152285, 0.51152285, 0.51152285, 0.51152285]), 'label': 0}, {'sequence': array([0.44887471, 0.44887471, 0.44887471, 0.44887471, 0.44887471]), 'label': 0}, {'sequence': array([0.75743225, 0.75743225, 0.75743225, 0.75743225, 0.75743225]), 'label': 1}, {'sequence': array([0.70971747, 0.70971747, 0.70971747, 0.70971747, 0.70971747]), 'label': 1}, {'sequence': array([0.65821032, 0.65821032, 0.65821032, 0.65821032, 0.65821032]), 'label': 1}, {'sequence': array([0.45997171, 0.45997171, 0.45997171, 0.45997171, 0.45997171]), 'label': 0}, {'sequence': array([0.92324528, 0.92324528, 0.92324528, 0.92324528, 0.92324528]), 'label': 1}, {'sequence': array([0.19919098, 0.19919098, 0.19919098, 0.19919098, 0.19919098]), 'label': 0}, {'sequence': array([0.30746704, 0.30746704, 0.30746704, 0.30746704, 0.30746704]), 'label': 0}, {'sequence': array([0.29566829, 0.29566829, 0.29566829, 0.29566829, 0.29566829]), 'label': 0}, {'sequence': array([0.51308319, 0.51308029, 0.51307739, 0.51307449, 0.51307159]), 'label': 1}, {'sequence': array([0.64328682, 0.64328588, 0.64328588, 0.64328588, 0.64328588]), 'label': 1}, {'sequence': array([0.96708537, 0.96708537, 0.96708537, 0.96708537, 0.96708537]), 'label': 1}, {'sequence': array([0.92799574, 0.92799574, 0.92799574, 0.92799574, 0.92799574]), 'label': 1}, {'sequence': array([0.4487352, 0.4487352, 0.4487352, 0.4487352, 0.4487352]), 'label': 0}, {'sequence': array([0.31538921, 0.31538921, 0.31538921, 0.31538921, 0.31538921]), 'label': 0}, {'sequence': array([0.98395694, 0.98395694, 0.98395694, 0.98395694, 0.98395694]), 'label': 1}, {'sequence': array([0.28184761, 0.28184761, 0.28184761, 0.28184761, 0.28184761]), 'label': 0}, {'sequence': array([0.31626874, 0.31626874, 0.31626874, 0.31626874, 0.31626874]), 'label': 0}, {'sequence': array([0.14857373, 0.14857373, 0.14857373, 0.14857373, 0.14857373]), 'label': 0}, {'sequence': array([0.09601029, 0.09601029, 0.09601029, 0.09601029, 0.09601029]), 'label': 0}, {'sequence': array([0.64475745, 0.64475745, 0.64475745, 0.64475745, 0.64475745]), 'label': 1}]\n","<class 'list'>\n","\n","\n","Deep Unfolding Iteration 1/5\n","Trained parameters after iteration 1: [0.73169105 0.27859587 0.2656509  1.05568872 1.01410863 0.4627106\n"," 0.3767432  0.4509924  0.4607289  0.92982085 0.48083068 0.97501965\n"," 0.6377335  1.02006333 0.69246724 0.3505474  0.8675289  0.27150169\n"," 0.92859872 0.04145144]\n","Iteration 1 - Learning Rate: 0.164561\n","Iteration 1 - Training Accuracy: 54.00%\n","Iteration 1 - Test Accuracy: 53.60%\n","\n","\n","Deep Unfolding Iteration 2/5\n","Trained parameters after iteration 2: [ 0.56412744  0.19318172  0.34933121  1.18664823  1.01298582  0.43267785\n","  0.30870123  0.42855601  0.59193623  0.90387764  0.40499001  0.97700365\n","  0.58401106  1.13914152  0.69186381  0.22074202  0.76870113  0.33117227\n","  0.91879505 -0.09457486]\n","Iteration 2 - Learning Rate: 0.196752\n","Iteration 2 - Training Accuracy: 68.00%\n","Iteration 2 - Test Accuracy: 67.20%\n","\n","\n","Deep Unfolding Iteration 3/5\n","Trained parameters after iteration 3: [ 0.53047667  0.22324515  0.33178585  1.20029488  0.90150684  0.47617537\n","  0.20668943  0.419396    0.56748501  0.97149985  0.40442758  0.99655306\n","  0.50242033  1.13690366  0.6792901   0.18549212  0.67231268  0.40719491\n","  0.89127747 -0.08846916]\n","Iteration 3 - Learning Rate: 0.237161\n","Iteration 3 - Training Accuracy: 74.00%\n","Iteration 3 - Test Accuracy: 72.00%\n","\n","\n","Deep Unfolding Iteration 4/5\n"]}],"source":["# Initialize a global list to track global loss\n","global_loss_per_round = []\n","round_times = []  # Initialize round_times here\n","\n","# Display information about the data assigned to each client, including epoch-wise splits\n","for idx, client in enumerate(clients):\n","    print(f\"Client {idx + 1}:\")\n","    for epoch in range(num_epochs):\n","        print(f\"  Epoch {epoch + 1}: Train data samples: {len(client.data[epoch])}\")\n","    print(f\"  Test data samples: {len(client.test_data)}\")\n","\n","# Display information about the data assigned to each client\n","for idx, client in enumerate(clients):\n","    print(f\"Client {idx + 1}:\")\n","    print(f\"  Train data epochs: {len(client.data)}\")\n","    print(f\"  Test data samples: {len(client.test_data)}\")\n","\n","    # Accessing the number of features in a sequence\n","    if client.data:\n","        num_features=client.data[0][0]['sequence'].shape[0]  # Access first data point of epoch 0\n","        #num_features = client.data[0]['sequence'].shape[0]\n","        print(f\"  Number of features in a sequence: {num_features}\")\n","\n","def reset_state():\n","    # Reset the objective value, learning rate, and perturbation after each client\n","    global objective_func_vals, learning_rates, perturbations\n","    objective_func_vals = []  # Reset objective values\n","    learning_rates = []  # Reset learning rates\n","    perturbations = []  # Reset perturbations\n","# Function to reset callback graph state after each round\n","def reset_callback_graph():\n","    global gradient_moving_avg, learning_rates, perturbations\n","\n","    # Reset the state variables to start fresh for the next round\n","    gradient_moving_avg = np.zeros_like(gradient_moving_avg)  # Reset gradient moving average\n","    learning_rates = [initial_learning_rate]  # Reset learning rates list to initial value\n","    perturbations = [initial_perturbation]  # Reset perturbations list to initial value\n","import csv\n","\n","# Path to store the best client's data\n","best_client_csv_file = '/content/drive/My Drive/Best_Client_DQFL_Genome_IID_2604_2025.csv'\n","'''\n","# Write headers to the best client CSV file\n","best_headers = [\"Federated Round\", \"Client Number\"]\n","\n","with open(best_client_csv_file, mode='w', newline='') as file:\n","    writer = csv.writer(file)\n","    writer.writerow(best_headers)\n","\n","# Function to update the best client data\n","def save_best_client_results(federated_round,best_client_index):\n","    \"\"\"\n","    Save the best client's data to a separate CSV file.\n","    :param best_data: Dictionary containing the best client's data.\n","    \"\"\"\n","    with open(best_client_csv_file, mode='a', newline='') as file:\n","        writer = csv.writer(file)\n","        writer.writerow([federated_round,\n","           best_client_index\n","\n","        ])\n","'''\n","# Update CSV headers to include round time\n","best_headers = [\"Federated Round\", \"Client Number\", \"Round Duration (s)\"]\n","with open(best_client_csv_file, mode='w', newline='') as file:\n","    writer = csv.writer(file)\n","    writer.writerow(best_headers)\n","\n","# Function to update the best client data\n","def save_best_client_results(federated_round, best_client_index, round_duration):\n","    with open(best_client_csv_file, mode='a', newline='') as file:\n","        writer = csv.writer(file)\n","        writer.writerow([federated_round,\n","                         best_client_index,\n","                         f\"{round_duration:.4f}\"])\n","# Clear the CSV file for a new run\n","clear_csv_file()\n","\n","# Wrap the epoch loop with tqdm\n","for epoch in tqdm(range(num_federated_layers), desc=\"Training Progress\", leave =True):\n","    round_start = time.time()\n","    global_model_weights[epoch] = []\n","    epoch_train_accuracies, epoch_test_accuracies = [], []\n","    best_client_index = -1\n","    best_client_accuracy = -1\n","    best_client_model = None\n","    print(\"\\n\")\n","    print(f\"Fed_Epoch: {epoch}\")\n","    round_losses = []  # Track individual client losses for this round\n","\n","    for index, client in enumerate(clients):\n","        print(\"\\n\")\n","        print(f\"Fed_Epoch {epoch}, Client {index + 1}:\")\n","        reset_state()\n","\n","        try:\n","            # Ensure you're using the correct index for data\n","            current_data = client.data[epoch]  # This assumes data is structured in epochs\n","            print(f\"Training data for epoch {epoch}: {len(current_data)}\")\n","        except IndexError:\n","            print(f\"No data available for epoch {epoch} for Client {index + 1}\")\n","            continue  # Skip this client for the current epoch\n","\n","        model, train_score, test_score, train_time = train_qnn_model(\n","            client.data[epoch],\n","            client.test_data,\n","            client_id=index,\n","            layer=epoch,\n","        )\n","\n","        epoch_train_accuracies.append(train_score)\n","        epoch_test_accuracies.append(test_score)\n","\n","        # Fetch the client's loss (assumes train_qnn_model returns it)\n","        current_loss = objective_func_vals[-1]  # Fetch latest loss\n","        round_losses.append(current_loss)\n","        # Calculate global loss for the current round as the average of client losses\n","\n","\n","        # Check if this client has the best accuracy so far\n","        if test_score > best_client_accuracy:\n","            best_client_accuracy = test_score\n","            best_client_index = index\n","            best_client_model = model  # Directly store the best client's model\n","\n","    global_loss = sum(round_losses) / len(round_losses)\n","    global_loss_per_round.append(global_loss)  # Store the global loss\n","\n","    print(f\"Global Loss for Round {epoch}: {global_loss}\")\n","\n","    round_duration = time.time() - round_start\n","    round_times.append(round_duration)\n","    print(f\"Time for Round {epoch}: {round_duration:.2f} s\")\n","\n","    #save_best_client_results(epoch,best_client_index)  # Save to best client CSV\n","    save_best_client_results(epoch, best_client_index, round_duration)\n","    print(f\"Best client for epoch {epoch} is Client {best_client_index + 1} with test accuracy {best_client_accuracy:.2f}\")\n","\n","    # Treat the best client's model as the global model for the next round\n","    global_model = best_client_model\n","\n","    # Update all clients with the global model\n","    for index, client in enumerate(clients):\n","        client.primary_model = global_model\n","\n","    # Evaluate the global model on the new test data\n","    global_accuracy = get_accuracy(global_model, test_sequences, test_labels)\n","    global_model_accuracy.append(global_accuracy)\n","\n","    clients_train_accuracies.append(epoch_train_accuracies)\n","    clients_test_accuracies.append(epoch_test_accuracies)\n","\n","    print(f\"Global Model Accuracy in Epoch {epoch}: {global_accuracy:.2f}\")\n","    print(\"----------------------------------------------------------\")\n","\n","\n","    # Save results for the current iteration of the client in the federated round\n","    from google.colab import drive\n","\n","    # Step 1: Mount Google Drive\n","    drive.mount('/content/drive')\n","\n","    # Step 2: Define the save path in Google Drive\n","    save_path = '/content/drive/MyDrive/DQFL_Genome_IID_Global_2604_2025_.csv'\n","\n","\n","    # Save accuracies to CSV after each epoch (or at the end of all epochs)\n","    save_accuracies_to_csv(global_model_accuracy, clients_train_accuracies, clients_test_accuracies, filename=save_path)\n","    # After each round, reset callback state to prepare for the next round\n","    reset_callback_graph()\n","    print(f\"File saved to {save_path}\")\n","\n","#print(\"Accuracy data saved to\", csv_file_path)\n","# After loop, compute total elapsed time\n","total_training_time = time.time() - overall_start\n","print(f\"Total training time: {total_training_time:.2f} s\")\n"]},{"cell_type":"code","source":["# Define the path to save global loss\n","global_loss_csv = '/content/drive/My Drive/Federated_Global_Loss_29_01_2025.csv'\n","\n","# Write headers to the CSV file (only at the beginning)\n","if epoch == 0:\n","    with open(global_loss_csv, mode='w', newline='') as file:\n","        writer = csv.writer(file)\n","        writer.writerow([\"Federated Round\", \"Global Loss\"])\n","\n","# Append the global loss after each round\n","with open(global_loss_csv, mode='a', newline='') as file:\n","    writer = csv.writer(file)\n","    writer.writerow([epoch, global_loss])\n"],"metadata":{"id":"8RwQoPVIRKbI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","\n","# Plot global loss over federated rounds\n","plt.figure(figsize=(10, 6))\n","plt.plot(range(len(global_loss_per_round)), global_loss_per_round, marker='o', color='blue', label=\"Global Loss\")\n","plt.xlabel(\"Federated Round\")\n","plt.ylabel(\"Global Loss\")\n","plt.title(\"Global Loss Over Federated Rounds\")\n","plt.legend()\n","plt.grid(True)\n","plt.show()\n"],"metadata":{"id":"4D9XnmHoRPez"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"4Zs_rlJT5XJv"},"source":["Split data as iid and non-iid"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"9pgm1g3VHfXC"},"outputs":[],"source":["\n","\n","#Introduce custome cross entropy function\n","import numpy as np\n","\n","# Callback for updating learning rate dynamically with deep unfolding principles\n","def deep_unfolding_learning_rate_adjustment(obj_func_eval, gradients=None, client_id=None, layer=None):\n","    global gradient_moving_avg, learning_rates, perturbations,meta_alpha, meta_epsilon, momentum\n","\n","    # Initialize moving average for gradients\n","    if gradients is not None:\n","        if not isinstance(gradient_moving_avg, np.ndarray) or gradient_moving_avg.size == 0:\n","            gradient_moving_avg = gradients\n","        else:\n","            # Update moving average of gradients (Momentum)\n","            gradient_moving_avg = momentum * gradient_moving_avg + (1 - momentum) * gradients\n","        # Calculate the average gradient\n","        avg_gradient = np.mean(gradient_moving_avg)\n","\n","        # Normalize delta_lr by L2 norm of the gradient\n","        norm_gradient = np.linalg.norm(gradients)\n","\n","        '''\n","        # Normalization to prevent instability\n","        norm_gradient = gradients / (np.linalg.norm(gradients) + 1e-8)\n","        avg_gradient = np.mean(norm_gradient)\n","        '''\n","        # Trainable scaling for deep unfolding (meta-parameter)\n","        meta_alpha = 0.01  # This can be learned via a hypernetwork or meta-learning\n","        meta_epsilon = 1e-6  # Small offset to ensure numerical stability\n","        # Gradually adjust learning rate based on gradient signs and magnitude\n","        # This formula gradually adds or subtracts from the learning rate instead of multiplication\n","        delta_lr = meta_alpha * np.sign(avg_gradient) * np.sqrt(np.abs(avg_gradient) + meta_epsilon) / (norm_gradient + 1e-6)\n","\n","        #delta_lr = meta_alpha * np.sign(avg_gradient) * np.sqrt(np.abs(avg_gradient) + meta_epsilon)\n","    # Apply gradual adjustment (either addition or subtraction based on the direction of the gradient)\n","        if avg_gradient > 0:\n","            delta_lr = delta_lr - 0.001  # Decrease if gradient is positive (potential overfitting)\n","        else:\n","            delta_lr = delta_lr + 0.001  # Increase if gradient is negative (potential underfitting)\n","    else:\n","        delta_lr = 0\n","\n","    # Compute new learning rate with clamping for stability\n","    new_lr = max(0.001, min(5.0, learning_rates[-1] + delta_lr)) if learning_rates else initial_learning_rate\n","\n","    # Update per-client, per-layer information if federated\n","    if client_id is not None and layer is not None:\n","        if client_id not in client_data:\n","            client_data[client_id] = {'federated_layers': {}}\n","        if layer not in client_data[client_id]['federated_layers']:\n","            client_data[client_id]['federated_layers'][layer] = {'objective_values': [], 'learning_rates': []}\n","\n","        # Store loss and learning rate for the specific client and layer\n","        client_data[client_id]['federated_layers'][layer]['objective_values'].append(obj_func_eval)\n","        client_data[client_id]['federated_layers'][layer]['learning_rates'].append(new_lr)\n","\n","    # Store global metrics\n","    objective_func_vals.append(obj_func_eval)  # Store the loss value globally\n","    learning_rates.append(new_lr)  # Append the new learning rate to the history\n","\n","    # Update meta-parameters (meta_alpha and meta_epsilon) using gradient descent\n","    #meta_gradients = compute_meta_gradients(gradients, avg_gradient, delta_lr)\n","    #meta_alpha -= meta_learning_rate * meta_gradients['alpha']\n","    #meta_epsilon -= meta_learning_rate * meta_gradients['epsilon']\n","\n","    # Debug output for analysis\n","    # print(f\"Objective Function Value: {obj_func_eval:.6f}, New Learning Rate: {new_lr:.6f}\")\n","\n","    return new_lr\n","\n","\n","def callback_graph(weights, loss):\n","    \"\"\"Callback to log and synchronize loss during training.\"\"\"\n","    #print(f\"Loss = {loss}\")\n","    if len(objective_func_vals) == 0 or loss != objective_func_vals[-1]:\n","        objective_func_vals.append(loss)\n","\n","spsa_optimizer = SPSA(maxiter=50, learning_rate=0.01, perturbation = 0.15, callback=lambda nfev, params, obj_func_eval, stepsize, accept: deep_unfolding_learning_rate_adjustment(obj_func_eval, stepsize))\n","\n","\n","\n","# Define the CSV file path\n","csv_file_path = 'federated_learning_accuracy.csv'\n","\n","# Open the CSV file in write mode and add headers (if starting fresh)\n","with open(csv_file_path, mode='w', newline='') as file:\n","    writer = csv.writer(file)\n","    # Write the header\n","    writer.writerow(['Epoch', 'Global Accuracy'] + [f'Client {i+1} Final Accuracy' for i in range(num_clients)])\n","\n"]},{"cell_type":"markdown","metadata":{"id":"9a_q7UqBTcju"},"source":["new ways to average"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","machine_shape":"hm","provenance":[{"file_id":"1wzVu0QDWaGORXG5Ye_xJj4xO8ALG8Hud","timestamp":1738107095229},{"file_id":"1MefLVdbEMc-FEamBEekdnVsjaPFcV3QA","timestamp":1733113818972},{"file_id":"1StZk5RDM3Qjme5eUPpN0ryW87ndl8cod","timestamp":1731414758246},{"file_id":"17rAfjIC2usvGXyBR7HfqknWLlm_6yXkF","timestamp":1730290099203}],"mount_file_id":"1wzVu0QDWaGORXG5Ye_xJj4xO8ALG8Hud","authorship_tag":"ABX9TyMtJ21cEzpV3GEiUXZS1kRU"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}